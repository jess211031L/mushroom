2024-08-20 01:56:59,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 01:56:59,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 01:56:59,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 01:56:59,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:01:04,352:INFO:PyCaret ClassificationExperiment
2024-08-20 02:01:04,352:INFO:Logging name: clf-default-name
2024-08-20 02:01:04,353:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:01:04,353:INFO:version 3.3.2
2024-08-20 02:01:04,353:INFO:Initializing setup()
2024-08-20 02:01:04,353:INFO:self.USI: 0696
2024-08-20 02:01:04,353:INFO:self._variable_keys: {'USI', '_ml_usecase', 'fold_generator', 'is_multiclass', 'data', 'html_param', 'y', 'seed', 'gpu_param', 'idx', 'fold_shuffle_param', 'memory', 'y_train', 'fix_imbalance', '_available_plots', 'X_test', 'exp_name_log', 'log_plots_param', 'X_train', 'pipeline', 'logging_param', 'fold_groups_param', 'X', 'exp_id', 'gpu_n_jobs_param', 'y_test', 'target_param', 'n_jobs_param'}
2024-08-20 02:01:04,353:INFO:Checking environment
2024-08-20 02:01:04,354:INFO:python_version: 3.11.7
2024-08-20 02:01:04,354:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:01:04,354:INFO:machine: AMD64
2024-08-20 02:01:04,354:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:01:04,354:INFO:Memory: svmem(total=16890978304, available=4352958464, percent=74.2, used=12538019840, free=4352958464)
2024-08-20 02:01:04,354:INFO:Physical Core: 12
2024-08-20 02:01:04,354:INFO:Logical Core: 16
2024-08-20 02:01:04,355:INFO:Checking libraries
2024-08-20 02:01:04,355:INFO:System:
2024-08-20 02:01:04,355:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:01:04,355:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:01:04,355:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:01:04,355:INFO:PyCaret required dependencies:
2024-08-20 02:01:06,221:INFO:                 pip: 23.3.1
2024-08-20 02:01:06,221:INFO:          setuptools: 68.2.2
2024-08-20 02:01:06,221:INFO:             pycaret: 3.3.2
2024-08-20 02:01:06,222:INFO:             IPython: 8.20.0
2024-08-20 02:01:06,222:INFO:          ipywidgets: 7.6.5
2024-08-20 02:01:06,222:INFO:                tqdm: 4.65.0
2024-08-20 02:01:06,222:INFO:               numpy: 1.26.4
2024-08-20 02:01:06,222:INFO:              pandas: 2.1.4
2024-08-20 02:01:06,222:INFO:              jinja2: 3.1.3
2024-08-20 02:01:06,222:INFO:               scipy: 1.11.4
2024-08-20 02:01:06,222:INFO:              joblib: 1.2.0
2024-08-20 02:01:06,222:INFO:             sklearn: 1.2.2
2024-08-20 02:01:06,222:INFO:                pyod: 2.0.1
2024-08-20 02:01:06,222:INFO:            imblearn: 0.11.0
2024-08-20 02:01:06,222:INFO:   category_encoders: 2.6.3
2024-08-20 02:01:06,222:INFO:            lightgbm: 4.4.0
2024-08-20 02:01:06,223:INFO:               numba: 0.59.0
2024-08-20 02:01:06,223:INFO:            requests: 2.31.0
2024-08-20 02:01:06,223:INFO:          matplotlib: 3.8.0
2024-08-20 02:01:06,223:INFO:          scikitplot: 0.3.7
2024-08-20 02:01:06,223:INFO:         yellowbrick: 1.5
2024-08-20 02:01:06,223:INFO:              plotly: 5.9.0
2024-08-20 02:01:06,223:INFO:    plotly-resampler: Not installed
2024-08-20 02:01:06,223:INFO:             kaleido: 0.2.1
2024-08-20 02:01:06,223:INFO:           schemdraw: 0.15
2024-08-20 02:01:06,223:INFO:         statsmodels: 0.14.0
2024-08-20 02:01:06,223:INFO:              sktime: 0.26.0
2024-08-20 02:01:06,223:INFO:               tbats: 1.1.3
2024-08-20 02:01:06,223:INFO:            pmdarima: 2.0.4
2024-08-20 02:01:06,223:INFO:              psutil: 5.9.0
2024-08-20 02:01:06,224:INFO:          markupsafe: 2.1.3
2024-08-20 02:01:06,224:INFO:             pickle5: Not installed
2024-08-20 02:01:06,224:INFO:         cloudpickle: 2.2.1
2024-08-20 02:01:06,224:INFO:         deprecation: 2.1.0
2024-08-20 02:01:06,224:INFO:              xxhash: 3.4.1
2024-08-20 02:01:06,224:INFO:           wurlitzer: Not installed
2024-08-20 02:01:06,224:INFO:PyCaret optional dependencies:
2024-08-20 02:01:15,050:INFO:                shap: 0.44.1
2024-08-20 02:01:15,050:INFO:           interpret: 0.6.2
2024-08-20 02:01:15,050:INFO:                umap: 0.5.6
2024-08-20 02:01:15,050:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:01:15,050:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:01:15,050:INFO:             autoviz: Not installed
2024-08-20 02:01:15,050:INFO:           fairlearn: 0.7.0
2024-08-20 02:01:15,051:INFO:          deepchecks: Not installed
2024-08-20 02:01:15,051:INFO:             xgboost: 2.1.0
2024-08-20 02:01:15,051:INFO:            catboost: 1.2.5
2024-08-20 02:01:15,051:INFO:              kmodes: 0.12.2
2024-08-20 02:01:15,051:INFO:             mlxtend: 0.23.1
2024-08-20 02:01:15,051:INFO:       statsforecast: 1.5.0
2024-08-20 02:01:15,051:INFO:        tune_sklearn: Not installed
2024-08-20 02:01:15,051:INFO:                 ray: Not installed
2024-08-20 02:01:15,051:INFO:            hyperopt: 0.2.7
2024-08-20 02:01:15,051:INFO:              optuna: 3.6.1
2024-08-20 02:01:15,051:INFO:               skopt: 0.10.2
2024-08-20 02:01:15,052:INFO:              mlflow: 2.14.2
2024-08-20 02:01:15,052:INFO:              gradio: 4.37.2
2024-08-20 02:01:15,052:INFO:             fastapi: 0.111.0
2024-08-20 02:01:15,052:INFO:             uvicorn: 0.30.1
2024-08-20 02:01:15,052:INFO:              m2cgen: 0.10.0
2024-08-20 02:01:15,052:INFO:           evidently: 0.4.30
2024-08-20 02:01:15,052:INFO:               fugue: 0.8.7
2024-08-20 02:01:15,052:INFO:           streamlit: 1.30.0
2024-08-20 02:01:15,052:INFO:             prophet: Not installed
2024-08-20 02:01:15,052:INFO:None
2024-08-20 02:01:15,052:INFO:Set up data.
2024-08-20 02:01:15,107:INFO:Set up folding strategy.
2024-08-20 02:01:15,108:INFO:Set up train/test split.
2024-08-20 02:01:15,133:INFO:Set up index.
2024-08-20 02:01:15,134:INFO:Assigning column types.
2024-08-20 02:01:15,141:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 02:01:15,249:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:01:15,257:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:01:15,343:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:15,348:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:16,621:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:01:16,623:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:01:16,691:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:16,698:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:16,700:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 02:01:16,812:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:01:16,879:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:16,885:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:16,995:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:01:17,061:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:17,067:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:17,068:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-08-20 02:01:17,245:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:17,252:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:17,427:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:17,432:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:17,462:INFO:Preparing preprocessing pipeline...
2024-08-20 02:01:17,465:INFO:Set up label encoding.
2024-08-20 02:01:17,465:INFO:Set up simple imputation.
2024-08-20 02:01:17,478:INFO:Set up encoding of ordinal features.
2024-08-20 02:01:17,491:INFO:Set up encoding of categorical features.
2024-08-20 02:01:17,491:INFO:Set up removing multicollinearity.
2024-08-20 02:01:17,491:INFO:Set up column transformation.
2024-08-20 02:01:17,491:INFO:Set up feature normalization.
2024-08-20 02:01:17,491:INFO:Set up feature selection.
2024-08-20 02:01:17,668:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:17,674:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:17,678:INFO:Set up column name cleaning.
2024-08-20 02:01:21,200:INFO:Finished creating preprocessing pipeline.
2024-08-20 02:01:21,319:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=4,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-08-20 02:01:21,319:INFO:Creating final display dataframe.
2024-08-20 02:01:23,036:INFO:Setup _display_container:                     Description                    Value
0                    Session id                      123
1                        Target                    class
2                   Target type                   Binary
3                Target mapping  edible: 0, poisonous: 1
4           Original data shape               (8124, 23)
5        Transformed data shape                (8124, 5)
6   Transformed train set shape                (5686, 5)
7    Transformed test set shape                (2438, 5)
8          Categorical features                       22
9      Rows with missing values                     2.4%
10                   Preprocess                     True
11              Imputation type                   simple
12           Numeric imputation                     mean
13       Categorical imputation                     mode
14     Maximum one-hot encoding                       25
15              Encoding method                     None
16     Remove multicollinearity                     True
17  Multicollinearity threshold                      0.9
18               Transformation                     True
19        Transformation method              yeo-johnson
20                    Normalize                     True
21             Normalize method                   zscore
22            Feature selection                     True
23     Feature selection method                  classic
24  Feature selection estimator                 lightgbm
25  Number of features selected                      0.2
26               Fold Generator          StratifiedKFold
27                  Fold Number                       10
28                     CPU Jobs                       -1
29                      Use GPU                    False
30               Log Experiment                    False
31              Experiment Name         clf-default-name
32                          USI                     0696
2024-08-20 02:01:23,261:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:23,269:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:23,458:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:01:23,466:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:01:23,469:INFO:setup() successfully completed in 19.23s...............
2024-08-20 02:01:23,469:INFO:Initializing compare_models()
2024-08-20 02:01:23,470:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002337E91D410>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002337E91D410>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-08-20 02:01:23,470:INFO:Checking exceptions
2024-08-20 02:01:23,477:INFO:Preparing display monitor
2024-08-20 02:01:23,514:INFO:Initializing Logistic Regression
2024-08-20 02:01:23,514:INFO:Total runtime is 0.0 minutes
2024-08-20 02:01:23,520:INFO:SubProcess create_model() called ==================================
2024-08-20 02:01:23,521:INFO:Initializing create_model()
2024-08-20 02:01:23,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002337E91D410>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000233037A9890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:01:23,521:INFO:Checking exceptions
2024-08-20 02:01:23,522:INFO:Importing libraries
2024-08-20 02:01:23,522:INFO:Copying training dataset
2024-08-20 02:01:23,535:INFO:Defining folds
2024-08-20 02:01:23,535:INFO:Declaring metric variables
2024-08-20 02:01:23,542:INFO:Importing untrained model
2024-08-20 02:01:23,548:INFO:Logistic Regression Imported successfully
2024-08-20 02:01:23,559:INFO:Starting cross validation
2024-08-20 02:01:23,583:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:01:39,186:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,200:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,209:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,467:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,478:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,484:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,488:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,495:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,505:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,524:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,536:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,547:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,553:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,557:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,565:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,569:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,575:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,581:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,588:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,599:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,605:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,610:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,616:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,630:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,864:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,874:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:39,884:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:40,085:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:40,093:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:40,101:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:40,120:INFO:Calculating mean and std
2024-08-20 02:01:40,124:INFO:Creating metrics dataframe
2024-08-20 02:01:40,129:INFO:Uploading results into container
2024-08-20 02:01:40,130:INFO:Uploading model into container now
2024-08-20 02:01:40,131:INFO:_master_model_container: 1
2024-08-20 02:01:40,131:INFO:_display_container: 2
2024-08-20 02:01:40,132:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-08-20 02:01:40,132:INFO:create_model() successfully completed......................................
2024-08-20 02:01:40,346:INFO:SubProcess create_model() end ==================================
2024-08-20 02:01:40,346:INFO:Creating metrics dataframe
2024-08-20 02:01:40,374:INFO:Initializing K Neighbors Classifier
2024-08-20 02:01:40,374:INFO:Total runtime is 0.2810010393460592 minutes
2024-08-20 02:01:40,382:INFO:SubProcess create_model() called ==================================
2024-08-20 02:01:40,383:INFO:Initializing create_model()
2024-08-20 02:01:40,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002337E91D410>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000233037A9890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:01:40,383:INFO:Checking exceptions
2024-08-20 02:01:40,383:INFO:Importing libraries
2024-08-20 02:01:40,383:INFO:Copying training dataset
2024-08-20 02:01:40,399:INFO:Defining folds
2024-08-20 02:01:40,399:INFO:Declaring metric variables
2024-08-20 02:01:40,407:INFO:Importing untrained model
2024-08-20 02:01:40,415:INFO:K Neighbors Classifier Imported successfully
2024-08-20 02:01:40,428:INFO:Starting cross validation
2024-08-20 02:01:40,448:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:01:48,893:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:48,906:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:48,948:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:48,989:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:48,998:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,008:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,770:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,783:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,801:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,967:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,981:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:49,995:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,175:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,185:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,194:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,497:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,505:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,514:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,571:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,580:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,587:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,619:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,629:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,663:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,856:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,869:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,885:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,903:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,912:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:01:58,922:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:02:51,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:02:51,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:02:51,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:02:51,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:02:56,073:INFO:PyCaret ClassificationExperiment
2024-08-20 02:02:56,073:INFO:Logging name: clf-default-name
2024-08-20 02:02:56,073:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:02:56,073:INFO:version 3.3.2
2024-08-20 02:02:56,074:INFO:Initializing setup()
2024-08-20 02:02:56,074:INFO:self.USI: 8af6
2024-08-20 02:02:56,074:INFO:self._variable_keys: {'idx', 'X_train', '_available_plots', 'y', 'pipeline', 'exp_id', '_ml_usecase', 'fix_imbalance', 'X', 'y_train', 'X_test', 'seed', 'gpu_n_jobs_param', 'n_jobs_param', 'log_plots_param', 'target_param', 'fold_shuffle_param', 'gpu_param', 'y_test', 'is_multiclass', 'fold_generator', 'exp_name_log', 'html_param', 'memory', 'fold_groups_param', 'data', 'logging_param', 'USI'}
2024-08-20 02:02:56,074:INFO:Checking environment
2024-08-20 02:02:56,074:INFO:python_version: 3.11.7
2024-08-20 02:02:56,074:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:02:56,074:INFO:machine: AMD64
2024-08-20 02:02:56,074:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:02:56,074:INFO:Memory: svmem(total=16890978304, available=4792147968, percent=71.6, used=12098830336, free=4792147968)
2024-08-20 02:02:56,074:INFO:Physical Core: 12
2024-08-20 02:02:56,074:INFO:Logical Core: 16
2024-08-20 02:02:56,075:INFO:Checking libraries
2024-08-20 02:02:56,075:INFO:System:
2024-08-20 02:02:56,075:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:02:56,075:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:02:56,075:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:02:56,075:INFO:PyCaret required dependencies:
2024-08-20 02:02:57,511:INFO:                 pip: 23.3.1
2024-08-20 02:02:57,511:INFO:          setuptools: 68.2.2
2024-08-20 02:02:57,511:INFO:             pycaret: 3.3.2
2024-08-20 02:02:57,511:INFO:             IPython: 8.20.0
2024-08-20 02:02:57,512:INFO:          ipywidgets: 7.6.5
2024-08-20 02:02:57,512:INFO:                tqdm: 4.65.0
2024-08-20 02:02:57,512:INFO:               numpy: 1.26.4
2024-08-20 02:02:57,512:INFO:              pandas: 2.1.4
2024-08-20 02:02:57,512:INFO:              jinja2: 3.1.3
2024-08-20 02:02:57,512:INFO:               scipy: 1.11.4
2024-08-20 02:02:57,512:INFO:              joblib: 1.2.0
2024-08-20 02:02:57,512:INFO:             sklearn: 1.2.2
2024-08-20 02:02:57,512:INFO:                pyod: 2.0.1
2024-08-20 02:02:57,513:INFO:            imblearn: 0.11.0
2024-08-20 02:02:57,513:INFO:   category_encoders: 2.6.3
2024-08-20 02:02:57,513:INFO:            lightgbm: 4.4.0
2024-08-20 02:02:57,513:INFO:               numba: 0.59.0
2024-08-20 02:02:57,513:INFO:            requests: 2.31.0
2024-08-20 02:02:57,513:INFO:          matplotlib: 3.8.0
2024-08-20 02:02:57,513:INFO:          scikitplot: 0.3.7
2024-08-20 02:02:57,513:INFO:         yellowbrick: 1.5
2024-08-20 02:02:57,513:INFO:              plotly: 5.9.0
2024-08-20 02:02:57,513:INFO:    plotly-resampler: Not installed
2024-08-20 02:02:57,513:INFO:             kaleido: 0.2.1
2024-08-20 02:02:57,514:INFO:           schemdraw: 0.15
2024-08-20 02:02:57,514:INFO:         statsmodels: 0.14.0
2024-08-20 02:02:57,514:INFO:              sktime: 0.26.0
2024-08-20 02:02:57,514:INFO:               tbats: 1.1.3
2024-08-20 02:02:57,514:INFO:            pmdarima: 2.0.4
2024-08-20 02:02:57,514:INFO:              psutil: 5.9.0
2024-08-20 02:02:57,514:INFO:          markupsafe: 2.1.3
2024-08-20 02:02:57,514:INFO:             pickle5: Not installed
2024-08-20 02:02:57,514:INFO:         cloudpickle: 2.2.1
2024-08-20 02:02:57,514:INFO:         deprecation: 2.1.0
2024-08-20 02:02:57,514:INFO:              xxhash: 3.4.1
2024-08-20 02:02:57,515:INFO:           wurlitzer: Not installed
2024-08-20 02:02:57,515:INFO:PyCaret optional dependencies:
2024-08-20 02:03:02,688:INFO:                shap: 0.44.1
2024-08-20 02:03:02,688:INFO:           interpret: 0.6.2
2024-08-20 02:03:02,689:INFO:                umap: 0.5.6
2024-08-20 02:03:02,689:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:03:02,689:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:03:02,689:INFO:             autoviz: Not installed
2024-08-20 02:03:02,689:INFO:           fairlearn: 0.7.0
2024-08-20 02:03:02,689:INFO:          deepchecks: Not installed
2024-08-20 02:03:02,690:INFO:             xgboost: 2.1.0
2024-08-20 02:03:02,690:INFO:            catboost: 1.2.5
2024-08-20 02:03:02,690:INFO:              kmodes: 0.12.2
2024-08-20 02:03:02,690:INFO:             mlxtend: 0.23.1
2024-08-20 02:03:02,690:INFO:       statsforecast: 1.5.0
2024-08-20 02:03:02,690:INFO:        tune_sklearn: Not installed
2024-08-20 02:03:02,690:INFO:                 ray: Not installed
2024-08-20 02:03:02,690:INFO:            hyperopt: 0.2.7
2024-08-20 02:03:02,690:INFO:              optuna: 3.6.1
2024-08-20 02:03:02,690:INFO:               skopt: 0.10.2
2024-08-20 02:03:02,690:INFO:              mlflow: 2.14.2
2024-08-20 02:03:02,690:INFO:              gradio: 4.37.2
2024-08-20 02:03:02,691:INFO:             fastapi: 0.111.0
2024-08-20 02:03:02,691:INFO:             uvicorn: 0.30.1
2024-08-20 02:03:02,691:INFO:              m2cgen: 0.10.0
2024-08-20 02:03:02,691:INFO:           evidently: 0.4.30
2024-08-20 02:03:02,691:INFO:               fugue: 0.8.7
2024-08-20 02:03:02,691:INFO:           streamlit: 1.30.0
2024-08-20 02:03:02,691:INFO:             prophet: Not installed
2024-08-20 02:03:02,691:INFO:None
2024-08-20 02:03:02,691:INFO:Set up data.
2024-08-20 02:03:02,745:INFO:Set up folding strategy.
2024-08-20 02:03:02,745:INFO:Set up train/test split.
2024-08-20 02:03:02,769:INFO:Set up index.
2024-08-20 02:03:02,770:INFO:Assigning column types.
2024-08-20 02:03:02,776:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 02:03:02,885:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:03:02,891:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:03:02,976:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:02,982:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:03,140:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:03:03,142:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:03:03,211:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:03,218:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:03,218:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 02:03:03,328:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:03:03,395:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:03,400:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:03,511:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:03:03,576:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:03,582:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:03,583:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-08-20 02:03:03,763:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:03,770:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:03,948:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:03,955:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:03,958:INFO:Preparing preprocessing pipeline...
2024-08-20 02:03:03,959:INFO:Set up label encoding.
2024-08-20 02:03:03,959:INFO:Set up simple imputation.
2024-08-20 02:03:03,974:INFO:Set up encoding of ordinal features.
2024-08-20 02:03:03,985:INFO:Set up encoding of categorical features.
2024-08-20 02:03:03,985:INFO:Set up removing multicollinearity.
2024-08-20 02:03:03,985:INFO:Set up column transformation.
2024-08-20 02:03:03,986:INFO:Set up feature normalization.
2024-08-20 02:03:03,986:INFO:Set up feature selection.
2024-08-20 02:03:04,164:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:04,171:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:04,352:INFO:Set up column name cleaning.
2024-08-20 02:03:05,195:INFO:Finished creating preprocessing pipeline.
2024-08-20 02:03:05,325:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=4,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-08-20 02:03:05,326:INFO:Creating final display dataframe.
2024-08-20 02:03:07,018:INFO:Setup _display_container:                     Description                    Value
0                    Session id                      123
1                        Target                    class
2                   Target type                   Binary
3                Target mapping  edible: 0, poisonous: 1
4           Original data shape               (8124, 23)
5        Transformed data shape                (8124, 5)
6   Transformed train set shape                (5686, 5)
7    Transformed test set shape                (2438, 5)
8          Categorical features                       22
9      Rows with missing values                     2.4%
10                   Preprocess                     True
11              Imputation type                   simple
12           Numeric imputation                     mean
13       Categorical imputation                     mode
14     Maximum one-hot encoding                       25
15              Encoding method                     None
16     Remove multicollinearity                     True
17  Multicollinearity threshold                      0.9
18               Transformation                     True
19        Transformation method              yeo-johnson
20                    Normalize                     True
21             Normalize method                   zscore
22            Feature selection                     True
23     Feature selection method                  classic
24  Feature selection estimator                 lightgbm
25  Number of features selected                      0.2
26               Fold Generator          StratifiedKFold
27                  Fold Number                       10
28                     CPU Jobs                       -1
29                      Use GPU                    False
30               Log Experiment                    False
31              Experiment Name         clf-default-name
32                          USI                     8af6
2024-08-20 02:03:07,220:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:07,226:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:07,405:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:03:07,410:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:03:07,413:INFO:setup() successfully completed in 11.4s...............
2024-08-20 02:03:07,413:INFO:Initializing compare_models()
2024-08-20 02:03:07,413:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-08-20 02:03:07,413:INFO:Checking exceptions
2024-08-20 02:03:07,420:INFO:Preparing display monitor
2024-08-20 02:03:07,454:INFO:Initializing Logistic Regression
2024-08-20 02:03:07,454:INFO:Total runtime is 0.0 minutes
2024-08-20 02:03:07,459:INFO:SubProcess create_model() called ==================================
2024-08-20 02:03:07,459:INFO:Initializing create_model()
2024-08-20 02:03:07,459:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:03:07,459:INFO:Checking exceptions
2024-08-20 02:03:07,461:INFO:Importing libraries
2024-08-20 02:03:07,461:INFO:Copying training dataset
2024-08-20 02:03:07,472:INFO:Defining folds
2024-08-20 02:03:07,472:INFO:Declaring metric variables
2024-08-20 02:03:07,478:INFO:Importing untrained model
2024-08-20 02:03:07,487:INFO:Logistic Regression Imported successfully
2024-08-20 02:03:07,501:INFO:Starting cross validation
2024-08-20 02:03:07,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:03:26,442:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,453:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,463:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,878:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,893:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,908:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,908:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,924:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,943:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,943:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,963:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:26,982:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,003:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,023:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,040:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,047:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,066:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,077:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,082:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,098:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,098:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,117:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,120:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,138:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,554:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,570:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,582:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,791:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,805:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,819:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:27,834:INFO:Calculating mean and std
2024-08-20 02:03:27,835:INFO:Creating metrics dataframe
2024-08-20 02:03:27,841:INFO:Uploading results into container
2024-08-20 02:03:27,843:INFO:Uploading model into container now
2024-08-20 02:03:27,844:INFO:_master_model_container: 1
2024-08-20 02:03:27,844:INFO:_display_container: 2
2024-08-20 02:03:27,845:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-08-20 02:03:27,846:INFO:create_model() successfully completed......................................
2024-08-20 02:03:28,065:INFO:SubProcess create_model() end ==================================
2024-08-20 02:03:28,066:INFO:Creating metrics dataframe
2024-08-20 02:03:28,079:INFO:Initializing K Neighbors Classifier
2024-08-20 02:03:28,079:INFO:Total runtime is 0.3437503139177958 minutes
2024-08-20 02:03:28,086:INFO:SubProcess create_model() called ==================================
2024-08-20 02:03:28,087:INFO:Initializing create_model()
2024-08-20 02:03:28,087:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:03:28,087:INFO:Checking exceptions
2024-08-20 02:03:28,088:INFO:Importing libraries
2024-08-20 02:03:28,088:INFO:Copying training dataset
2024-08-20 02:03:28,103:INFO:Defining folds
2024-08-20 02:03:28,103:INFO:Declaring metric variables
2024-08-20 02:03:28,111:INFO:Importing untrained model
2024-08-20 02:03:28,118:INFO:K Neighbors Classifier Imported successfully
2024-08-20 02:03:28,134:INFO:Starting cross validation
2024-08-20 02:03:28,159:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:03:37,050:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,062:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,090:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,202:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,262:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,279:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,300:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,361:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,378:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,391:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:37,405:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:45,525:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:45,538:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:45,551:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,018:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,027:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,038:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,091:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,100:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,109:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,266:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,279:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,292:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,315:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,330:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,358:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,498:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,510:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,518:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:46,533:INFO:Calculating mean and std
2024-08-20 02:03:46,535:INFO:Creating metrics dataframe
2024-08-20 02:03:46,539:INFO:Uploading results into container
2024-08-20 02:03:46,540:INFO:Uploading model into container now
2024-08-20 02:03:46,541:INFO:_master_model_container: 2
2024-08-20 02:03:46,541:INFO:_display_container: 2
2024-08-20 02:03:46,542:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 02:03:46,542:INFO:create_model() successfully completed......................................
2024-08-20 02:03:46,742:INFO:SubProcess create_model() end ==================================
2024-08-20 02:03:46,742:INFO:Creating metrics dataframe
2024-08-20 02:03:46,766:INFO:Initializing Naive Bayes
2024-08-20 02:03:46,766:INFO:Total runtime is 0.6552025477091472 minutes
2024-08-20 02:03:46,773:INFO:SubProcess create_model() called ==================================
2024-08-20 02:03:46,773:INFO:Initializing create_model()
2024-08-20 02:03:46,773:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:03:46,773:INFO:Checking exceptions
2024-08-20 02:03:46,774:INFO:Importing libraries
2024-08-20 02:03:46,774:INFO:Copying training dataset
2024-08-20 02:03:46,790:INFO:Defining folds
2024-08-20 02:03:46,791:INFO:Declaring metric variables
2024-08-20 02:03:46,798:INFO:Importing untrained model
2024-08-20 02:03:46,806:INFO:Naive Bayes Imported successfully
2024-08-20 02:03:46,820:INFO:Starting cross validation
2024-08-20 02:03:46,843:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:03:54,032:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,042:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,053:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,474:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,490:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,493:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,505:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,508:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,523:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,530:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,546:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,548:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,562:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,563:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,577:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,584:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,599:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,616:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,660:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,674:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,686:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,700:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,714:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,727:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,930:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,944:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,950:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,957:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,963:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,976:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:03:54,996:INFO:Calculating mean and std
2024-08-20 02:03:54,997:INFO:Creating metrics dataframe
2024-08-20 02:03:55,000:INFO:Uploading results into container
2024-08-20 02:03:55,001:INFO:Uploading model into container now
2024-08-20 02:03:55,002:INFO:_master_model_container: 3
2024-08-20 02:03:55,002:INFO:_display_container: 2
2024-08-20 02:03:55,003:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-08-20 02:03:55,003:INFO:create_model() successfully completed......................................
2024-08-20 02:03:55,186:INFO:SubProcess create_model() end ==================================
2024-08-20 02:03:55,186:INFO:Creating metrics dataframe
2024-08-20 02:03:55,202:INFO:Initializing Decision Tree Classifier
2024-08-20 02:03:55,202:INFO:Total runtime is 0.7957890709241232 minutes
2024-08-20 02:03:55,208:INFO:SubProcess create_model() called ==================================
2024-08-20 02:03:55,209:INFO:Initializing create_model()
2024-08-20 02:03:55,209:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:03:55,209:INFO:Checking exceptions
2024-08-20 02:03:55,209:INFO:Importing libraries
2024-08-20 02:03:55,209:INFO:Copying training dataset
2024-08-20 02:03:55,225:INFO:Defining folds
2024-08-20 02:03:55,225:INFO:Declaring metric variables
2024-08-20 02:03:55,232:INFO:Importing untrained model
2024-08-20 02:03:55,240:INFO:Decision Tree Classifier Imported successfully
2024-08-20 02:03:55,255:INFO:Starting cross validation
2024-08-20 02:03:55,280:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:02,760:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,762:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,775:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,776:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,786:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,791:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,794:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,801:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,816:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,827:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,844:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,862:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,875:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,886:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,889:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,900:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,904:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,915:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,926:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,940:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,953:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:02,991:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,002:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,013:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,070:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,079:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,090:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,180:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,189:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,199:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:03,220:INFO:Calculating mean and std
2024-08-20 02:04:03,222:INFO:Creating metrics dataframe
2024-08-20 02:04:03,227:INFO:Uploading results into container
2024-08-20 02:04:03,228:INFO:Uploading model into container now
2024-08-20 02:04:03,228:INFO:_master_model_container: 4
2024-08-20 02:04:03,228:INFO:_display_container: 2
2024-08-20 02:04:03,230:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 02:04:03,230:INFO:create_model() successfully completed......................................
2024-08-20 02:04:03,434:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:03,434:INFO:Creating metrics dataframe
2024-08-20 02:04:03,451:INFO:Initializing SVM - Linear Kernel
2024-08-20 02:04:03,452:INFO:Total runtime is 0.9332952062288921 minutes
2024-08-20 02:04:03,459:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:03,459:INFO:Initializing create_model()
2024-08-20 02:04:03,459:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:03,459:INFO:Checking exceptions
2024-08-20 02:04:03,459:INFO:Importing libraries
2024-08-20 02:04:03,459:INFO:Copying training dataset
2024-08-20 02:04:03,472:INFO:Defining folds
2024-08-20 02:04:03,472:INFO:Declaring metric variables
2024-08-20 02:04:03,478:INFO:Importing untrained model
2024-08-20 02:04:03,486:INFO:SVM - Linear Kernel Imported successfully
2024-08-20 02:04:03,501:INFO:Starting cross validation
2024-08-20 02:04:03,520:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:10,141:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,152:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,163:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,587:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,602:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,607:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,618:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,623:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,638:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,655:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,671:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,681:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,688:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,698:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,709:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,714:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,721:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,735:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,760:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,772:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,785:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,828:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,836:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,846:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:10,998:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:11,006:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:11,016:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:11,019:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:11,032:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:11,044:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:11,057:INFO:Calculating mean and std
2024-08-20 02:04:11,058:INFO:Creating metrics dataframe
2024-08-20 02:04:11,062:INFO:Uploading results into container
2024-08-20 02:04:11,063:INFO:Uploading model into container now
2024-08-20 02:04:11,063:INFO:_master_model_container: 5
2024-08-20 02:04:11,063:INFO:_display_container: 2
2024-08-20 02:04:11,064:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-08-20 02:04:11,064:INFO:create_model() successfully completed......................................
2024-08-20 02:04:11,257:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:11,257:INFO:Creating metrics dataframe
2024-08-20 02:04:11,274:INFO:Initializing Ridge Classifier
2024-08-20 02:04:11,275:INFO:Total runtime is 1.0636717041333517 minutes
2024-08-20 02:04:11,280:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:11,280:INFO:Initializing create_model()
2024-08-20 02:04:11,280:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:11,280:INFO:Checking exceptions
2024-08-20 02:04:11,280:INFO:Importing libraries
2024-08-20 02:04:11,280:INFO:Copying training dataset
2024-08-20 02:04:11,292:INFO:Defining folds
2024-08-20 02:04:11,292:INFO:Declaring metric variables
2024-08-20 02:04:11,299:INFO:Importing untrained model
2024-08-20 02:04:11,307:INFO:Ridge Classifier Imported successfully
2024-08-20 02:04:11,321:INFO:Starting cross validation
2024-08-20 02:04:11,346:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:18,148:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,160:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,170:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,410:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,423:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,436:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,465:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,480:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,493:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,494:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,507:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,519:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,554:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,567:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,582:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,606:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,618:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,629:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,635:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,647:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,660:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,664:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,675:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,688:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,808:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,817:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,825:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,873:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,886:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,899:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:18,917:INFO:Calculating mean and std
2024-08-20 02:04:18,918:INFO:Creating metrics dataframe
2024-08-20 02:04:18,922:INFO:Uploading results into container
2024-08-20 02:04:18,923:INFO:Uploading model into container now
2024-08-20 02:04:18,924:INFO:_master_model_container: 6
2024-08-20 02:04:18,924:INFO:_display_container: 2
2024-08-20 02:04:18,925:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-08-20 02:04:18,925:INFO:create_model() successfully completed......................................
2024-08-20 02:04:19,126:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:19,126:INFO:Creating metrics dataframe
2024-08-20 02:04:19,141:INFO:Initializing Random Forest Classifier
2024-08-20 02:04:19,141:INFO:Total runtime is 1.194773809115092 minutes
2024-08-20 02:04:19,146:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:19,147:INFO:Initializing create_model()
2024-08-20 02:04:19,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:19,147:INFO:Checking exceptions
2024-08-20 02:04:19,147:INFO:Importing libraries
2024-08-20 02:04:19,147:INFO:Copying training dataset
2024-08-20 02:04:19,160:INFO:Defining folds
2024-08-20 02:04:19,160:INFO:Declaring metric variables
2024-08-20 02:04:19,166:INFO:Importing untrained model
2024-08-20 02:04:19,171:INFO:Random Forest Classifier Imported successfully
2024-08-20 02:04:19,182:INFO:Starting cross validation
2024-08-20 02:04:19,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:27,573:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:27,612:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:27,631:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,315:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,330:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,334:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,352:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,365:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,367:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,386:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,405:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,462:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,480:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,498:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,560:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,579:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,595:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,620:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,633:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,633:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,646:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,646:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,658:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,739:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,753:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:28,765:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:29,191:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:29,201:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:29,210:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:29,225:INFO:Calculating mean and std
2024-08-20 02:04:29,227:INFO:Creating metrics dataframe
2024-08-20 02:04:29,230:INFO:Uploading results into container
2024-08-20 02:04:29,230:INFO:Uploading model into container now
2024-08-20 02:04:29,231:INFO:_master_model_container: 7
2024-08-20 02:04:29,231:INFO:_display_container: 2
2024-08-20 02:04:29,232:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-08-20 02:04:29,232:INFO:create_model() successfully completed......................................
2024-08-20 02:04:29,409:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:29,410:INFO:Creating metrics dataframe
2024-08-20 02:04:29,425:INFO:Initializing Quadratic Discriminant Analysis
2024-08-20 02:04:29,425:INFO:Total runtime is 1.3661845564842223 minutes
2024-08-20 02:04:29,433:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:29,434:INFO:Initializing create_model()
2024-08-20 02:04:29,434:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:29,434:INFO:Checking exceptions
2024-08-20 02:04:29,434:INFO:Importing libraries
2024-08-20 02:04:29,434:INFO:Copying training dataset
2024-08-20 02:04:29,450:INFO:Defining folds
2024-08-20 02:04:29,450:INFO:Declaring metric variables
2024-08-20 02:04:29,458:INFO:Importing untrained model
2024-08-20 02:04:29,468:INFO:Quadratic Discriminant Analysis Imported successfully
2024-08-20 02:04:29,484:INFO:Starting cross validation
2024-08-20 02:04:29,506:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:36,092:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,103:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,113:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,280:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:04:36,280:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:04:36,420:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,435:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,436:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,450:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,451:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,460:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,463:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,475:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,490:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,515:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,516:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,528:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,531:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,542:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,544:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,593:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,605:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,616:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,708:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:04:36,837:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,845:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,857:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,871:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,876:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,881:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,890:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,894:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,900:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:36,917:INFO:Calculating mean and std
2024-08-20 02:04:36,920:INFO:Creating metrics dataframe
2024-08-20 02:04:36,926:INFO:Uploading results into container
2024-08-20 02:04:36,927:INFO:Uploading model into container now
2024-08-20 02:04:36,928:INFO:_master_model_container: 8
2024-08-20 02:04:36,928:INFO:_display_container: 2
2024-08-20 02:04:36,928:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-08-20 02:04:36,928:INFO:create_model() successfully completed......................................
2024-08-20 02:04:37,128:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:37,130:INFO:Creating metrics dataframe
2024-08-20 02:04:37,150:INFO:Initializing Ada Boost Classifier
2024-08-20 02:04:37,150:INFO:Total runtime is 1.4949230790138244 minutes
2024-08-20 02:04:37,155:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:37,155:INFO:Initializing create_model()
2024-08-20 02:04:37,155:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:37,155:INFO:Checking exceptions
2024-08-20 02:04:37,155:INFO:Importing libraries
2024-08-20 02:04:37,155:INFO:Copying training dataset
2024-08-20 02:04:37,170:INFO:Defining folds
2024-08-20 02:04:37,170:INFO:Declaring metric variables
2024-08-20 02:04:37,175:INFO:Importing untrained model
2024-08-20 02:04:37,181:INFO:Ada Boost Classifier Imported successfully
2024-08-20 02:04:37,191:INFO:Starting cross validation
2024-08-20 02:04:37,208:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:45,199:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,553:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,568:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,581:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,599:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,622:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:45,633:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:45,637:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,642:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:45,665:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,697:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:45,994:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:46,000:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,013:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,014:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,024:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,024:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,025:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,037:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,040:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,043:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,048:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,054:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,065:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,090:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,101:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:04:46,102:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,112:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,133:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,145:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,158:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,167:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,180:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,190:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,515:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,527:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,541:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,616:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,627:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,638:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:46,663:INFO:Calculating mean and std
2024-08-20 02:04:46,665:INFO:Creating metrics dataframe
2024-08-20 02:04:46,670:INFO:Uploading results into container
2024-08-20 02:04:46,672:INFO:Uploading model into container now
2024-08-20 02:04:46,673:INFO:_master_model_container: 9
2024-08-20 02:04:46,673:INFO:_display_container: 2
2024-08-20 02:04:46,674:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-08-20 02:04:46,674:INFO:create_model() successfully completed......................................
2024-08-20 02:04:46,864:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:46,864:INFO:Creating metrics dataframe
2024-08-20 02:04:46,883:INFO:Initializing Gradient Boosting Classifier
2024-08-20 02:04:46,883:INFO:Total runtime is 1.6571456432342528 minutes
2024-08-20 02:04:46,891:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:46,892:INFO:Initializing create_model()
2024-08-20 02:04:46,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:46,892:INFO:Checking exceptions
2024-08-20 02:04:46,893:INFO:Importing libraries
2024-08-20 02:04:46,893:INFO:Copying training dataset
2024-08-20 02:04:46,910:INFO:Defining folds
2024-08-20 02:04:46,910:INFO:Declaring metric variables
2024-08-20 02:04:46,920:INFO:Importing untrained model
2024-08-20 02:04:46,928:INFO:Gradient Boosting Classifier Imported successfully
2024-08-20 02:04:46,943:INFO:Starting cross validation
2024-08-20 02:04:46,966:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:04:54,382:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,393:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,405:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,781:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,800:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,818:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,881:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,885:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,898:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,902:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,912:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,917:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,921:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,936:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,950:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,950:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,963:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,964:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,978:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,979:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:54,992:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,010:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,023:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,036:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,458:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,476:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,490:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,828:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,836:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,843:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:04:55,857:INFO:Calculating mean and std
2024-08-20 02:04:55,858:INFO:Creating metrics dataframe
2024-08-20 02:04:55,861:INFO:Uploading results into container
2024-08-20 02:04:55,862:INFO:Uploading model into container now
2024-08-20 02:04:55,863:INFO:_master_model_container: 10
2024-08-20 02:04:55,863:INFO:_display_container: 2
2024-08-20 02:04:55,863:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-08-20 02:04:55,865:INFO:create_model() successfully completed......................................
2024-08-20 02:04:56,054:INFO:SubProcess create_model() end ==================================
2024-08-20 02:04:56,054:INFO:Creating metrics dataframe
2024-08-20 02:04:56,070:INFO:Initializing Linear Discriminant Analysis
2024-08-20 02:04:56,070:INFO:Total runtime is 1.8102646271387735 minutes
2024-08-20 02:04:56,078:INFO:SubProcess create_model() called ==================================
2024-08-20 02:04:56,078:INFO:Initializing create_model()
2024-08-20 02:04:56,078:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:04:56,078:INFO:Checking exceptions
2024-08-20 02:04:56,078:INFO:Importing libraries
2024-08-20 02:04:56,078:INFO:Copying training dataset
2024-08-20 02:04:56,095:INFO:Defining folds
2024-08-20 02:04:56,096:INFO:Declaring metric variables
2024-08-20 02:04:56,103:INFO:Importing untrained model
2024-08-20 02:04:56,110:INFO:Linear Discriminant Analysis Imported successfully
2024-08-20 02:04:56,125:INFO:Starting cross validation
2024-08-20 02:04:56,146:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:05:02,499:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,512:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,523:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,892:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,901:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,906:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,912:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,912:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,918:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,924:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,924:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,935:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,952:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,962:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,964:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,974:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,975:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,985:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,986:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,990:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:02,996:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,001:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,007:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,011:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,014:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,024:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,035:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,147:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,160:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,171:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:03,197:INFO:Calculating mean and std
2024-08-20 02:05:03,199:INFO:Creating metrics dataframe
2024-08-20 02:05:03,204:INFO:Uploading results into container
2024-08-20 02:05:03,205:INFO:Uploading model into container now
2024-08-20 02:05:03,206:INFO:_master_model_container: 11
2024-08-20 02:05:03,206:INFO:_display_container: 2
2024-08-20 02:05:03,206:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-08-20 02:05:03,206:INFO:create_model() successfully completed......................................
2024-08-20 02:05:03,404:INFO:SubProcess create_model() end ==================================
2024-08-20 02:05:03,405:INFO:Creating metrics dataframe
2024-08-20 02:05:03,422:INFO:Initializing Extra Trees Classifier
2024-08-20 02:05:03,422:INFO:Total runtime is 1.9327877163887022 minutes
2024-08-20 02:05:03,428:INFO:SubProcess create_model() called ==================================
2024-08-20 02:05:03,429:INFO:Initializing create_model()
2024-08-20 02:05:03,429:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:05:03,429:INFO:Checking exceptions
2024-08-20 02:05:03,429:INFO:Importing libraries
2024-08-20 02:05:03,430:INFO:Copying training dataset
2024-08-20 02:05:03,443:INFO:Defining folds
2024-08-20 02:05:03,444:INFO:Declaring metric variables
2024-08-20 02:05:03,452:INFO:Importing untrained model
2024-08-20 02:05:03,462:INFO:Extra Trees Classifier Imported successfully
2024-08-20 02:05:03,473:INFO:Starting cross validation
2024-08-20 02:05:03,494:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:05:11,404:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,421:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,440:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,782:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,790:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,796:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,805:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,807:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,814:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,818:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,827:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,839:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,866:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,883:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,896:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,980:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:11,992:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,004:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,058:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,070:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,088:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,206:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,219:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,231:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,332:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,342:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,356:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,616:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,629:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,644:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:12,660:INFO:Calculating mean and std
2024-08-20 02:05:12,662:INFO:Creating metrics dataframe
2024-08-20 02:05:12,665:INFO:Uploading results into container
2024-08-20 02:05:12,666:INFO:Uploading model into container now
2024-08-20 02:05:12,667:INFO:_master_model_container: 12
2024-08-20 02:05:12,667:INFO:_display_container: 2
2024-08-20 02:05:12,668:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-08-20 02:05:12,669:INFO:create_model() successfully completed......................................
2024-08-20 02:05:12,852:INFO:SubProcess create_model() end ==================================
2024-08-20 02:05:12,852:INFO:Creating metrics dataframe
2024-08-20 02:05:12,874:INFO:Initializing Extreme Gradient Boosting
2024-08-20 02:05:12,874:INFO:Total runtime is 2.0903228481610614 minutes
2024-08-20 02:05:12,882:INFO:SubProcess create_model() called ==================================
2024-08-20 02:05:12,883:INFO:Initializing create_model()
2024-08-20 02:05:12,883:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:05:12,883:INFO:Checking exceptions
2024-08-20 02:05:12,884:INFO:Importing libraries
2024-08-20 02:05:12,884:INFO:Copying training dataset
2024-08-20 02:05:12,901:INFO:Defining folds
2024-08-20 02:05:12,901:INFO:Declaring metric variables
2024-08-20 02:05:12,909:INFO:Importing untrained model
2024-08-20 02:05:12,918:INFO:Extreme Gradient Boosting Imported successfully
2024-08-20 02:05:12,934:INFO:Starting cross validation
2024-08-20 02:05:12,958:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:05:20,275:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,285:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,295:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,664:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,677:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,692:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,718:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,732:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,737:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,743:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,745:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,750:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,756:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,763:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,770:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,789:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,800:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,812:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,820:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,831:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,844:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,846:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,857:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:20,870:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,134:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,150:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,163:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,184:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,196:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,203:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:21,217:INFO:Calculating mean and std
2024-08-20 02:05:21,219:INFO:Creating metrics dataframe
2024-08-20 02:05:21,222:INFO:Uploading results into container
2024-08-20 02:05:21,223:INFO:Uploading model into container now
2024-08-20 02:05:21,224:INFO:_master_model_container: 13
2024-08-20 02:05:21,224:INFO:_display_container: 2
2024-08-20 02:05:21,225:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-08-20 02:05:21,225:INFO:create_model() successfully completed......................................
2024-08-20 02:05:21,436:INFO:SubProcess create_model() end ==================================
2024-08-20 02:05:21,436:INFO:Creating metrics dataframe
2024-08-20 02:05:21,458:INFO:Initializing Light Gradient Boosting Machine
2024-08-20 02:05:21,458:INFO:Total runtime is 2.2334026813507077 minutes
2024-08-20 02:05:21,464:INFO:SubProcess create_model() called ==================================
2024-08-20 02:05:21,465:INFO:Initializing create_model()
2024-08-20 02:05:21,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:05:21,465:INFO:Checking exceptions
2024-08-20 02:05:21,466:INFO:Importing libraries
2024-08-20 02:05:21,466:INFO:Copying training dataset
2024-08-20 02:05:21,482:INFO:Defining folds
2024-08-20 02:05:21,483:INFO:Declaring metric variables
2024-08-20 02:05:21,490:INFO:Importing untrained model
2024-08-20 02:05:21,498:INFO:Light Gradient Boosting Machine Imported successfully
2024-08-20 02:05:21,519:INFO:Starting cross validation
2024-08-20 02:05:21,547:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:05:29,381:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,391:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,400:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,621:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,631:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,642:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,655:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,666:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,675:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,731:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,742:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,752:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,771:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,781:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,788:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,791:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,798:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,807:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,873:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,882:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,885:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,892:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,895:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,904:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,905:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,914:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,923:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,946:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,954:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,963:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:29,977:INFO:Calculating mean and std
2024-08-20 02:05:29,979:INFO:Creating metrics dataframe
2024-08-20 02:05:29,983:INFO:Uploading results into container
2024-08-20 02:05:29,984:INFO:Uploading model into container now
2024-08-20 02:05:29,985:INFO:_master_model_container: 14
2024-08-20 02:05:29,985:INFO:_display_container: 2
2024-08-20 02:05:29,986:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-08-20 02:05:29,986:INFO:create_model() successfully completed......................................
2024-08-20 02:05:30,156:INFO:SubProcess create_model() end ==================================
2024-08-20 02:05:30,156:INFO:Creating metrics dataframe
2024-08-20 02:05:30,173:INFO:Initializing CatBoost Classifier
2024-08-20 02:05:30,174:INFO:Total runtime is 2.378663575649261 minutes
2024-08-20 02:05:30,179:INFO:SubProcess create_model() called ==================================
2024-08-20 02:05:30,180:INFO:Initializing create_model()
2024-08-20 02:05:30,180:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:05:30,180:INFO:Checking exceptions
2024-08-20 02:05:30,180:INFO:Importing libraries
2024-08-20 02:05:30,180:INFO:Copying training dataset
2024-08-20 02:05:30,192:INFO:Defining folds
2024-08-20 02:05:30,192:INFO:Declaring metric variables
2024-08-20 02:05:30,197:INFO:Importing untrained model
2024-08-20 02:05:30,205:INFO:CatBoost Classifier Imported successfully
2024-08-20 02:05:30,216:INFO:Starting cross validation
2024-08-20 02:05:30,235:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:05:46,857:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:46,885:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:46,904:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,267:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,284:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,301:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,307:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,314:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,318:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,318:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,328:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,334:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,338:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,343:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,346:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,348:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,354:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,382:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,452:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,470:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,482:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,488:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,498:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,516:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,559:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,573:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,591:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,633:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,646:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,662:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:47,679:INFO:Calculating mean and std
2024-08-20 02:05:47,681:INFO:Creating metrics dataframe
2024-08-20 02:05:47,684:INFO:Uploading results into container
2024-08-20 02:05:47,684:INFO:Uploading model into container now
2024-08-20 02:05:47,685:INFO:_master_model_container: 15
2024-08-20 02:05:47,685:INFO:_display_container: 2
2024-08-20 02:05:47,686:INFO:<catboost.core.CatBoostClassifier object at 0x000001D144D103D0>
2024-08-20 02:05:47,686:INFO:create_model() successfully completed......................................
2024-08-20 02:05:47,870:INFO:SubProcess create_model() end ==================================
2024-08-20 02:05:47,871:INFO:Creating metrics dataframe
2024-08-20 02:05:47,900:INFO:Initializing Dummy Classifier
2024-08-20 02:05:47,901:INFO:Total runtime is 2.674104845523834 minutes
2024-08-20 02:05:47,910:INFO:SubProcess create_model() called ==================================
2024-08-20 02:05:47,911:INFO:Initializing create_model()
2024-08-20 02:05:47,911:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D144449F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:05:47,912:INFO:Checking exceptions
2024-08-20 02:05:47,912:INFO:Importing libraries
2024-08-20 02:05:47,912:INFO:Copying training dataset
2024-08-20 02:05:47,925:INFO:Defining folds
2024-08-20 02:05:47,925:INFO:Declaring metric variables
2024-08-20 02:05:47,931:INFO:Importing untrained model
2024-08-20 02:05:47,938:INFO:Dummy Classifier Imported successfully
2024-08-20 02:05:47,953:INFO:Starting cross validation
2024-08-20 02:05:47,978:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:05:57,431:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:57,449:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:57,457:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:57,466:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:57,966:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:57,985:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:57,995:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,004:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,094:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,099:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,112:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,117:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,121:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,126:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,127:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,128:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,128:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,134:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,143:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,144:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,152:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,153:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,160:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,161:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,178:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,195:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,202:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,202:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,211:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,219:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,227:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,236:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,328:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,344:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,354:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,360:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,518:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,530:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,535:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:05:58,543:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:05:58,561:INFO:Calculating mean and std
2024-08-20 02:05:58,564:INFO:Creating metrics dataframe
2024-08-20 02:05:58,568:INFO:Uploading results into container
2024-08-20 02:05:58,569:INFO:Uploading model into container now
2024-08-20 02:05:58,570:INFO:_master_model_container: 16
2024-08-20 02:05:58,571:INFO:_display_container: 2
2024-08-20 02:05:58,571:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-08-20 02:05:58,572:INFO:create_model() successfully completed......................................
2024-08-20 02:05:58,791:INFO:SubProcess create_model() end ==================================
2024-08-20 02:05:58,791:INFO:Creating metrics dataframe
2024-08-20 02:05:58,836:INFO:Initializing create_model()
2024-08-20 02:05:58,837:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:05:58,837:INFO:Checking exceptions
2024-08-20 02:05:58,840:INFO:Importing libraries
2024-08-20 02:05:58,841:INFO:Copying training dataset
2024-08-20 02:05:58,856:INFO:Defining folds
2024-08-20 02:05:58,857:INFO:Declaring metric variables
2024-08-20 02:05:58,857:INFO:Importing untrained model
2024-08-20 02:05:58,857:INFO:Declaring custom model
2024-08-20 02:05:58,859:INFO:Decision Tree Classifier Imported successfully
2024-08-20 02:05:58,885:INFO:Cross validation set to False
2024-08-20 02:05:58,885:INFO:Fitting Model
2024-08-20 02:06:01,096:INFO:[LightGBM] [Info] Number of positive: 2741, number of negative: 2945
2024-08-20 02:06:01,110:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.006766 seconds.
2024-08-20 02:06:01,110:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-08-20 02:06:01,110:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-08-20 02:06:01,111:INFO:[LightGBM] [Info] Total Bins 279
2024-08-20 02:06:01,111:INFO:[LightGBM] [Info] Number of data points in the train set: 5686, number of used features: 93
2024-08-20 02:06:01,113:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.482061 -> initscore=-0.071786
2024-08-20 02:06:01,114:INFO:[LightGBM] [Info] Start training from score -0.071786
2024-08-20 02:06:01,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,297:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,354:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,442:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,454:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,459:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,466:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,477:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,481:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,494:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,514:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,519:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,539:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,545:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,550:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,562:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,574:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,579:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,586:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-08-20 02:06:01,734:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 02:06:01,734:INFO:create_model() successfully completed......................................
2024-08-20 02:06:01,975:INFO:_master_model_container: 16
2024-08-20 02:06:01,976:INFO:_display_container: 2
2024-08-20 02:06:01,976:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 02:06:01,977:INFO:compare_models() successfully completed......................................
2024-08-20 02:10:15,077:INFO:Initializing plot_model()
2024-08-20 02:10:15,078:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 02:10:15,078:INFO:Checking exceptions
2024-08-20 02:10:15,087:INFO:Preloading libraries
2024-08-20 02:10:15,088:INFO:Copying training dataset
2024-08-20 02:10:15,088:INFO:Plot type: auc
2024-08-20 02:10:15,548:INFO:Fitting Model
2024-08-20 02:10:15,549:INFO:Scoring test/hold-out set
2024-08-20 02:10:15,938:INFO:Visual Rendered Successfully
2024-08-20 02:10:16,133:INFO:plot_model() successfully completed......................................
2024-08-20 02:10:16,134:INFO:Initializing evaluate_model()
2024-08-20 02:10:16,134:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 02:10:16,170:INFO:Initializing plot_model()
2024-08-20 02:10:16,170:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 02:10:16,171:INFO:Checking exceptions
2024-08-20 02:10:16,177:INFO:Preloading libraries
2024-08-20 02:10:16,178:INFO:Copying training dataset
2024-08-20 02:10:16,178:INFO:Plot type: pipeline
2024-08-20 02:10:16,752:INFO:Visual Rendered Successfully
2024-08-20 02:10:16,931:INFO:plot_model() successfully completed......................................
2024-08-20 02:10:16,938:INFO:Initializing predict_model()
2024-08-20 02:10:16,938:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D13FA94DD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D144ED02C0>)
2024-08-20 02:10:16,938:INFO:Checking exceptions
2024-08-20 02:10:16,939:INFO:Preloading libraries
2024-08-20 02:10:16,942:INFO:Set up data.
2024-08-20 02:10:16,981:INFO:Set up index.
2024-08-20 02:24:57,500:INFO:PyCaret ClassificationExperiment
2024-08-20 02:24:57,500:INFO:Logging name: clf-default-name
2024-08-20 02:24:57,500:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:24:57,501:INFO:version 3.3.2
2024-08-20 02:24:57,501:INFO:Initializing setup()
2024-08-20 02:24:57,501:INFO:self.USI: a690
2024-08-20 02:24:57,501:INFO:self._variable_keys: {'idx', 'X_train', '_available_plots', 'y', 'pipeline', 'exp_id', '_ml_usecase', 'fix_imbalance', 'X', 'y_train', 'X_test', 'seed', 'gpu_n_jobs_param', 'n_jobs_param', 'log_plots_param', 'target_param', 'fold_shuffle_param', 'gpu_param', 'y_test', 'is_multiclass', 'fold_generator', 'exp_name_log', 'html_param', 'memory', 'fold_groups_param', 'data', 'logging_param', 'USI'}
2024-08-20 02:24:57,501:INFO:Checking environment
2024-08-20 02:24:57,501:INFO:python_version: 3.11.7
2024-08-20 02:24:57,501:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:24:57,501:INFO:machine: AMD64
2024-08-20 02:24:57,501:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:24:57,501:INFO:Memory: svmem(total=16890978304, available=4805459968, percent=71.6, used=12085518336, free=4805459968)
2024-08-20 02:24:57,501:INFO:Physical Core: 12
2024-08-20 02:24:57,502:INFO:Logical Core: 16
2024-08-20 02:24:57,502:INFO:Checking libraries
2024-08-20 02:24:57,502:INFO:System:
2024-08-20 02:24:57,502:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:24:57,502:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:24:57,502:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:24:57,502:INFO:PyCaret required dependencies:
2024-08-20 02:24:57,503:INFO:                 pip: 23.3.1
2024-08-20 02:24:57,503:INFO:          setuptools: 68.2.2
2024-08-20 02:24:57,503:INFO:             pycaret: 3.3.2
2024-08-20 02:24:57,503:INFO:             IPython: 8.20.0
2024-08-20 02:24:57,503:INFO:          ipywidgets: 7.6.5
2024-08-20 02:24:57,503:INFO:                tqdm: 4.65.0
2024-08-20 02:24:57,503:INFO:               numpy: 1.26.4
2024-08-20 02:24:57,503:INFO:              pandas: 2.1.4
2024-08-20 02:24:57,503:INFO:              jinja2: 3.1.3
2024-08-20 02:24:57,503:INFO:               scipy: 1.11.4
2024-08-20 02:24:57,503:INFO:              joblib: 1.2.0
2024-08-20 02:24:57,503:INFO:             sklearn: 1.2.2
2024-08-20 02:24:57,503:INFO:                pyod: 2.0.1
2024-08-20 02:24:57,503:INFO:            imblearn: 0.11.0
2024-08-20 02:24:57,503:INFO:   category_encoders: 2.6.3
2024-08-20 02:24:57,503:INFO:            lightgbm: 4.4.0
2024-08-20 02:24:57,504:INFO:               numba: 0.59.0
2024-08-20 02:24:57,504:INFO:            requests: 2.31.0
2024-08-20 02:24:57,504:INFO:          matplotlib: 3.8.0
2024-08-20 02:24:57,504:INFO:          scikitplot: 0.3.7
2024-08-20 02:24:57,504:INFO:         yellowbrick: 1.5
2024-08-20 02:24:57,504:INFO:              plotly: 5.9.0
2024-08-20 02:24:57,504:INFO:    plotly-resampler: Not installed
2024-08-20 02:24:57,504:INFO:             kaleido: 0.2.1
2024-08-20 02:24:57,504:INFO:           schemdraw: 0.15
2024-08-20 02:24:57,504:INFO:         statsmodels: 0.14.0
2024-08-20 02:24:57,504:INFO:              sktime: 0.26.0
2024-08-20 02:24:57,504:INFO:               tbats: 1.1.3
2024-08-20 02:24:57,504:INFO:            pmdarima: 2.0.4
2024-08-20 02:24:57,505:INFO:              psutil: 5.9.0
2024-08-20 02:24:57,505:INFO:          markupsafe: 2.1.3
2024-08-20 02:24:57,505:INFO:             pickle5: Not installed
2024-08-20 02:24:57,505:INFO:         cloudpickle: 2.2.1
2024-08-20 02:24:57,505:INFO:         deprecation: 2.1.0
2024-08-20 02:24:57,505:INFO:              xxhash: 3.4.1
2024-08-20 02:24:57,505:INFO:           wurlitzer: Not installed
2024-08-20 02:24:57,505:INFO:PyCaret optional dependencies:
2024-08-20 02:24:57,505:INFO:                shap: 0.44.1
2024-08-20 02:24:57,505:INFO:           interpret: 0.6.2
2024-08-20 02:24:57,505:INFO:                umap: 0.5.6
2024-08-20 02:24:57,505:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:24:57,505:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:24:57,505:INFO:             autoviz: Not installed
2024-08-20 02:24:57,506:INFO:           fairlearn: 0.7.0
2024-08-20 02:24:57,506:INFO:          deepchecks: Not installed
2024-08-20 02:24:57,506:INFO:             xgboost: 2.1.0
2024-08-20 02:24:57,506:INFO:            catboost: 1.2.5
2024-08-20 02:24:57,506:INFO:              kmodes: 0.12.2
2024-08-20 02:24:57,506:INFO:             mlxtend: 0.23.1
2024-08-20 02:24:57,506:INFO:       statsforecast: 1.5.0
2024-08-20 02:24:57,506:INFO:        tune_sklearn: Not installed
2024-08-20 02:24:57,506:INFO:                 ray: Not installed
2024-08-20 02:24:57,506:INFO:            hyperopt: 0.2.7
2024-08-20 02:24:57,506:INFO:              optuna: 3.6.1
2024-08-20 02:24:57,506:INFO:               skopt: 0.10.2
2024-08-20 02:24:57,506:INFO:              mlflow: 2.14.2
2024-08-20 02:24:57,506:INFO:              gradio: 4.37.2
2024-08-20 02:24:57,506:INFO:             fastapi: 0.111.0
2024-08-20 02:24:57,506:INFO:             uvicorn: 0.30.1
2024-08-20 02:24:57,507:INFO:              m2cgen: 0.10.0
2024-08-20 02:24:57,507:INFO:           evidently: 0.4.30
2024-08-20 02:24:57,507:INFO:               fugue: 0.8.7
2024-08-20 02:24:57,507:INFO:           streamlit: 1.30.0
2024-08-20 02:24:57,507:INFO:             prophet: Not installed
2024-08-20 02:24:57,507:INFO:None
2024-08-20 02:24:57,507:INFO:Set up data.
2024-08-20 02:24:57,540:INFO:Set up folding strategy.
2024-08-20 02:24:57,540:INFO:Set up train/test split.
2024-08-20 02:24:57,561:INFO:Set up index.
2024-08-20 02:24:57,562:INFO:Assigning column types.
2024-08-20 02:25:21,339:INFO:PyCaret ClassificationExperiment
2024-08-20 02:25:21,340:INFO:Logging name: clf-default-name
2024-08-20 02:25:21,340:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:25:21,340:INFO:version 3.3.2
2024-08-20 02:25:21,340:INFO:Initializing setup()
2024-08-20 02:25:21,340:INFO:self.USI: 2253
2024-08-20 02:25:21,340:INFO:self._variable_keys: {'idx', 'X_train', '_available_plots', 'y', 'pipeline', 'exp_id', '_ml_usecase', 'fix_imbalance', 'X', 'y_train', 'X_test', 'seed', 'gpu_n_jobs_param', 'n_jobs_param', 'log_plots_param', 'target_param', 'fold_shuffle_param', 'gpu_param', 'y_test', 'is_multiclass', 'fold_generator', 'exp_name_log', 'html_param', 'memory', 'fold_groups_param', 'data', 'logging_param', 'USI'}
2024-08-20 02:25:21,340:INFO:Checking environment
2024-08-20 02:25:21,340:INFO:python_version: 3.11.7
2024-08-20 02:25:21,340:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:25:21,340:INFO:machine: AMD64
2024-08-20 02:25:21,340:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:25:21,341:INFO:Memory: svmem(total=16890978304, available=4773429248, percent=71.7, used=12117549056, free=4773429248)
2024-08-20 02:25:21,341:INFO:Physical Core: 12
2024-08-20 02:25:21,341:INFO:Logical Core: 16
2024-08-20 02:25:21,341:INFO:Checking libraries
2024-08-20 02:25:21,341:INFO:System:
2024-08-20 02:25:21,341:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:25:21,341:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:25:21,341:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:25:21,341:INFO:PyCaret required dependencies:
2024-08-20 02:25:21,341:INFO:                 pip: 23.3.1
2024-08-20 02:25:21,341:INFO:          setuptools: 68.2.2
2024-08-20 02:25:21,342:INFO:             pycaret: 3.3.2
2024-08-20 02:25:21,342:INFO:             IPython: 8.20.0
2024-08-20 02:25:21,342:INFO:          ipywidgets: 7.6.5
2024-08-20 02:25:21,342:INFO:                tqdm: 4.65.0
2024-08-20 02:25:21,342:INFO:               numpy: 1.26.4
2024-08-20 02:25:21,342:INFO:              pandas: 2.1.4
2024-08-20 02:25:21,342:INFO:              jinja2: 3.1.3
2024-08-20 02:25:21,342:INFO:               scipy: 1.11.4
2024-08-20 02:25:21,342:INFO:              joblib: 1.2.0
2024-08-20 02:25:21,342:INFO:             sklearn: 1.2.2
2024-08-20 02:25:21,342:INFO:                pyod: 2.0.1
2024-08-20 02:25:21,342:INFO:            imblearn: 0.11.0
2024-08-20 02:25:21,342:INFO:   category_encoders: 2.6.3
2024-08-20 02:25:21,342:INFO:            lightgbm: 4.4.0
2024-08-20 02:25:21,342:INFO:               numba: 0.59.0
2024-08-20 02:25:21,342:INFO:            requests: 2.31.0
2024-08-20 02:25:21,342:INFO:          matplotlib: 3.8.0
2024-08-20 02:25:21,342:INFO:          scikitplot: 0.3.7
2024-08-20 02:25:21,342:INFO:         yellowbrick: 1.5
2024-08-20 02:25:21,342:INFO:              plotly: 5.9.0
2024-08-20 02:25:21,342:INFO:    plotly-resampler: Not installed
2024-08-20 02:25:21,344:INFO:             kaleido: 0.2.1
2024-08-20 02:25:21,344:INFO:           schemdraw: 0.15
2024-08-20 02:25:21,344:INFO:         statsmodels: 0.14.0
2024-08-20 02:25:21,344:INFO:              sktime: 0.26.0
2024-08-20 02:25:21,344:INFO:               tbats: 1.1.3
2024-08-20 02:25:21,344:INFO:            pmdarima: 2.0.4
2024-08-20 02:25:21,344:INFO:              psutil: 5.9.0
2024-08-20 02:25:21,344:INFO:          markupsafe: 2.1.3
2024-08-20 02:25:21,344:INFO:             pickle5: Not installed
2024-08-20 02:25:21,344:INFO:         cloudpickle: 2.2.1
2024-08-20 02:25:21,344:INFO:         deprecation: 2.1.0
2024-08-20 02:25:21,344:INFO:              xxhash: 3.4.1
2024-08-20 02:25:21,344:INFO:           wurlitzer: Not installed
2024-08-20 02:25:21,344:INFO:PyCaret optional dependencies:
2024-08-20 02:25:21,344:INFO:                shap: 0.44.1
2024-08-20 02:25:21,344:INFO:           interpret: 0.6.2
2024-08-20 02:25:21,344:INFO:                umap: 0.5.6
2024-08-20 02:25:21,344:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:25:21,344:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:25:21,344:INFO:             autoviz: Not installed
2024-08-20 02:25:21,344:INFO:           fairlearn: 0.7.0
2024-08-20 02:25:21,344:INFO:          deepchecks: Not installed
2024-08-20 02:25:21,344:INFO:             xgboost: 2.1.0
2024-08-20 02:25:21,344:INFO:            catboost: 1.2.5
2024-08-20 02:25:21,344:INFO:              kmodes: 0.12.2
2024-08-20 02:25:21,344:INFO:             mlxtend: 0.23.1
2024-08-20 02:25:21,345:INFO:       statsforecast: 1.5.0
2024-08-20 02:25:21,345:INFO:        tune_sklearn: Not installed
2024-08-20 02:25:21,345:INFO:                 ray: Not installed
2024-08-20 02:25:21,345:INFO:            hyperopt: 0.2.7
2024-08-20 02:25:21,345:INFO:              optuna: 3.6.1
2024-08-20 02:25:21,345:INFO:               skopt: 0.10.2
2024-08-20 02:25:21,345:INFO:              mlflow: 2.14.2
2024-08-20 02:25:21,345:INFO:              gradio: 4.37.2
2024-08-20 02:25:21,345:INFO:             fastapi: 0.111.0
2024-08-20 02:25:21,345:INFO:             uvicorn: 0.30.1
2024-08-20 02:25:21,345:INFO:              m2cgen: 0.10.0
2024-08-20 02:25:21,345:INFO:           evidently: 0.4.30
2024-08-20 02:25:21,345:INFO:               fugue: 0.8.7
2024-08-20 02:25:21,345:INFO:           streamlit: 1.30.0
2024-08-20 02:25:21,346:INFO:             prophet: Not installed
2024-08-20 02:25:21,346:INFO:None
2024-08-20 02:25:21,346:INFO:Set up data.
2024-08-20 02:25:21,387:INFO:Set up folding strategy.
2024-08-20 02:25:21,387:INFO:Set up train/test split.
2024-08-20 02:25:21,408:INFO:Set up index.
2024-08-20 02:25:21,408:INFO:Assigning column types.
2024-08-20 02:25:46,494:INFO:PyCaret ClassificationExperiment
2024-08-20 02:25:46,494:INFO:Logging name: clf-default-name
2024-08-20 02:25:46,494:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:25:46,494:INFO:version 3.3.2
2024-08-20 02:25:46,494:INFO:Initializing setup()
2024-08-20 02:25:46,494:INFO:self.USI: 7953
2024-08-20 02:25:46,494:INFO:self._variable_keys: {'idx', 'X_train', '_available_plots', 'y', 'pipeline', 'exp_id', '_ml_usecase', 'fix_imbalance', 'X', 'y_train', 'X_test', 'seed', 'gpu_n_jobs_param', 'n_jobs_param', 'log_plots_param', 'target_param', 'fold_shuffle_param', 'gpu_param', 'y_test', 'is_multiclass', 'fold_generator', 'exp_name_log', 'html_param', 'memory', 'fold_groups_param', 'data', 'logging_param', 'USI'}
2024-08-20 02:25:46,494:INFO:Checking environment
2024-08-20 02:25:46,494:INFO:python_version: 3.11.7
2024-08-20 02:25:46,494:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:25:46,495:INFO:machine: AMD64
2024-08-20 02:25:46,495:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:25:46,495:INFO:Memory: svmem(total=16890978304, available=4729266176, percent=72.0, used=12161712128, free=4729266176)
2024-08-20 02:25:46,495:INFO:Physical Core: 12
2024-08-20 02:25:46,495:INFO:Logical Core: 16
2024-08-20 02:25:46,495:INFO:Checking libraries
2024-08-20 02:25:46,495:INFO:System:
2024-08-20 02:25:46,495:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:25:46,495:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:25:46,495:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:25:46,496:INFO:PyCaret required dependencies:
2024-08-20 02:25:46,496:INFO:                 pip: 23.3.1
2024-08-20 02:25:46,496:INFO:          setuptools: 68.2.2
2024-08-20 02:25:46,496:INFO:             pycaret: 3.3.2
2024-08-20 02:25:46,496:INFO:             IPython: 8.20.0
2024-08-20 02:25:46,496:INFO:          ipywidgets: 7.6.5
2024-08-20 02:25:46,496:INFO:                tqdm: 4.65.0
2024-08-20 02:25:46,496:INFO:               numpy: 1.26.4
2024-08-20 02:25:46,496:INFO:              pandas: 2.1.4
2024-08-20 02:25:46,496:INFO:              jinja2: 3.1.3
2024-08-20 02:25:46,496:INFO:               scipy: 1.11.4
2024-08-20 02:25:46,496:INFO:              joblib: 1.2.0
2024-08-20 02:25:46,496:INFO:             sklearn: 1.2.2
2024-08-20 02:25:46,497:INFO:                pyod: 2.0.1
2024-08-20 02:25:46,497:INFO:            imblearn: 0.11.0
2024-08-20 02:25:46,497:INFO:   category_encoders: 2.6.3
2024-08-20 02:25:46,497:INFO:            lightgbm: 4.4.0
2024-08-20 02:25:46,497:INFO:               numba: 0.59.0
2024-08-20 02:25:46,497:INFO:            requests: 2.31.0
2024-08-20 02:25:46,497:INFO:          matplotlib: 3.8.0
2024-08-20 02:25:46,497:INFO:          scikitplot: 0.3.7
2024-08-20 02:25:46,497:INFO:         yellowbrick: 1.5
2024-08-20 02:25:46,497:INFO:              plotly: 5.9.0
2024-08-20 02:25:46,497:INFO:    plotly-resampler: Not installed
2024-08-20 02:25:46,497:INFO:             kaleido: 0.2.1
2024-08-20 02:25:46,497:INFO:           schemdraw: 0.15
2024-08-20 02:25:46,497:INFO:         statsmodels: 0.14.0
2024-08-20 02:25:46,497:INFO:              sktime: 0.26.0
2024-08-20 02:25:46,498:INFO:               tbats: 1.1.3
2024-08-20 02:25:46,498:INFO:            pmdarima: 2.0.4
2024-08-20 02:25:46,498:INFO:              psutil: 5.9.0
2024-08-20 02:25:46,498:INFO:          markupsafe: 2.1.3
2024-08-20 02:25:46,498:INFO:             pickle5: Not installed
2024-08-20 02:25:46,498:INFO:         cloudpickle: 2.2.1
2024-08-20 02:25:46,498:INFO:         deprecation: 2.1.0
2024-08-20 02:25:46,498:INFO:              xxhash: 3.4.1
2024-08-20 02:25:46,498:INFO:           wurlitzer: Not installed
2024-08-20 02:25:46,498:INFO:PyCaret optional dependencies:
2024-08-20 02:25:46,498:INFO:                shap: 0.44.1
2024-08-20 02:25:46,498:INFO:           interpret: 0.6.2
2024-08-20 02:25:46,498:INFO:                umap: 0.5.6
2024-08-20 02:25:46,498:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:25:46,498:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:25:46,499:INFO:             autoviz: Not installed
2024-08-20 02:25:46,499:INFO:           fairlearn: 0.7.0
2024-08-20 02:25:46,499:INFO:          deepchecks: Not installed
2024-08-20 02:25:46,499:INFO:             xgboost: 2.1.0
2024-08-20 02:25:46,499:INFO:            catboost: 1.2.5
2024-08-20 02:25:46,499:INFO:              kmodes: 0.12.2
2024-08-20 02:25:46,499:INFO:             mlxtend: 0.23.1
2024-08-20 02:25:46,499:INFO:       statsforecast: 1.5.0
2024-08-20 02:25:46,499:INFO:        tune_sklearn: Not installed
2024-08-20 02:25:46,499:INFO:                 ray: Not installed
2024-08-20 02:25:46,499:INFO:            hyperopt: 0.2.7
2024-08-20 02:25:46,499:INFO:              optuna: 3.6.1
2024-08-20 02:25:46,499:INFO:               skopt: 0.10.2
2024-08-20 02:25:46,499:INFO:              mlflow: 2.14.2
2024-08-20 02:25:46,499:INFO:              gradio: 4.37.2
2024-08-20 02:25:46,499:INFO:             fastapi: 0.111.0
2024-08-20 02:25:46,500:INFO:             uvicorn: 0.30.1
2024-08-20 02:25:46,500:INFO:              m2cgen: 0.10.0
2024-08-20 02:25:46,500:INFO:           evidently: 0.4.30
2024-08-20 02:25:46,500:INFO:               fugue: 0.8.7
2024-08-20 02:25:46,500:INFO:           streamlit: 1.30.0
2024-08-20 02:25:46,500:INFO:             prophet: Not installed
2024-08-20 02:25:46,500:INFO:None
2024-08-20 02:25:46,500:INFO:Set up data.
2024-08-20 02:25:46,536:INFO:Set up folding strategy.
2024-08-20 02:25:46,536:INFO:Set up train/test split.
2024-08-20 02:25:46,556:INFO:Set up index.
2024-08-20 02:25:46,556:INFO:Assigning column types.
2024-08-20 02:25:46,562:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 02:25:46,668:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:25:46,670:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:25:46,737:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:46,743:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:46,852:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:25:46,853:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:25:46,920:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:46,926:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:46,927:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 02:25:47,037:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:25:47,104:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:47,110:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:47,223:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:25:47,292:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:47,298:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:47,299:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-08-20 02:25:47,478:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:47,484:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:47,661:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:47,666:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:47,669:INFO:Preparing preprocessing pipeline...
2024-08-20 02:25:47,670:INFO:Set up label encoding.
2024-08-20 02:25:47,670:INFO:Set up simple imputation.
2024-08-20 02:25:47,682:INFO:Set up encoding of ordinal features.
2024-08-20 02:25:47,692:INFO:Set up encoding of categorical features.
2024-08-20 02:25:47,692:INFO:Set up removing multicollinearity.
2024-08-20 02:25:47,692:INFO:Set up column transformation.
2024-08-20 02:25:47,692:INFO:Set up feature normalization.
2024-08-20 02:25:47,692:INFO:Set up feature selection.
2024-08-20 02:25:47,870:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:47,876:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:47,881:INFO:Set up column name cleaning.
2024-08-20 02:25:48,427:INFO:Finished creating preprocessing pipeline.
2024-08-20 02:25:48,544:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=4,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-08-20 02:25:48,545:INFO:Creating final display dataframe.
2024-08-20 02:25:49,049:INFO:Setup _display_container:                     Description                    Value
0                    Session id                      123
1                        Target                    class
2                   Target type                   Binary
3                Target mapping  edible: 0, poisonous: 1
4           Original data shape               (8124, 23)
5        Transformed data shape                (8124, 5)
6   Transformed train set shape                (5686, 5)
7    Transformed test set shape                (2438, 5)
8          Categorical features                       22
9      Rows with missing values                     2.4%
10                   Preprocess                     True
11              Imputation type                   simple
12           Numeric imputation                     mean
13       Categorical imputation                     mode
14     Maximum one-hot encoding                       25
15              Encoding method                     None
16     Remove multicollinearity                     True
17  Multicollinearity threshold                      0.9
18               Transformation                     True
19        Transformation method              yeo-johnson
20                    Normalize                     True
21             Normalize method                   zscore
22            Feature selection                     True
23     Feature selection method                  classic
24  Feature selection estimator                 lightgbm
25  Number of features selected                      0.2
26               Fold Generator          StratifiedKFold
27                  Fold Number                       10
28                     CPU Jobs                       -1
29                      Use GPU                    False
30               Log Experiment                    False
31              Experiment Name         clf-default-name
32                          USI                     7953
2024-08-20 02:25:49,268:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:49,274:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:49,448:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:25:49,454:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:25:49,456:INFO:setup() successfully completed in 3.02s...............
2024-08-20 02:25:49,456:INFO:Initializing compare_models()
2024-08-20 02:25:49,456:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-08-20 02:25:49,457:INFO:Checking exceptions
2024-08-20 02:25:49,463:INFO:Preparing display monitor
2024-08-20 02:25:49,490:INFO:Initializing Logistic Regression
2024-08-20 02:25:49,490:INFO:Total runtime is 0.0 minutes
2024-08-20 02:25:49,496:INFO:SubProcess create_model() called ==================================
2024-08-20 02:25:49,497:INFO:Initializing create_model()
2024-08-20 02:25:49,497:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D14868A790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:25:49,497:INFO:Checking exceptions
2024-08-20 02:25:49,497:INFO:Importing libraries
2024-08-20 02:25:49,497:INFO:Copying training dataset
2024-08-20 02:25:49,512:INFO:Defining folds
2024-08-20 02:25:49,512:INFO:Declaring metric variables
2024-08-20 02:25:49,520:INFO:Importing untrained model
2024-08-20 02:25:49,528:INFO:Logistic Regression Imported successfully
2024-08-20 02:25:49,543:INFO:Starting cross validation
2024-08-20 02:25:49,564:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:26:06,098:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,109:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,120:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,427:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,435:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,439:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,445:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,448:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,454:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,455:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,460:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,464:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,471:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,475:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,481:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,516:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,525:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,531:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,534:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,536:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,541:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,547:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,549:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,557:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,558:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,571:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,583:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,881:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,891:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,898:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:06,913:INFO:Calculating mean and std
2024-08-20 02:26:06,915:INFO:Creating metrics dataframe
2024-08-20 02:26:06,918:INFO:Uploading results into container
2024-08-20 02:26:06,919:INFO:Uploading model into container now
2024-08-20 02:26:06,920:INFO:_master_model_container: 1
2024-08-20 02:26:06,920:INFO:_display_container: 2
2024-08-20 02:26:06,921:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-08-20 02:26:06,921:INFO:create_model() successfully completed......................................
2024-08-20 02:26:07,228:INFO:SubProcess create_model() end ==================================
2024-08-20 02:26:07,228:INFO:Creating metrics dataframe
2024-08-20 02:26:07,240:INFO:Initializing K Neighbors Classifier
2024-08-20 02:26:07,240:INFO:Total runtime is 0.2958221117655436 minutes
2024-08-20 02:26:07,247:INFO:SubProcess create_model() called ==================================
2024-08-20 02:26:07,247:INFO:Initializing create_model()
2024-08-20 02:26:07,247:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D14868A790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:26:07,247:INFO:Checking exceptions
2024-08-20 02:26:07,247:INFO:Importing libraries
2024-08-20 02:26:07,248:INFO:Copying training dataset
2024-08-20 02:26:07,260:INFO:Defining folds
2024-08-20 02:26:07,260:INFO:Declaring metric variables
2024-08-20 02:26:07,267:INFO:Importing untrained model
2024-08-20 02:26:07,274:INFO:K Neighbors Classifier Imported successfully
2024-08-20 02:26:07,289:INFO:Starting cross validation
2024-08-20 02:26:07,311:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:26:14,185:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,195:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,204:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,338:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,348:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,356:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,420:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,430:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,441:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,525:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,536:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:14,550:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:23,575:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:23,586:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:23,595:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:23,649:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:23,660:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:23,669:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,215:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,234:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,250:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,292:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,306:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,324:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,381:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,393:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,409:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,419:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,430:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:24,450:INFO:Calculating mean and std
2024-08-20 02:26:24,453:INFO:Creating metrics dataframe
2024-08-20 02:26:24,457:INFO:Uploading results into container
2024-08-20 02:26:24,458:INFO:Uploading model into container now
2024-08-20 02:26:24,458:INFO:_master_model_container: 2
2024-08-20 02:26:24,459:INFO:_display_container: 2
2024-08-20 02:26:24,459:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 02:26:24,459:INFO:create_model() successfully completed......................................
2024-08-20 02:26:24,716:INFO:SubProcess create_model() end ==================================
2024-08-20 02:26:24,716:INFO:Creating metrics dataframe
2024-08-20 02:26:24,731:INFO:Initializing Naive Bayes
2024-08-20 02:26:24,732:INFO:Total runtime is 0.5873593926429749 minutes
2024-08-20 02:26:24,737:INFO:SubProcess create_model() called ==================================
2024-08-20 02:26:24,738:INFO:Initializing create_model()
2024-08-20 02:26:24,738:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D14868A790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:26:24,738:INFO:Checking exceptions
2024-08-20 02:26:24,738:INFO:Importing libraries
2024-08-20 02:26:24,738:INFO:Copying training dataset
2024-08-20 02:26:24,752:INFO:Defining folds
2024-08-20 02:26:24,753:INFO:Declaring metric variables
2024-08-20 02:26:24,761:INFO:Importing untrained model
2024-08-20 02:26:24,768:INFO:Naive Bayes Imported successfully
2024-08-20 02:26:24,779:INFO:Starting cross validation
2024-08-20 02:26:24,800:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:26:31,949:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:31,960:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:31,970:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,302:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,314:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,324:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,360:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,369:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,373:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,379:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,381:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,385:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,391:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,393:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,404:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,412:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,424:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,436:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,478:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,490:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,499:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,502:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,510:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,520:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,661:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,670:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,671:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,680:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,681:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,691:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:32,707:INFO:Calculating mean and std
2024-08-20 02:26:32,711:INFO:Creating metrics dataframe
2024-08-20 02:26:32,714:INFO:Uploading results into container
2024-08-20 02:26:32,714:INFO:Uploading model into container now
2024-08-20 02:26:32,715:INFO:_master_model_container: 3
2024-08-20 02:26:32,715:INFO:_display_container: 2
2024-08-20 02:26:32,715:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-08-20 02:26:32,716:INFO:create_model() successfully completed......................................
2024-08-20 02:26:32,947:INFO:SubProcess create_model() end ==================================
2024-08-20 02:26:32,947:INFO:Creating metrics dataframe
2024-08-20 02:26:32,963:INFO:Initializing Decision Tree Classifier
2024-08-20 02:26:32,963:INFO:Total runtime is 0.7245404521624248 minutes
2024-08-20 02:26:32,972:INFO:SubProcess create_model() called ==================================
2024-08-20 02:26:32,972:INFO:Initializing create_model()
2024-08-20 02:26:32,972:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D14868A790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:26:32,973:INFO:Checking exceptions
2024-08-20 02:26:32,973:INFO:Importing libraries
2024-08-20 02:26:32,973:INFO:Copying training dataset
2024-08-20 02:26:32,990:INFO:Defining folds
2024-08-20 02:26:32,990:INFO:Declaring metric variables
2024-08-20 02:26:32,998:INFO:Importing untrained model
2024-08-20 02:26:33,006:INFO:Decision Tree Classifier Imported successfully
2024-08-20 02:26:33,022:INFO:Starting cross validation
2024-08-20 02:26:33,043:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:26:41,110:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,119:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,127:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,624:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,641:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,658:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,679:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,695:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,709:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,712:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,720:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,732:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,737:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,753:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,755:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,766:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,769:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,778:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,792:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,799:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,805:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,809:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,820:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,821:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,865:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,881:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:41,894:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:42,041:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:42,050:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:42,058:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:42,072:INFO:Calculating mean and std
2024-08-20 02:26:42,074:INFO:Creating metrics dataframe
2024-08-20 02:26:42,077:INFO:Uploading results into container
2024-08-20 02:26:42,078:INFO:Uploading model into container now
2024-08-20 02:26:42,078:INFO:_master_model_container: 4
2024-08-20 02:26:42,078:INFO:_display_container: 2
2024-08-20 02:26:42,079:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 02:26:42,079:INFO:create_model() successfully completed......................................
2024-08-20 02:26:42,321:INFO:SubProcess create_model() end ==================================
2024-08-20 02:26:42,322:INFO:Creating metrics dataframe
2024-08-20 02:26:42,338:INFO:Initializing SVM - Linear Kernel
2024-08-20 02:26:42,338:INFO:Total runtime is 0.8807889183362325 minutes
2024-08-20 02:26:42,344:INFO:SubProcess create_model() called ==================================
2024-08-20 02:26:42,345:INFO:Initializing create_model()
2024-08-20 02:26:42,345:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D14868A790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:26:42,345:INFO:Checking exceptions
2024-08-20 02:26:42,345:INFO:Importing libraries
2024-08-20 02:26:42,345:INFO:Copying training dataset
2024-08-20 02:26:42,358:INFO:Defining folds
2024-08-20 02:26:42,358:INFO:Declaring metric variables
2024-08-20 02:26:42,365:INFO:Importing untrained model
2024-08-20 02:26:42,373:INFO:SVM - Linear Kernel Imported successfully
2024-08-20 02:26:42,387:INFO:Starting cross validation
2024-08-20 02:26:42,413:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:26:49,477:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,488:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,499:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,919:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,930:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,935:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,940:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,948:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,956:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,962:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,969:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,972:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,981:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,984:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,988:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:49,998:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,001:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,010:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,012:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,020:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,065:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,076:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,087:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,095:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,106:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,115:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,201:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,209:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,217:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:26:50,231:INFO:Calculating mean and std
2024-08-20 02:26:50,233:INFO:Creating metrics dataframe
2024-08-20 02:26:50,236:INFO:Uploading results into container
2024-08-20 02:26:50,237:INFO:Uploading model into container now
2024-08-20 02:26:50,237:INFO:_master_model_container: 5
2024-08-20 02:26:50,237:INFO:_display_container: 2
2024-08-20 02:26:50,238:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-08-20 02:26:50,238:INFO:create_model() successfully completed......................................
2024-08-20 02:26:50,466:INFO:SubProcess create_model() end ==================================
2024-08-20 02:26:50,466:INFO:Creating metrics dataframe
2024-08-20 02:26:50,479:INFO:Initializing Ridge Classifier
2024-08-20 02:26:50,480:INFO:Total runtime is 1.0164955814679464 minutes
2024-08-20 02:26:50,485:INFO:SubProcess create_model() called ==================================
2024-08-20 02:26:50,486:INFO:Initializing create_model()
2024-08-20 02:26:50,486:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D14868F950>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D14868A790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:26:50,486:INFO:Checking exceptions
2024-08-20 02:26:50,486:INFO:Importing libraries
2024-08-20 02:26:50,486:INFO:Copying training dataset
2024-08-20 02:26:50,500:INFO:Defining folds
2024-08-20 02:26:50,500:INFO:Declaring metric variables
2024-08-20 02:26:50,507:INFO:Importing untrained model
2024-08-20 02:26:50,516:INFO:Ridge Classifier Imported successfully
2024-08-20 02:26:50,532:INFO:Starting cross validation
2024-08-20 02:26:50,553:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:26:59,830:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:27:07,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:27:07,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:27:07,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:27:07,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:27:15,052:INFO:PyCaret ClassificationExperiment
2024-08-20 02:27:15,052:INFO:Logging name: clf-default-name
2024-08-20 02:27:15,052:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:27:15,052:INFO:version 3.3.2
2024-08-20 02:27:15,052:INFO:Initializing setup()
2024-08-20 02:27:15,052:INFO:self.USI: 665a
2024-08-20 02:27:15,052:INFO:self._variable_keys: {'exp_name_log', 'pipeline', 'exp_id', 'target_param', 'X_train', 'logging_param', 'y', '_available_plots', 'X', 'X_test', 'log_plots_param', 'seed', 'data', 'y_train', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'fix_imbalance', 'is_multiclass', 'gpu_param', 'USI', 'memory', 'html_param', 'n_jobs_param', 'y_test', '_ml_usecase', 'gpu_n_jobs_param'}
2024-08-20 02:27:15,052:INFO:Checking environment
2024-08-20 02:27:15,052:INFO:python_version: 3.11.7
2024-08-20 02:27:15,053:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:27:15,053:INFO:machine: AMD64
2024-08-20 02:27:15,053:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:27:15,053:INFO:Memory: svmem(total=16890978304, available=5200736256, percent=69.2, used=11690242048, free=5200736256)
2024-08-20 02:27:15,053:INFO:Physical Core: 12
2024-08-20 02:27:15,053:INFO:Logical Core: 16
2024-08-20 02:27:15,053:INFO:Checking libraries
2024-08-20 02:27:15,053:INFO:System:
2024-08-20 02:27:15,053:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:27:15,053:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:27:15,053:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:27:15,053:INFO:PyCaret required dependencies:
2024-08-20 02:27:16,506:INFO:                 pip: 23.3.1
2024-08-20 02:27:16,506:INFO:          setuptools: 68.2.2
2024-08-20 02:27:16,506:INFO:             pycaret: 3.3.2
2024-08-20 02:27:16,506:INFO:             IPython: 8.20.0
2024-08-20 02:27:16,506:INFO:          ipywidgets: 7.6.5
2024-08-20 02:27:16,507:INFO:                tqdm: 4.65.0
2024-08-20 02:27:16,507:INFO:               numpy: 1.26.4
2024-08-20 02:27:16,507:INFO:              pandas: 2.1.4
2024-08-20 02:27:16,507:INFO:              jinja2: 3.1.3
2024-08-20 02:27:16,507:INFO:               scipy: 1.11.4
2024-08-20 02:27:16,507:INFO:              joblib: 1.2.0
2024-08-20 02:27:16,507:INFO:             sklearn: 1.2.2
2024-08-20 02:27:16,507:INFO:                pyod: 2.0.1
2024-08-20 02:27:16,507:INFO:            imblearn: 0.11.0
2024-08-20 02:27:16,507:INFO:   category_encoders: 2.6.3
2024-08-20 02:27:16,507:INFO:            lightgbm: 4.4.0
2024-08-20 02:27:16,507:INFO:               numba: 0.59.0
2024-08-20 02:27:16,507:INFO:            requests: 2.31.0
2024-08-20 02:27:16,508:INFO:          matplotlib: 3.8.0
2024-08-20 02:27:16,508:INFO:          scikitplot: 0.3.7
2024-08-20 02:27:16,508:INFO:         yellowbrick: 1.5
2024-08-20 02:27:16,508:INFO:              plotly: 5.9.0
2024-08-20 02:27:16,508:INFO:    plotly-resampler: Not installed
2024-08-20 02:27:16,508:INFO:             kaleido: 0.2.1
2024-08-20 02:27:16,508:INFO:           schemdraw: 0.15
2024-08-20 02:27:16,508:INFO:         statsmodels: 0.14.0
2024-08-20 02:27:16,508:INFO:              sktime: 0.26.0
2024-08-20 02:27:16,508:INFO:               tbats: 1.1.3
2024-08-20 02:27:16,508:INFO:            pmdarima: 2.0.4
2024-08-20 02:27:16,508:INFO:              psutil: 5.9.0
2024-08-20 02:27:16,508:INFO:          markupsafe: 2.1.3
2024-08-20 02:27:16,508:INFO:             pickle5: Not installed
2024-08-20 02:27:16,509:INFO:         cloudpickle: 2.2.1
2024-08-20 02:27:16,509:INFO:         deprecation: 2.1.0
2024-08-20 02:27:16,509:INFO:              xxhash: 3.4.1
2024-08-20 02:27:16,509:INFO:           wurlitzer: Not installed
2024-08-20 02:27:16,509:INFO:PyCaret optional dependencies:
2024-08-20 02:27:22,500:INFO:                shap: 0.44.1
2024-08-20 02:27:22,500:INFO:           interpret: 0.6.2
2024-08-20 02:27:22,500:INFO:                umap: 0.5.6
2024-08-20 02:27:22,500:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:27:22,500:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:27:22,500:INFO:             autoviz: Not installed
2024-08-20 02:27:22,500:INFO:           fairlearn: 0.7.0
2024-08-20 02:27:22,500:INFO:          deepchecks: Not installed
2024-08-20 02:27:22,500:INFO:             xgboost: 2.1.0
2024-08-20 02:27:22,502:INFO:            catboost: 1.2.5
2024-08-20 02:27:22,502:INFO:              kmodes: 0.12.2
2024-08-20 02:27:22,502:INFO:             mlxtend: 0.23.1
2024-08-20 02:27:22,502:INFO:       statsforecast: 1.5.0
2024-08-20 02:27:22,502:INFO:        tune_sklearn: Not installed
2024-08-20 02:27:22,502:INFO:                 ray: Not installed
2024-08-20 02:27:22,502:INFO:            hyperopt: 0.2.7
2024-08-20 02:27:22,502:INFO:              optuna: 3.6.1
2024-08-20 02:27:22,502:INFO:               skopt: 0.10.2
2024-08-20 02:27:22,502:INFO:              mlflow: 2.14.2
2024-08-20 02:27:22,502:INFO:              gradio: 4.37.2
2024-08-20 02:27:22,502:INFO:             fastapi: 0.111.0
2024-08-20 02:27:22,502:INFO:             uvicorn: 0.30.1
2024-08-20 02:27:22,502:INFO:              m2cgen: 0.10.0
2024-08-20 02:27:22,502:INFO:           evidently: 0.4.30
2024-08-20 02:27:22,503:INFO:               fugue: 0.8.7
2024-08-20 02:27:22,503:INFO:           streamlit: 1.30.0
2024-08-20 02:27:22,503:INFO:             prophet: Not installed
2024-08-20 02:27:22,503:INFO:None
2024-08-20 02:27:22,503:INFO:Set up data.
2024-08-20 02:27:22,543:INFO:Set up folding strategy.
2024-08-20 02:27:22,543:INFO:Set up train/test split.
2024-08-20 02:27:22,565:INFO:Set up index.
2024-08-20 02:27:22,565:INFO:Assigning column types.
2024-08-20 02:27:49,975:INFO:PyCaret ClassificationExperiment
2024-08-20 02:27:49,975:INFO:Logging name: clf-default-name
2024-08-20 02:27:49,976:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:27:49,976:INFO:version 3.3.2
2024-08-20 02:27:49,976:INFO:Initializing setup()
2024-08-20 02:27:49,976:INFO:self.USI: 8d60
2024-08-20 02:27:49,976:INFO:self._variable_keys: {'exp_name_log', 'pipeline', 'exp_id', 'target_param', 'X_train', 'logging_param', 'y', '_available_plots', 'X', 'X_test', 'log_plots_param', 'seed', 'data', 'y_train', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'fix_imbalance', 'is_multiclass', 'gpu_param', 'USI', 'memory', 'html_param', 'n_jobs_param', 'y_test', '_ml_usecase', 'gpu_n_jobs_param'}
2024-08-20 02:27:49,976:INFO:Checking environment
2024-08-20 02:27:49,977:INFO:python_version: 3.11.7
2024-08-20 02:27:49,977:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:27:49,977:INFO:machine: AMD64
2024-08-20 02:27:49,977:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:27:49,977:INFO:Memory: svmem(total=16890978304, available=5081329664, percent=69.9, used=11809648640, free=5081329664)
2024-08-20 02:27:49,977:INFO:Physical Core: 12
2024-08-20 02:27:49,977:INFO:Logical Core: 16
2024-08-20 02:27:49,978:INFO:Checking libraries
2024-08-20 02:27:49,978:INFO:System:
2024-08-20 02:27:49,978:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:27:49,978:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:27:49,978:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:27:49,978:INFO:PyCaret required dependencies:
2024-08-20 02:27:49,978:INFO:                 pip: 23.3.1
2024-08-20 02:27:49,978:INFO:          setuptools: 68.2.2
2024-08-20 02:27:49,978:INFO:             pycaret: 3.3.2
2024-08-20 02:27:49,979:INFO:             IPython: 8.20.0
2024-08-20 02:27:49,979:INFO:          ipywidgets: 7.6.5
2024-08-20 02:27:49,979:INFO:                tqdm: 4.65.0
2024-08-20 02:27:49,979:INFO:               numpy: 1.26.4
2024-08-20 02:27:49,979:INFO:              pandas: 2.1.4
2024-08-20 02:27:49,979:INFO:              jinja2: 3.1.3
2024-08-20 02:27:49,979:INFO:               scipy: 1.11.4
2024-08-20 02:27:49,979:INFO:              joblib: 1.2.0
2024-08-20 02:27:49,979:INFO:             sklearn: 1.2.2
2024-08-20 02:27:49,979:INFO:                pyod: 2.0.1
2024-08-20 02:27:49,980:INFO:            imblearn: 0.11.0
2024-08-20 02:27:49,980:INFO:   category_encoders: 2.6.3
2024-08-20 02:27:49,980:INFO:            lightgbm: 4.4.0
2024-08-20 02:27:49,980:INFO:               numba: 0.59.0
2024-08-20 02:27:49,980:INFO:            requests: 2.31.0
2024-08-20 02:27:49,980:INFO:          matplotlib: 3.8.0
2024-08-20 02:27:49,980:INFO:          scikitplot: 0.3.7
2024-08-20 02:27:49,980:INFO:         yellowbrick: 1.5
2024-08-20 02:27:49,980:INFO:              plotly: 5.9.0
2024-08-20 02:27:49,980:INFO:    plotly-resampler: Not installed
2024-08-20 02:27:49,980:INFO:             kaleido: 0.2.1
2024-08-20 02:27:49,980:INFO:           schemdraw: 0.15
2024-08-20 02:27:49,980:INFO:         statsmodels: 0.14.0
2024-08-20 02:27:49,980:INFO:              sktime: 0.26.0
2024-08-20 02:27:49,980:INFO:               tbats: 1.1.3
2024-08-20 02:27:49,980:INFO:            pmdarima: 2.0.4
2024-08-20 02:27:49,981:INFO:              psutil: 5.9.0
2024-08-20 02:27:49,981:INFO:          markupsafe: 2.1.3
2024-08-20 02:27:49,981:INFO:             pickle5: Not installed
2024-08-20 02:27:49,981:INFO:         cloudpickle: 2.2.1
2024-08-20 02:27:49,981:INFO:         deprecation: 2.1.0
2024-08-20 02:27:49,981:INFO:              xxhash: 3.4.1
2024-08-20 02:27:49,981:INFO:           wurlitzer: Not installed
2024-08-20 02:27:49,981:INFO:PyCaret optional dependencies:
2024-08-20 02:27:49,981:INFO:                shap: 0.44.1
2024-08-20 02:27:49,981:INFO:           interpret: 0.6.2
2024-08-20 02:27:49,981:INFO:                umap: 0.5.6
2024-08-20 02:27:49,981:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:27:49,981:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:27:49,981:INFO:             autoviz: Not installed
2024-08-20 02:27:49,982:INFO:           fairlearn: 0.7.0
2024-08-20 02:27:49,982:INFO:          deepchecks: Not installed
2024-08-20 02:27:49,982:INFO:             xgboost: 2.1.0
2024-08-20 02:27:49,982:INFO:            catboost: 1.2.5
2024-08-20 02:27:49,982:INFO:              kmodes: 0.12.2
2024-08-20 02:27:49,982:INFO:             mlxtend: 0.23.1
2024-08-20 02:27:49,982:INFO:       statsforecast: 1.5.0
2024-08-20 02:27:49,982:INFO:        tune_sklearn: Not installed
2024-08-20 02:27:49,982:INFO:                 ray: Not installed
2024-08-20 02:27:49,982:INFO:            hyperopt: 0.2.7
2024-08-20 02:27:49,982:INFO:              optuna: 3.6.1
2024-08-20 02:27:49,982:INFO:               skopt: 0.10.2
2024-08-20 02:27:49,982:INFO:              mlflow: 2.14.2
2024-08-20 02:27:49,982:INFO:              gradio: 4.37.2
2024-08-20 02:27:49,982:INFO:             fastapi: 0.111.0
2024-08-20 02:27:49,982:INFO:             uvicorn: 0.30.1
2024-08-20 02:27:49,982:INFO:              m2cgen: 0.10.0
2024-08-20 02:27:49,982:INFO:           evidently: 0.4.30
2024-08-20 02:27:49,982:INFO:               fugue: 0.8.7
2024-08-20 02:27:49,982:INFO:           streamlit: 1.30.0
2024-08-20 02:27:49,982:INFO:             prophet: Not installed
2024-08-20 02:27:49,982:INFO:None
2024-08-20 02:27:49,982:INFO:Set up data.
2024-08-20 02:27:50,025:INFO:Set up folding strategy.
2024-08-20 02:27:50,026:INFO:Set up train/test split.
2024-08-20 02:27:50,047:INFO:Set up index.
2024-08-20 02:27:50,048:INFO:Assigning column types.
2024-08-20 02:27:54,522:INFO:PyCaret ClassificationExperiment
2024-08-20 02:27:54,522:INFO:Logging name: clf-default-name
2024-08-20 02:27:54,522:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:27:54,522:INFO:version 3.3.2
2024-08-20 02:27:54,522:INFO:Initializing setup()
2024-08-20 02:27:54,522:INFO:self.USI: be82
2024-08-20 02:27:54,522:INFO:self._variable_keys: {'exp_name_log', 'pipeline', 'exp_id', 'target_param', 'X_train', 'logging_param', 'y', '_available_plots', 'X', 'X_test', 'log_plots_param', 'seed', 'data', 'y_train', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'fix_imbalance', 'is_multiclass', 'gpu_param', 'USI', 'memory', 'html_param', 'n_jobs_param', 'y_test', '_ml_usecase', 'gpu_n_jobs_param'}
2024-08-20 02:27:54,523:INFO:Checking environment
2024-08-20 02:27:54,523:INFO:python_version: 3.11.7
2024-08-20 02:27:54,523:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:27:54,523:INFO:machine: AMD64
2024-08-20 02:27:54,523:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:27:54,523:INFO:Memory: svmem(total=16890978304, available=5056356352, percent=70.1, used=11834621952, free=5056356352)
2024-08-20 02:27:54,524:INFO:Physical Core: 12
2024-08-20 02:27:54,524:INFO:Logical Core: 16
2024-08-20 02:27:54,524:INFO:Checking libraries
2024-08-20 02:27:54,524:INFO:System:
2024-08-20 02:27:54,524:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:27:54,524:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:27:54,524:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:27:54,524:INFO:PyCaret required dependencies:
2024-08-20 02:27:54,524:INFO:                 pip: 23.3.1
2024-08-20 02:27:54,524:INFO:          setuptools: 68.2.2
2024-08-20 02:27:54,524:INFO:             pycaret: 3.3.2
2024-08-20 02:27:54,525:INFO:             IPython: 8.20.0
2024-08-20 02:27:54,525:INFO:          ipywidgets: 7.6.5
2024-08-20 02:27:54,525:INFO:                tqdm: 4.65.0
2024-08-20 02:27:54,525:INFO:               numpy: 1.26.4
2024-08-20 02:27:54,525:INFO:              pandas: 2.1.4
2024-08-20 02:27:54,525:INFO:              jinja2: 3.1.3
2024-08-20 02:27:54,525:INFO:               scipy: 1.11.4
2024-08-20 02:27:54,525:INFO:              joblib: 1.2.0
2024-08-20 02:27:54,525:INFO:             sklearn: 1.2.2
2024-08-20 02:27:54,525:INFO:                pyod: 2.0.1
2024-08-20 02:27:54,525:INFO:            imblearn: 0.11.0
2024-08-20 02:27:54,525:INFO:   category_encoders: 2.6.3
2024-08-20 02:27:54,525:INFO:            lightgbm: 4.4.0
2024-08-20 02:27:54,526:INFO:               numba: 0.59.0
2024-08-20 02:27:54,526:INFO:            requests: 2.31.0
2024-08-20 02:27:54,526:INFO:          matplotlib: 3.8.0
2024-08-20 02:27:54,526:INFO:          scikitplot: 0.3.7
2024-08-20 02:27:54,526:INFO:         yellowbrick: 1.5
2024-08-20 02:27:54,526:INFO:              plotly: 5.9.0
2024-08-20 02:27:54,526:INFO:    plotly-resampler: Not installed
2024-08-20 02:27:54,526:INFO:             kaleido: 0.2.1
2024-08-20 02:27:54,526:INFO:           schemdraw: 0.15
2024-08-20 02:27:54,526:INFO:         statsmodels: 0.14.0
2024-08-20 02:27:54,526:INFO:              sktime: 0.26.0
2024-08-20 02:27:54,526:INFO:               tbats: 1.1.3
2024-08-20 02:27:54,526:INFO:            pmdarima: 2.0.4
2024-08-20 02:27:54,526:INFO:              psutil: 5.9.0
2024-08-20 02:27:54,527:INFO:          markupsafe: 2.1.3
2024-08-20 02:27:54,527:INFO:             pickle5: Not installed
2024-08-20 02:27:54,527:INFO:         cloudpickle: 2.2.1
2024-08-20 02:27:54,527:INFO:         deprecation: 2.1.0
2024-08-20 02:27:54,527:INFO:              xxhash: 3.4.1
2024-08-20 02:27:54,527:INFO:           wurlitzer: Not installed
2024-08-20 02:27:54,527:INFO:PyCaret optional dependencies:
2024-08-20 02:27:54,527:INFO:                shap: 0.44.1
2024-08-20 02:27:54,527:INFO:           interpret: 0.6.2
2024-08-20 02:27:54,527:INFO:                umap: 0.5.6
2024-08-20 02:27:54,527:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:27:54,527:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:27:54,527:INFO:             autoviz: Not installed
2024-08-20 02:27:54,527:INFO:           fairlearn: 0.7.0
2024-08-20 02:27:54,527:INFO:          deepchecks: Not installed
2024-08-20 02:27:54,528:INFO:             xgboost: 2.1.0
2024-08-20 02:27:54,528:INFO:            catboost: 1.2.5
2024-08-20 02:27:54,528:INFO:              kmodes: 0.12.2
2024-08-20 02:27:54,528:INFO:             mlxtend: 0.23.1
2024-08-20 02:27:54,528:INFO:       statsforecast: 1.5.0
2024-08-20 02:27:54,528:INFO:        tune_sklearn: Not installed
2024-08-20 02:27:54,528:INFO:                 ray: Not installed
2024-08-20 02:27:54,528:INFO:            hyperopt: 0.2.7
2024-08-20 02:27:54,528:INFO:              optuna: 3.6.1
2024-08-20 02:27:54,528:INFO:               skopt: 0.10.2
2024-08-20 02:27:54,528:INFO:              mlflow: 2.14.2
2024-08-20 02:27:54,528:INFO:              gradio: 4.37.2
2024-08-20 02:27:54,528:INFO:             fastapi: 0.111.0
2024-08-20 02:27:54,528:INFO:             uvicorn: 0.30.1
2024-08-20 02:27:54,529:INFO:              m2cgen: 0.10.0
2024-08-20 02:27:54,529:INFO:           evidently: 0.4.30
2024-08-20 02:27:54,529:INFO:               fugue: 0.8.7
2024-08-20 02:27:54,529:INFO:           streamlit: 1.30.0
2024-08-20 02:27:54,529:INFO:             prophet: Not installed
2024-08-20 02:27:54,529:INFO:None
2024-08-20 02:27:54,529:INFO:Set up data.
2024-08-20 02:27:54,564:INFO:Set up folding strategy.
2024-08-20 02:27:54,564:INFO:Set up train/test split.
2024-08-20 02:27:54,590:INFO:Set up index.
2024-08-20 02:27:54,592:INFO:Assigning column types.
2024-08-20 02:28:03,173:INFO:PyCaret ClassificationExperiment
2024-08-20 02:28:03,173:INFO:Logging name: clf-default-name
2024-08-20 02:28:03,173:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:28:03,173:INFO:version 3.3.2
2024-08-20 02:28:03,173:INFO:Initializing setup()
2024-08-20 02:28:03,173:INFO:self.USI: 5ed2
2024-08-20 02:28:03,173:INFO:self._variable_keys: {'exp_name_log', 'pipeline', 'exp_id', 'target_param', 'X_train', 'logging_param', 'y', '_available_plots', 'X', 'X_test', 'log_plots_param', 'seed', 'data', 'y_train', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'fix_imbalance', 'is_multiclass', 'gpu_param', 'USI', 'memory', 'html_param', 'n_jobs_param', 'y_test', '_ml_usecase', 'gpu_n_jobs_param'}
2024-08-20 02:28:03,173:INFO:Checking environment
2024-08-20 02:28:03,173:INFO:python_version: 3.11.7
2024-08-20 02:28:03,174:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:28:03,174:INFO:machine: AMD64
2024-08-20 02:28:03,174:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:28:03,174:INFO:Memory: svmem(total=16890978304, available=5082640384, percent=69.9, used=11808337920, free=5082640384)
2024-08-20 02:28:03,174:INFO:Physical Core: 12
2024-08-20 02:28:03,174:INFO:Logical Core: 16
2024-08-20 02:28:03,174:INFO:Checking libraries
2024-08-20 02:28:03,174:INFO:System:
2024-08-20 02:28:03,174:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:28:03,174:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:28:03,174:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:28:03,174:INFO:PyCaret required dependencies:
2024-08-20 02:28:03,175:INFO:                 pip: 23.3.1
2024-08-20 02:28:03,175:INFO:          setuptools: 68.2.2
2024-08-20 02:28:03,175:INFO:             pycaret: 3.3.2
2024-08-20 02:28:03,175:INFO:             IPython: 8.20.0
2024-08-20 02:28:03,175:INFO:          ipywidgets: 7.6.5
2024-08-20 02:28:03,175:INFO:                tqdm: 4.65.0
2024-08-20 02:28:03,175:INFO:               numpy: 1.26.4
2024-08-20 02:28:03,175:INFO:              pandas: 2.1.4
2024-08-20 02:28:03,175:INFO:              jinja2: 3.1.3
2024-08-20 02:28:03,175:INFO:               scipy: 1.11.4
2024-08-20 02:28:03,175:INFO:              joblib: 1.2.0
2024-08-20 02:28:03,175:INFO:             sklearn: 1.2.2
2024-08-20 02:28:03,176:INFO:                pyod: 2.0.1
2024-08-20 02:28:03,176:INFO:            imblearn: 0.11.0
2024-08-20 02:28:03,176:INFO:   category_encoders: 2.6.3
2024-08-20 02:28:03,176:INFO:            lightgbm: 4.4.0
2024-08-20 02:28:03,176:INFO:               numba: 0.59.0
2024-08-20 02:28:03,176:INFO:            requests: 2.31.0
2024-08-20 02:28:03,176:INFO:          matplotlib: 3.8.0
2024-08-20 02:28:03,176:INFO:          scikitplot: 0.3.7
2024-08-20 02:28:03,176:INFO:         yellowbrick: 1.5
2024-08-20 02:28:03,176:INFO:              plotly: 5.9.0
2024-08-20 02:28:03,176:INFO:    plotly-resampler: Not installed
2024-08-20 02:28:03,176:INFO:             kaleido: 0.2.1
2024-08-20 02:28:03,176:INFO:           schemdraw: 0.15
2024-08-20 02:28:03,176:INFO:         statsmodels: 0.14.0
2024-08-20 02:28:03,177:INFO:              sktime: 0.26.0
2024-08-20 02:28:03,177:INFO:               tbats: 1.1.3
2024-08-20 02:28:03,177:INFO:            pmdarima: 2.0.4
2024-08-20 02:28:03,177:INFO:              psutil: 5.9.0
2024-08-20 02:28:03,177:INFO:          markupsafe: 2.1.3
2024-08-20 02:28:03,177:INFO:             pickle5: Not installed
2024-08-20 02:28:03,177:INFO:         cloudpickle: 2.2.1
2024-08-20 02:28:03,177:INFO:         deprecation: 2.1.0
2024-08-20 02:28:03,177:INFO:              xxhash: 3.4.1
2024-08-20 02:28:03,177:INFO:           wurlitzer: Not installed
2024-08-20 02:28:03,177:INFO:PyCaret optional dependencies:
2024-08-20 02:28:03,177:INFO:                shap: 0.44.1
2024-08-20 02:28:03,177:INFO:           interpret: 0.6.2
2024-08-20 02:28:03,178:INFO:                umap: 0.5.6
2024-08-20 02:28:03,178:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:28:03,178:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:28:03,178:INFO:             autoviz: Not installed
2024-08-20 02:28:03,178:INFO:           fairlearn: 0.7.0
2024-08-20 02:28:03,178:INFO:          deepchecks: Not installed
2024-08-20 02:28:03,178:INFO:             xgboost: 2.1.0
2024-08-20 02:28:03,178:INFO:            catboost: 1.2.5
2024-08-20 02:28:03,178:INFO:              kmodes: 0.12.2
2024-08-20 02:28:03,178:INFO:             mlxtend: 0.23.1
2024-08-20 02:28:03,178:INFO:       statsforecast: 1.5.0
2024-08-20 02:28:03,178:INFO:        tune_sklearn: Not installed
2024-08-20 02:28:03,178:INFO:                 ray: Not installed
2024-08-20 02:28:03,178:INFO:            hyperopt: 0.2.7
2024-08-20 02:28:03,179:INFO:              optuna: 3.6.1
2024-08-20 02:28:03,179:INFO:               skopt: 0.10.2
2024-08-20 02:28:03,179:INFO:              mlflow: 2.14.2
2024-08-20 02:28:03,179:INFO:              gradio: 4.37.2
2024-08-20 02:28:03,179:INFO:             fastapi: 0.111.0
2024-08-20 02:28:03,179:INFO:             uvicorn: 0.30.1
2024-08-20 02:28:03,179:INFO:              m2cgen: 0.10.0
2024-08-20 02:28:03,179:INFO:           evidently: 0.4.30
2024-08-20 02:28:03,179:INFO:               fugue: 0.8.7
2024-08-20 02:28:03,179:INFO:           streamlit: 1.30.0
2024-08-20 02:28:03,179:INFO:             prophet: Not installed
2024-08-20 02:28:03,179:INFO:None
2024-08-20 02:28:03,179:INFO:Set up data.
2024-08-20 02:28:03,218:INFO:Set up folding strategy.
2024-08-20 02:28:03,219:INFO:Set up train/test split.
2024-08-20 02:28:03,239:INFO:Set up index.
2024-08-20 02:28:03,240:INFO:Assigning column types.
2024-08-20 02:28:12,941:INFO:PyCaret ClassificationExperiment
2024-08-20 02:28:12,941:INFO:Logging name: clf-default-name
2024-08-20 02:28:12,941:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:28:12,941:INFO:version 3.3.2
2024-08-20 02:28:12,941:INFO:Initializing setup()
2024-08-20 02:28:12,942:INFO:self.USI: da89
2024-08-20 02:28:12,942:INFO:self._variable_keys: {'exp_name_log', 'pipeline', 'exp_id', 'target_param', 'X_train', 'logging_param', 'y', '_available_plots', 'X', 'X_test', 'log_plots_param', 'seed', 'data', 'y_train', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'fix_imbalance', 'is_multiclass', 'gpu_param', 'USI', 'memory', 'html_param', 'n_jobs_param', 'y_test', '_ml_usecase', 'gpu_n_jobs_param'}
2024-08-20 02:28:12,942:INFO:Checking environment
2024-08-20 02:28:12,942:INFO:python_version: 3.11.7
2024-08-20 02:28:12,942:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:28:12,942:INFO:machine: AMD64
2024-08-20 02:28:12,942:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:28:12,942:INFO:Memory: svmem(total=16890978304, available=5082152960, percent=69.9, used=11808825344, free=5082152960)
2024-08-20 02:28:12,942:INFO:Physical Core: 12
2024-08-20 02:28:12,942:INFO:Logical Core: 16
2024-08-20 02:28:12,942:INFO:Checking libraries
2024-08-20 02:28:12,942:INFO:System:
2024-08-20 02:28:12,942:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:28:12,943:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:28:12,943:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:28:12,943:INFO:PyCaret required dependencies:
2024-08-20 02:28:12,943:INFO:                 pip: 23.3.1
2024-08-20 02:28:12,943:INFO:          setuptools: 68.2.2
2024-08-20 02:28:12,943:INFO:             pycaret: 3.3.2
2024-08-20 02:28:12,943:INFO:             IPython: 8.20.0
2024-08-20 02:28:12,943:INFO:          ipywidgets: 7.6.5
2024-08-20 02:28:12,943:INFO:                tqdm: 4.65.0
2024-08-20 02:28:12,943:INFO:               numpy: 1.26.4
2024-08-20 02:28:12,944:INFO:              pandas: 2.1.4
2024-08-20 02:28:12,944:INFO:              jinja2: 3.1.3
2024-08-20 02:28:12,944:INFO:               scipy: 1.11.4
2024-08-20 02:28:12,944:INFO:              joblib: 1.2.0
2024-08-20 02:28:12,944:INFO:             sklearn: 1.2.2
2024-08-20 02:28:12,944:INFO:                pyod: 2.0.1
2024-08-20 02:28:12,944:INFO:            imblearn: 0.11.0
2024-08-20 02:28:12,944:INFO:   category_encoders: 2.6.3
2024-08-20 02:28:12,944:INFO:            lightgbm: 4.4.0
2024-08-20 02:28:12,944:INFO:               numba: 0.59.0
2024-08-20 02:28:12,944:INFO:            requests: 2.31.0
2024-08-20 02:28:12,944:INFO:          matplotlib: 3.8.0
2024-08-20 02:28:12,944:INFO:          scikitplot: 0.3.7
2024-08-20 02:28:12,944:INFO:         yellowbrick: 1.5
2024-08-20 02:28:12,944:INFO:              plotly: 5.9.0
2024-08-20 02:28:12,945:INFO:    plotly-resampler: Not installed
2024-08-20 02:28:12,945:INFO:             kaleido: 0.2.1
2024-08-20 02:28:12,945:INFO:           schemdraw: 0.15
2024-08-20 02:28:12,945:INFO:         statsmodels: 0.14.0
2024-08-20 02:28:12,945:INFO:              sktime: 0.26.0
2024-08-20 02:28:12,945:INFO:               tbats: 1.1.3
2024-08-20 02:28:12,945:INFO:            pmdarima: 2.0.4
2024-08-20 02:28:12,945:INFO:              psutil: 5.9.0
2024-08-20 02:28:12,945:INFO:          markupsafe: 2.1.3
2024-08-20 02:28:12,945:INFO:             pickle5: Not installed
2024-08-20 02:28:12,945:INFO:         cloudpickle: 2.2.1
2024-08-20 02:28:12,945:INFO:         deprecation: 2.1.0
2024-08-20 02:28:12,945:INFO:              xxhash: 3.4.1
2024-08-20 02:28:12,945:INFO:           wurlitzer: Not installed
2024-08-20 02:28:12,946:INFO:PyCaret optional dependencies:
2024-08-20 02:28:12,946:INFO:                shap: 0.44.1
2024-08-20 02:28:12,946:INFO:           interpret: 0.6.2
2024-08-20 02:28:12,946:INFO:                umap: 0.5.6
2024-08-20 02:28:12,946:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:28:12,946:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:28:12,946:INFO:             autoviz: Not installed
2024-08-20 02:28:12,946:INFO:           fairlearn: 0.7.0
2024-08-20 02:28:12,946:INFO:          deepchecks: Not installed
2024-08-20 02:28:12,946:INFO:             xgboost: 2.1.0
2024-08-20 02:28:12,946:INFO:            catboost: 1.2.5
2024-08-20 02:28:12,946:INFO:              kmodes: 0.12.2
2024-08-20 02:28:12,946:INFO:             mlxtend: 0.23.1
2024-08-20 02:28:12,946:INFO:       statsforecast: 1.5.0
2024-08-20 02:28:12,946:INFO:        tune_sklearn: Not installed
2024-08-20 02:28:12,946:INFO:                 ray: Not installed
2024-08-20 02:28:12,947:INFO:            hyperopt: 0.2.7
2024-08-20 02:28:12,947:INFO:              optuna: 3.6.1
2024-08-20 02:28:12,947:INFO:               skopt: 0.10.2
2024-08-20 02:28:12,947:INFO:              mlflow: 2.14.2
2024-08-20 02:28:12,947:INFO:              gradio: 4.37.2
2024-08-20 02:28:12,947:INFO:             fastapi: 0.111.0
2024-08-20 02:28:12,947:INFO:             uvicorn: 0.30.1
2024-08-20 02:28:12,947:INFO:              m2cgen: 0.10.0
2024-08-20 02:28:12,947:INFO:           evidently: 0.4.30
2024-08-20 02:28:12,947:INFO:               fugue: 0.8.7
2024-08-20 02:28:12,947:INFO:           streamlit: 1.30.0
2024-08-20 02:28:12,947:INFO:             prophet: Not installed
2024-08-20 02:28:12,947:INFO:None
2024-08-20 02:28:12,947:INFO:Set up data.
2024-08-20 02:28:12,983:INFO:Set up folding strategy.
2024-08-20 02:28:12,983:INFO:Set up train/test split.
2024-08-20 02:28:13,004:INFO:Set up index.
2024-08-20 02:28:13,004:INFO:Assigning column types.
2024-08-20 02:28:44,257:INFO:PyCaret ClassificationExperiment
2024-08-20 02:28:44,257:INFO:Logging name: clf-default-name
2024-08-20 02:28:44,258:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:28:44,258:INFO:version 3.3.2
2024-08-20 02:28:44,258:INFO:Initializing setup()
2024-08-20 02:28:44,258:INFO:self.USI: af8c
2024-08-20 02:28:44,258:INFO:self._variable_keys: {'exp_name_log', 'pipeline', 'exp_id', 'target_param', 'X_train', 'logging_param', 'y', '_available_plots', 'X', 'X_test', 'log_plots_param', 'seed', 'data', 'y_train', 'fold_generator', 'fold_groups_param', 'fold_shuffle_param', 'idx', 'fix_imbalance', 'is_multiclass', 'gpu_param', 'USI', 'memory', 'html_param', 'n_jobs_param', 'y_test', '_ml_usecase', 'gpu_n_jobs_param'}
2024-08-20 02:28:44,258:INFO:Checking environment
2024-08-20 02:28:44,258:INFO:python_version: 3.11.7
2024-08-20 02:28:44,258:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:28:44,258:INFO:machine: AMD64
2024-08-20 02:28:44,258:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:28:44,258:INFO:Memory: svmem(total=16890978304, available=5033779200, percent=70.2, used=11857199104, free=5033779200)
2024-08-20 02:28:44,259:INFO:Physical Core: 12
2024-08-20 02:28:44,259:INFO:Logical Core: 16
2024-08-20 02:28:44,259:INFO:Checking libraries
2024-08-20 02:28:44,259:INFO:System:
2024-08-20 02:28:44,259:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:28:44,259:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:28:44,259:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:28:44,259:INFO:PyCaret required dependencies:
2024-08-20 02:28:44,259:INFO:                 pip: 23.3.1
2024-08-20 02:28:44,259:INFO:          setuptools: 68.2.2
2024-08-20 02:28:44,259:INFO:             pycaret: 3.3.2
2024-08-20 02:28:44,260:INFO:             IPython: 8.20.0
2024-08-20 02:28:44,260:INFO:          ipywidgets: 7.6.5
2024-08-20 02:28:44,260:INFO:                tqdm: 4.65.0
2024-08-20 02:28:44,260:INFO:               numpy: 1.26.4
2024-08-20 02:28:44,260:INFO:              pandas: 2.1.4
2024-08-20 02:28:44,260:INFO:              jinja2: 3.1.3
2024-08-20 02:28:44,260:INFO:               scipy: 1.11.4
2024-08-20 02:28:44,260:INFO:              joblib: 1.2.0
2024-08-20 02:28:44,260:INFO:             sklearn: 1.2.2
2024-08-20 02:28:44,260:INFO:                pyod: 2.0.1
2024-08-20 02:28:44,260:INFO:            imblearn: 0.11.0
2024-08-20 02:28:44,260:INFO:   category_encoders: 2.6.3
2024-08-20 02:28:44,260:INFO:            lightgbm: 4.4.0
2024-08-20 02:28:44,260:INFO:               numba: 0.59.0
2024-08-20 02:28:44,261:INFO:            requests: 2.31.0
2024-08-20 02:28:44,261:INFO:          matplotlib: 3.8.0
2024-08-20 02:28:44,261:INFO:          scikitplot: 0.3.7
2024-08-20 02:28:44,261:INFO:         yellowbrick: 1.5
2024-08-20 02:28:44,261:INFO:              plotly: 5.9.0
2024-08-20 02:28:44,261:INFO:    plotly-resampler: Not installed
2024-08-20 02:28:44,261:INFO:             kaleido: 0.2.1
2024-08-20 02:28:44,261:INFO:           schemdraw: 0.15
2024-08-20 02:28:44,261:INFO:         statsmodels: 0.14.0
2024-08-20 02:28:44,261:INFO:              sktime: 0.26.0
2024-08-20 02:28:44,261:INFO:               tbats: 1.1.3
2024-08-20 02:28:44,261:INFO:            pmdarima: 2.0.4
2024-08-20 02:28:44,261:INFO:              psutil: 5.9.0
2024-08-20 02:28:44,261:INFO:          markupsafe: 2.1.3
2024-08-20 02:28:44,262:INFO:             pickle5: Not installed
2024-08-20 02:28:44,262:INFO:         cloudpickle: 2.2.1
2024-08-20 02:28:44,262:INFO:         deprecation: 2.1.0
2024-08-20 02:28:44,262:INFO:              xxhash: 3.4.1
2024-08-20 02:28:44,262:INFO:           wurlitzer: Not installed
2024-08-20 02:28:44,262:INFO:PyCaret optional dependencies:
2024-08-20 02:28:44,262:INFO:                shap: 0.44.1
2024-08-20 02:28:44,262:INFO:           interpret: 0.6.2
2024-08-20 02:28:44,262:INFO:                umap: 0.5.6
2024-08-20 02:28:44,262:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:28:44,262:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:28:44,262:INFO:             autoviz: Not installed
2024-08-20 02:28:44,262:INFO:           fairlearn: 0.7.0
2024-08-20 02:28:44,262:INFO:          deepchecks: Not installed
2024-08-20 02:28:44,262:INFO:             xgboost: 2.1.0
2024-08-20 02:28:44,262:INFO:            catboost: 1.2.5
2024-08-20 02:28:44,262:INFO:              kmodes: 0.12.2
2024-08-20 02:28:44,262:INFO:             mlxtend: 0.23.1
2024-08-20 02:28:44,262:INFO:       statsforecast: 1.5.0
2024-08-20 02:28:44,262:INFO:        tune_sklearn: Not installed
2024-08-20 02:28:44,262:INFO:                 ray: Not installed
2024-08-20 02:28:44,262:INFO:            hyperopt: 0.2.7
2024-08-20 02:28:44,263:INFO:              optuna: 3.6.1
2024-08-20 02:28:44,263:INFO:               skopt: 0.10.2
2024-08-20 02:28:44,263:INFO:              mlflow: 2.14.2
2024-08-20 02:28:44,263:INFO:              gradio: 4.37.2
2024-08-20 02:28:44,263:INFO:             fastapi: 0.111.0
2024-08-20 02:28:44,263:INFO:             uvicorn: 0.30.1
2024-08-20 02:28:44,263:INFO:              m2cgen: 0.10.0
2024-08-20 02:28:44,263:INFO:           evidently: 0.4.30
2024-08-20 02:28:44,263:INFO:               fugue: 0.8.7
2024-08-20 02:28:44,263:INFO:           streamlit: 1.30.0
2024-08-20 02:28:44,263:INFO:             prophet: Not installed
2024-08-20 02:28:44,263:INFO:None
2024-08-20 02:28:44,263:INFO:Set up data.
2024-08-20 02:28:44,302:INFO:Set up folding strategy.
2024-08-20 02:28:44,303:INFO:Set up train/test split.
2024-08-20 02:28:44,325:INFO:Set up index.
2024-08-20 02:28:44,325:INFO:Assigning column types.
2024-08-20 02:28:44,330:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 02:28:44,437:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:28:44,442:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:28:44,533:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:44,539:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:44,724:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:28:44,726:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:28:44,796:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:44,802:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:44,803:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 02:28:44,919:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:28:44,992:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:44,999:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:45,118:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 02:28:45,186:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:45,193:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:45,194:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-08-20 02:28:45,371:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:45,376:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:45,558:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:45,564:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:45,568:INFO:Preparing preprocessing pipeline...
2024-08-20 02:28:45,570:INFO:Set up label encoding.
2024-08-20 02:28:45,570:INFO:Set up simple imputation.
2024-08-20 02:28:45,581:INFO:Set up encoding of ordinal features.
2024-08-20 02:28:45,590:INFO:Set up encoding of categorical features.
2024-08-20 02:28:45,592:INFO:Set up column name cleaning.
2024-08-20 02:28:45,986:INFO:Finished creating preprocessing pipeline.
2024-08-20 02:28:46,119:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-08-20 02:28:46,120:INFO:Creating final display dataframe.
2024-08-20 02:28:47,367:INFO:Setup _display_container:                     Description                    Value
0                    Session id                      123
1                        Target                    class
2                   Target type                   Binary
3                Target mapping  edible: 0, poisonous: 1
4           Original data shape               (8124, 23)
5        Transformed data shape              (8124, 111)
6   Transformed train set shape              (5686, 111)
7    Transformed test set shape              (2438, 111)
8          Categorical features                       22
9      Rows with missing values                     2.4%
10                   Preprocess                     True
11              Imputation type                   simple
12           Numeric imputation                     mean
13       Categorical imputation                     mode
14     Maximum one-hot encoding                       25
15              Encoding method                     None
16               Fold Generator          StratifiedKFold
17                  Fold Number                       10
18                     CPU Jobs                       -1
19                      Use GPU                    False
20               Log Experiment                    False
21              Experiment Name         clf-default-name
22                          USI                     af8c
2024-08-20 02:28:47,571:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:47,577:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:47,767:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:28:47,773:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:28:47,775:INFO:setup() successfully completed in 3.56s...............
2024-08-20 02:28:47,775:INFO:Initializing compare_models()
2024-08-20 02:28:47,775:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-08-20 02:28:47,775:INFO:Checking exceptions
2024-08-20 02:28:47,782:INFO:Preparing display monitor
2024-08-20 02:28:47,819:INFO:Initializing Logistic Regression
2024-08-20 02:28:47,820:INFO:Total runtime is 1.7952919006347656e-05 minutes
2024-08-20 02:28:47,827:INFO:SubProcess create_model() called ==================================
2024-08-20 02:28:47,827:INFO:Initializing create_model()
2024-08-20 02:28:47,827:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:28:47,828:INFO:Checking exceptions
2024-08-20 02:28:47,828:INFO:Importing libraries
2024-08-20 02:28:47,828:INFO:Copying training dataset
2024-08-20 02:28:47,843:INFO:Defining folds
2024-08-20 02:28:47,843:INFO:Declaring metric variables
2024-08-20 02:28:47,850:INFO:Importing untrained model
2024-08-20 02:28:47,857:INFO:Logistic Regression Imported successfully
2024-08-20 02:28:47,872:INFO:Starting cross validation
2024-08-20 02:28:47,884:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:28:58,680:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,684:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,693:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,697:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,708:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,716:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,756:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,767:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,779:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,790:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,793:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,803:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,810:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,814:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,822:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,840:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,851:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,857:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,861:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,878:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,890:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,898:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,901:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,915:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,917:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,930:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,932:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,971:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,984:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:58,997:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:28:59,016:INFO:Calculating mean and std
2024-08-20 02:28:59,018:INFO:Creating metrics dataframe
2024-08-20 02:28:59,023:INFO:Uploading results into container
2024-08-20 02:28:59,024:INFO:Uploading model into container now
2024-08-20 02:28:59,024:INFO:_master_model_container: 1
2024-08-20 02:28:59,026:INFO:_display_container: 2
2024-08-20 02:28:59,026:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-08-20 02:28:59,026:INFO:create_model() successfully completed......................................
2024-08-20 02:28:59,411:INFO:SubProcess create_model() end ==================================
2024-08-20 02:28:59,411:INFO:Creating metrics dataframe
2024-08-20 02:28:59,423:INFO:Initializing K Neighbors Classifier
2024-08-20 02:28:59,423:INFO:Total runtime is 0.1933958649635315 minutes
2024-08-20 02:28:59,429:INFO:SubProcess create_model() called ==================================
2024-08-20 02:28:59,429:INFO:Initializing create_model()
2024-08-20 02:28:59,429:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:28:59,429:INFO:Checking exceptions
2024-08-20 02:28:59,430:INFO:Importing libraries
2024-08-20 02:28:59,430:INFO:Copying training dataset
2024-08-20 02:28:59,441:INFO:Defining folds
2024-08-20 02:28:59,442:INFO:Declaring metric variables
2024-08-20 02:28:59,447:INFO:Importing untrained model
2024-08-20 02:28:59,452:INFO:K Neighbors Classifier Imported successfully
2024-08-20 02:28:59,464:INFO:Starting cross validation
2024-08-20 02:28:59,471:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:01,715:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,719:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,731:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,734:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,735:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,746:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,747:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,753:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,754:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,768:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,774:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:01,784:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,751:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,763:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,776:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,808:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,820:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,832:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,942:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,951:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,957:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,961:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,968:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,980:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,981:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:09,991:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:10,001:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:10,007:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:10,019:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:10,030:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:10,048:INFO:Calculating mean and std
2024-08-20 02:29:10,050:INFO:Creating metrics dataframe
2024-08-20 02:29:10,054:INFO:Uploading results into container
2024-08-20 02:29:10,056:INFO:Uploading model into container now
2024-08-20 02:29:10,057:INFO:_master_model_container: 2
2024-08-20 02:29:10,057:INFO:_display_container: 2
2024-08-20 02:29:10,058:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 02:29:10,058:INFO:create_model() successfully completed......................................
2024-08-20 02:29:10,285:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:10,286:INFO:Creating metrics dataframe
2024-08-20 02:29:10,302:INFO:Initializing Naive Bayes
2024-08-20 02:29:10,302:INFO:Total runtime is 0.37471945683161423 minutes
2024-08-20 02:29:10,308:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:10,309:INFO:Initializing create_model()
2024-08-20 02:29:10,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:10,309:INFO:Checking exceptions
2024-08-20 02:29:10,309:INFO:Importing libraries
2024-08-20 02:29:10,309:INFO:Copying training dataset
2024-08-20 02:29:10,324:INFO:Defining folds
2024-08-20 02:29:10,324:INFO:Declaring metric variables
2024-08-20 02:29:10,332:INFO:Importing untrained model
2024-08-20 02:29:10,341:INFO:Naive Bayes Imported successfully
2024-08-20 02:29:10,358:INFO:Starting cross validation
2024-08-20 02:29:10,366:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:11,931:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,937:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,952:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,952:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,976:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,977:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,981:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,987:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,994:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:11,995:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,003:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,003:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,004:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,015:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,019:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,020:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,021:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,023:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,028:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,036:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,037:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,041:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,043:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,046:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,050:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,058:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,062:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:12,080:INFO:Calculating mean and std
2024-08-20 02:29:12,083:INFO:Creating metrics dataframe
2024-08-20 02:29:12,088:INFO:Uploading results into container
2024-08-20 02:29:12,090:INFO:Uploading model into container now
2024-08-20 02:29:12,091:INFO:_master_model_container: 3
2024-08-20 02:29:12,091:INFO:_display_container: 2
2024-08-20 02:29:12,092:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-08-20 02:29:12,092:INFO:create_model() successfully completed......................................
2024-08-20 02:29:12,349:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:12,350:INFO:Creating metrics dataframe
2024-08-20 02:29:12,370:INFO:Initializing Decision Tree Classifier
2024-08-20 02:29:12,370:INFO:Total runtime is 0.40918547312418624 minutes
2024-08-20 02:29:12,376:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:12,376:INFO:Initializing create_model()
2024-08-20 02:29:12,376:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:12,377:INFO:Checking exceptions
2024-08-20 02:29:12,377:INFO:Importing libraries
2024-08-20 02:29:12,377:INFO:Copying training dataset
2024-08-20 02:29:12,390:INFO:Defining folds
2024-08-20 02:29:12,390:INFO:Declaring metric variables
2024-08-20 02:29:12,400:INFO:Importing untrained model
2024-08-20 02:29:12,409:INFO:Decision Tree Classifier Imported successfully
2024-08-20 02:29:12,425:INFO:Starting cross validation
2024-08-20 02:29:12,434:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:14,252:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,258:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,269:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,273:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,275:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,295:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,296:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,311:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,312:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,313:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,310:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,321:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,327:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,334:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,335:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,338:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,346:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,351:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,358:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,362:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,363:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,374:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,375:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,378:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,385:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,392:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,395:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,402:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,409:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,417:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:14,437:INFO:Calculating mean and std
2024-08-20 02:29:14,440:INFO:Creating metrics dataframe
2024-08-20 02:29:14,443:INFO:Uploading results into container
2024-08-20 02:29:14,444:INFO:Uploading model into container now
2024-08-20 02:29:14,444:INFO:_master_model_container: 4
2024-08-20 02:29:14,445:INFO:_display_container: 2
2024-08-20 02:29:14,446:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 02:29:14,446:INFO:create_model() successfully completed......................................
2024-08-20 02:29:14,693:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:14,694:INFO:Creating metrics dataframe
2024-08-20 02:29:14,715:INFO:Initializing SVM - Linear Kernel
2024-08-20 02:29:14,716:INFO:Total runtime is 0.4482845783233643 minutes
2024-08-20 02:29:14,723:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:14,723:INFO:Initializing create_model()
2024-08-20 02:29:14,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:14,723:INFO:Checking exceptions
2024-08-20 02:29:14,723:INFO:Importing libraries
2024-08-20 02:29:14,724:INFO:Copying training dataset
2024-08-20 02:29:14,739:INFO:Defining folds
2024-08-20 02:29:14,740:INFO:Declaring metric variables
2024-08-20 02:29:14,746:INFO:Importing untrained model
2024-08-20 02:29:14,753:INFO:SVM - Linear Kernel Imported successfully
2024-08-20 02:29:14,769:INFO:Starting cross validation
2024-08-20 02:29:14,778:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:16,480:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,494:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,501:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,505:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,505:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,508:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,508:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,514:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,516:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,520:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,520:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,524:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,526:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,533:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,536:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,536:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,537:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,540:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,545:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,552:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,553:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,556:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,556:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,561:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,564:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,568:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,572:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,576:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,581:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,586:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:16,600:INFO:Calculating mean and std
2024-08-20 02:29:16,603:INFO:Creating metrics dataframe
2024-08-20 02:29:16,608:INFO:Uploading results into container
2024-08-20 02:29:16,610:INFO:Uploading model into container now
2024-08-20 02:29:16,611:INFO:_master_model_container: 5
2024-08-20 02:29:16,611:INFO:_display_container: 2
2024-08-20 02:29:16,613:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-08-20 02:29:16,613:INFO:create_model() successfully completed......................................
2024-08-20 02:29:16,877:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:16,877:INFO:Creating metrics dataframe
2024-08-20 02:29:16,897:INFO:Initializing Ridge Classifier
2024-08-20 02:29:16,898:INFO:Total runtime is 0.48465377887090055 minutes
2024-08-20 02:29:16,905:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:16,906:INFO:Initializing create_model()
2024-08-20 02:29:16,906:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:16,907:INFO:Checking exceptions
2024-08-20 02:29:16,907:INFO:Importing libraries
2024-08-20 02:29:16,907:INFO:Copying training dataset
2024-08-20 02:29:16,922:INFO:Defining folds
2024-08-20 02:29:16,922:INFO:Declaring metric variables
2024-08-20 02:29:16,929:INFO:Importing untrained model
2024-08-20 02:29:16,936:INFO:Ridge Classifier Imported successfully
2024-08-20 02:29:16,950:INFO:Starting cross validation
2024-08-20 02:29:16,962:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:18,555:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,568:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,581:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,591:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,607:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,615:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,617:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,619:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,621:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,625:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,625:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,626:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,629:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,632:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,636:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,637:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,637:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,637:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,639:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,639:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,650:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,650:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,651:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,651:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,651:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,661:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,662:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,668:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,673:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,686:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:18,708:INFO:Calculating mean and std
2024-08-20 02:29:18,711:INFO:Creating metrics dataframe
2024-08-20 02:29:18,716:INFO:Uploading results into container
2024-08-20 02:29:18,717:INFO:Uploading model into container now
2024-08-20 02:29:18,718:INFO:_master_model_container: 6
2024-08-20 02:29:18,718:INFO:_display_container: 2
2024-08-20 02:29:18,719:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-08-20 02:29:18,720:INFO:create_model() successfully completed......................................
2024-08-20 02:29:18,949:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:18,949:INFO:Creating metrics dataframe
2024-08-20 02:29:18,966:INFO:Initializing Random Forest Classifier
2024-08-20 02:29:18,966:INFO:Total runtime is 0.519119954109192 minutes
2024-08-20 02:29:18,973:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:18,974:INFO:Initializing create_model()
2024-08-20 02:29:18,974:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:18,974:INFO:Checking exceptions
2024-08-20 02:29:18,974:INFO:Importing libraries
2024-08-20 02:29:18,974:INFO:Copying training dataset
2024-08-20 02:29:18,990:INFO:Defining folds
2024-08-20 02:29:18,990:INFO:Declaring metric variables
2024-08-20 02:29:18,998:INFO:Importing untrained model
2024-08-20 02:29:19,006:INFO:Random Forest Classifier Imported successfully
2024-08-20 02:29:19,019:INFO:Starting cross validation
2024-08-20 02:29:19,029:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:21,593:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,601:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,605:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,611:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,614:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,623:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,626:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,629:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,630:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,640:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,642:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,657:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,706:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,718:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,732:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,780:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,786:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,794:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,798:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,810:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,812:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,831:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,845:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,859:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,859:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,873:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,885:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,901:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,914:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,926:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:21,947:INFO:Calculating mean and std
2024-08-20 02:29:21,949:INFO:Creating metrics dataframe
2024-08-20 02:29:21,953:INFO:Uploading results into container
2024-08-20 02:29:21,954:INFO:Uploading model into container now
2024-08-20 02:29:21,955:INFO:_master_model_container: 7
2024-08-20 02:29:21,955:INFO:_display_container: 2
2024-08-20 02:29:21,956:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-08-20 02:29:21,956:INFO:create_model() successfully completed......................................
2024-08-20 02:29:22,199:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:22,200:INFO:Creating metrics dataframe
2024-08-20 02:29:22,215:INFO:Initializing Quadratic Discriminant Analysis
2024-08-20 02:29:22,216:INFO:Total runtime is 0.5732869982719422 minutes
2024-08-20 02:29:22,223:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:22,224:INFO:Initializing create_model()
2024-08-20 02:29:22,224:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:22,224:INFO:Checking exceptions
2024-08-20 02:29:22,224:INFO:Importing libraries
2024-08-20 02:29:22,224:INFO:Copying training dataset
2024-08-20 02:29:22,239:INFO:Defining folds
2024-08-20 02:29:22,240:INFO:Declaring metric variables
2024-08-20 02:29:22,245:INFO:Importing untrained model
2024-08-20 02:29:22,250:INFO:Quadratic Discriminant Analysis Imported successfully
2024-08-20 02:29:22,259:INFO:Starting cross validation
2024-08-20 02:29:22,266:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:23,687:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,688:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,688:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,691:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,701:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,727:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,772:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,822:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:23,850:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 02:29:24,004:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,007:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,007:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,016:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,019:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,019:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,025:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,036:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,036:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,037:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,039:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,048:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,052:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,061:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,065:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,066:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,081:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,090:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,094:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,102:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,105:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,112:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,115:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,129:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,138:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,143:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,158:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,174:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:24,199:INFO:Calculating mean and std
2024-08-20 02:29:24,202:INFO:Creating metrics dataframe
2024-08-20 02:29:24,206:INFO:Uploading results into container
2024-08-20 02:29:24,206:INFO:Uploading model into container now
2024-08-20 02:29:24,207:INFO:_master_model_container: 8
2024-08-20 02:29:24,207:INFO:_display_container: 2
2024-08-20 02:29:24,208:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-08-20 02:29:24,208:INFO:create_model() successfully completed......................................
2024-08-20 02:29:24,460:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:24,462:INFO:Creating metrics dataframe
2024-08-20 02:29:24,482:INFO:Initializing Ada Boost Classifier
2024-08-20 02:29:24,482:INFO:Total runtime is 0.6110578695933024 minutes
2024-08-20 02:29:24,490:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:24,490:INFO:Initializing create_model()
2024-08-20 02:29:24,490:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:24,490:INFO:Checking exceptions
2024-08-20 02:29:24,490:INFO:Importing libraries
2024-08-20 02:29:24,490:INFO:Copying training dataset
2024-08-20 02:29:24,505:INFO:Defining folds
2024-08-20 02:29:24,506:INFO:Declaring metric variables
2024-08-20 02:29:24,511:INFO:Importing untrained model
2024-08-20 02:29:24,519:INFO:Ada Boost Classifier Imported successfully
2024-08-20 02:29:24,534:INFO:Starting cross validation
2024-08-20 02:29:24,544:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:25,841:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,842:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,843:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,853:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,880:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,883:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,884:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,897:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,909:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:25,945:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 02:29:27,586:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,588:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,601:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,615:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,617:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,620:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,631:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,635:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,640:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,641:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,645:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,648:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,652:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,654:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,657:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,661:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,666:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,667:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,672:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,676:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,685:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,691:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,697:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,705:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,710:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,717:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,721:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,725:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,737:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,750:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:27,766:INFO:Calculating mean and std
2024-08-20 02:29:27,769:INFO:Creating metrics dataframe
2024-08-20 02:29:27,774:INFO:Uploading results into container
2024-08-20 02:29:27,775:INFO:Uploading model into container now
2024-08-20 02:29:27,776:INFO:_master_model_container: 9
2024-08-20 02:29:27,776:INFO:_display_container: 2
2024-08-20 02:29:27,777:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-08-20 02:29:27,777:INFO:create_model() successfully completed......................................
2024-08-20 02:29:28,025:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:28,026:INFO:Creating metrics dataframe
2024-08-20 02:29:28,047:INFO:Initializing Gradient Boosting Classifier
2024-08-20 02:29:28,047:INFO:Total runtime is 0.6704618732134502 minutes
2024-08-20 02:29:28,054:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:28,054:INFO:Initializing create_model()
2024-08-20 02:29:28,054:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:28,055:INFO:Checking exceptions
2024-08-20 02:29:28,055:INFO:Importing libraries
2024-08-20 02:29:28,055:INFO:Copying training dataset
2024-08-20 02:29:28,064:INFO:Defining folds
2024-08-20 02:29:28,065:INFO:Declaring metric variables
2024-08-20 02:29:28,069:INFO:Importing untrained model
2024-08-20 02:29:28,074:INFO:Gradient Boosting Classifier Imported successfully
2024-08-20 02:29:28,084:INFO:Starting cross validation
2024-08-20 02:29:28,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:32,391:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,410:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,415:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,428:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,429:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,430:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,442:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,443:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,456:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,470:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,482:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,488:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,494:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,500:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,500:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,508:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,510:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,513:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,517:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,520:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,521:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,522:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,530:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,534:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,535:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,536:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,545:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,548:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,558:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,568:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:32,585:INFO:Calculating mean and std
2024-08-20 02:29:32,587:INFO:Creating metrics dataframe
2024-08-20 02:29:32,590:INFO:Uploading results into container
2024-08-20 02:29:32,591:INFO:Uploading model into container now
2024-08-20 02:29:32,591:INFO:_master_model_container: 10
2024-08-20 02:29:32,592:INFO:_display_container: 2
2024-08-20 02:29:32,592:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-08-20 02:29:32,592:INFO:create_model() successfully completed......................................
2024-08-20 02:29:32,840:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:32,840:INFO:Creating metrics dataframe
2024-08-20 02:29:32,856:INFO:Initializing Linear Discriminant Analysis
2024-08-20 02:29:32,857:INFO:Total runtime is 0.7506381551424663 minutes
2024-08-20 02:29:32,862:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:32,863:INFO:Initializing create_model()
2024-08-20 02:29:32,863:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:32,863:INFO:Checking exceptions
2024-08-20 02:29:32,863:INFO:Importing libraries
2024-08-20 02:29:32,864:INFO:Copying training dataset
2024-08-20 02:29:32,874:INFO:Defining folds
2024-08-20 02:29:32,874:INFO:Declaring metric variables
2024-08-20 02:29:32,879:INFO:Importing untrained model
2024-08-20 02:29:32,884:INFO:Linear Discriminant Analysis Imported successfully
2024-08-20 02:29:32,896:INFO:Starting cross validation
2024-08-20 02:29:32,906:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:34,781:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,796:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,806:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,816:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,817:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,821:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,822:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,824:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,829:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,830:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,836:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,837:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,838:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,838:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,849:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,850:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,851:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,851:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,858:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,863:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,869:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,870:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,876:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,880:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,888:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,889:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,899:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,900:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,912:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,924:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:34,943:INFO:Calculating mean and std
2024-08-20 02:29:34,944:INFO:Creating metrics dataframe
2024-08-20 02:29:34,947:INFO:Uploading results into container
2024-08-20 02:29:34,948:INFO:Uploading model into container now
2024-08-20 02:29:34,949:INFO:_master_model_container: 11
2024-08-20 02:29:34,950:INFO:_display_container: 2
2024-08-20 02:29:34,950:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-08-20 02:29:34,952:INFO:create_model() successfully completed......................................
2024-08-20 02:29:35,171:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:35,171:INFO:Creating metrics dataframe
2024-08-20 02:29:35,190:INFO:Initializing Extra Trees Classifier
2024-08-20 02:29:35,190:INFO:Total runtime is 0.7895240902900696 minutes
2024-08-20 02:29:35,197:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:35,198:INFO:Initializing create_model()
2024-08-20 02:29:35,198:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:35,198:INFO:Checking exceptions
2024-08-20 02:29:35,198:INFO:Importing libraries
2024-08-20 02:29:35,198:INFO:Copying training dataset
2024-08-20 02:29:35,213:INFO:Defining folds
2024-08-20 02:29:35,213:INFO:Declaring metric variables
2024-08-20 02:29:35,222:INFO:Importing untrained model
2024-08-20 02:29:35,231:INFO:Extra Trees Classifier Imported successfully
2024-08-20 02:29:35,248:INFO:Starting cross validation
2024-08-20 02:29:35,258:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:37,744:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,751:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,753:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,758:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,767:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,768:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,774:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,778:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,781:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,782:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,783:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,787:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,790:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,804:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,807:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,840:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,850:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,860:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,894:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,895:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,905:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,905:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,907:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,913:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,917:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,920:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,928:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,953:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,963:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,972:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:37,987:INFO:Calculating mean and std
2024-08-20 02:29:37,989:INFO:Creating metrics dataframe
2024-08-20 02:29:37,993:INFO:Uploading results into container
2024-08-20 02:29:37,994:INFO:Uploading model into container now
2024-08-20 02:29:37,995:INFO:_master_model_container: 12
2024-08-20 02:29:37,995:INFO:_display_container: 2
2024-08-20 02:29:37,995:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-08-20 02:29:37,996:INFO:create_model() successfully completed......................................
2024-08-20 02:29:38,229:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:38,229:INFO:Creating metrics dataframe
2024-08-20 02:29:38,248:INFO:Initializing Extreme Gradient Boosting
2024-08-20 02:29:38,248:INFO:Total runtime is 0.840490718682607 minutes
2024-08-20 02:29:38,255:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:38,255:INFO:Initializing create_model()
2024-08-20 02:29:38,255:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:38,255:INFO:Checking exceptions
2024-08-20 02:29:38,255:INFO:Importing libraries
2024-08-20 02:29:38,255:INFO:Copying training dataset
2024-08-20 02:29:38,268:INFO:Defining folds
2024-08-20 02:29:38,268:INFO:Declaring metric variables
2024-08-20 02:29:38,274:INFO:Importing untrained model
2024-08-20 02:29:38,279:INFO:Extreme Gradient Boosting Imported successfully
2024-08-20 02:29:38,288:INFO:Starting cross validation
2024-08-20 02:29:38,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:40,607:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,622:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,630:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,646:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,652:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,655:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,665:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,668:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,676:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,683:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,684:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,694:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,696:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,698:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,701:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,710:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,710:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,711:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,716:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,720:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,724:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,725:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,732:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,745:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,747:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,758:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,772:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,834:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,844:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,852:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:40,866:INFO:Calculating mean and std
2024-08-20 02:29:40,867:INFO:Creating metrics dataframe
2024-08-20 02:29:40,871:INFO:Uploading results into container
2024-08-20 02:29:40,872:INFO:Uploading model into container now
2024-08-20 02:29:40,872:INFO:_master_model_container: 13
2024-08-20 02:29:40,872:INFO:_display_container: 2
2024-08-20 02:29:40,874:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-08-20 02:29:40,874:INFO:create_model() successfully completed......................................
2024-08-20 02:29:41,106:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:41,106:INFO:Creating metrics dataframe
2024-08-20 02:29:41,130:INFO:Initializing Light Gradient Boosting Machine
2024-08-20 02:29:41,130:INFO:Total runtime is 0.8885103265444438 minutes
2024-08-20 02:29:41,136:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:41,137:INFO:Initializing create_model()
2024-08-20 02:29:41,137:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:41,137:INFO:Checking exceptions
2024-08-20 02:29:41,137:INFO:Importing libraries
2024-08-20 02:29:41,137:INFO:Copying training dataset
2024-08-20 02:29:41,149:INFO:Defining folds
2024-08-20 02:29:41,149:INFO:Declaring metric variables
2024-08-20 02:29:41,154:INFO:Importing untrained model
2024-08-20 02:29:41,162:INFO:Light Gradient Boosting Machine Imported successfully
2024-08-20 02:29:41,176:INFO:Starting cross validation
2024-08-20 02:29:41,182:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:29:46,730:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:46,739:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:46,749:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,184:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,194:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,205:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,247:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,252:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,258:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,264:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,269:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,275:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,276:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,286:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,297:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,330:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,330:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,339:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,340:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,359:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,546:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,556:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,564:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,566:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,572:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,580:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:29:47,596:INFO:Calculating mean and std
2024-08-20 02:29:47,598:INFO:Creating metrics dataframe
2024-08-20 02:29:47,601:INFO:Uploading results into container
2024-08-20 02:29:47,601:INFO:Uploading model into container now
2024-08-20 02:29:47,602:INFO:_master_model_container: 14
2024-08-20 02:29:47,602:INFO:_display_container: 2
2024-08-20 02:29:47,603:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-08-20 02:29:47,603:INFO:create_model() successfully completed......................................
2024-08-20 02:29:47,864:INFO:SubProcess create_model() end ==================================
2024-08-20 02:29:47,864:INFO:Creating metrics dataframe
2024-08-20 02:29:47,884:INFO:Initializing CatBoost Classifier
2024-08-20 02:29:47,884:INFO:Total runtime is 1.0010913610458374 minutes
2024-08-20 02:29:47,890:INFO:SubProcess create_model() called ==================================
2024-08-20 02:29:47,890:INFO:Initializing create_model()
2024-08-20 02:29:47,890:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:29:47,890:INFO:Checking exceptions
2024-08-20 02:29:47,891:INFO:Importing libraries
2024-08-20 02:29:47,891:INFO:Copying training dataset
2024-08-20 02:29:47,907:INFO:Defining folds
2024-08-20 02:29:47,907:INFO:Declaring metric variables
2024-08-20 02:29:47,914:INFO:Importing untrained model
2024-08-20 02:29:47,923:INFO:CatBoost Classifier Imported successfully
2024-08-20 02:29:47,939:INFO:Starting cross validation
2024-08-20 02:29:47,951:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:30:02,299:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,314:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,328:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,413:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,428:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,437:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,444:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,451:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,453:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,466:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,471:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,484:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,495:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,509:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,523:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,575:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,588:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,602:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,607:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,622:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,638:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,645:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,662:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,675:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,722:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,733:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,753:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,870:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,883:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,898:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:02,913:INFO:Calculating mean and std
2024-08-20 02:30:02,915:INFO:Creating metrics dataframe
2024-08-20 02:30:02,920:INFO:Uploading results into container
2024-08-20 02:30:02,922:INFO:Uploading model into container now
2024-08-20 02:30:02,923:INFO:_master_model_container: 15
2024-08-20 02:30:02,923:INFO:_display_container: 2
2024-08-20 02:30:02,923:INFO:<catboost.core.CatBoostClassifier object at 0x000001AAF4291C90>
2024-08-20 02:30:02,924:INFO:create_model() successfully completed......................................
2024-08-20 02:30:03,183:INFO:SubProcess create_model() end ==================================
2024-08-20 02:30:03,183:INFO:Creating metrics dataframe
2024-08-20 02:30:03,208:INFO:Initializing Dummy Classifier
2024-08-20 02:30:03,208:INFO:Total runtime is 1.2564789255460103 minutes
2024-08-20 02:30:03,214:INFO:SubProcess create_model() called ==================================
2024-08-20 02:30:03,214:INFO:Initializing create_model()
2024-08-20 02:30:03,215:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AAF4958650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:30:03,215:INFO:Checking exceptions
2024-08-20 02:30:03,215:INFO:Importing libraries
2024-08-20 02:30:03,215:INFO:Copying training dataset
2024-08-20 02:30:03,228:INFO:Defining folds
2024-08-20 02:30:03,228:INFO:Declaring metric variables
2024-08-20 02:30:03,233:INFO:Importing untrained model
2024-08-20 02:30:03,239:INFO:Dummy Classifier Imported successfully
2024-08-20 02:30:03,251:INFO:Starting cross validation
2024-08-20 02:30:03,260:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 02:30:04,946:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:04,965:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:04,972:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:04,980:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:04,989:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,010:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,017:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,018:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,024:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,027:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,038:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,040:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,043:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,044:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,044:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,046:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,047:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,051:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,055:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,056:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,058:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,058:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,059:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,060:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,065:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,066:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,072:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,073:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,075:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,081:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,089:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,092:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,101:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,102:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,111:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,119:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,126:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 02:30:05,134:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 02:30:05,160:INFO:Calculating mean and std
2024-08-20 02:30:05,164:INFO:Creating metrics dataframe
2024-08-20 02:30:05,169:INFO:Uploading results into container
2024-08-20 02:30:05,170:INFO:Uploading model into container now
2024-08-20 02:30:05,172:INFO:_master_model_container: 16
2024-08-20 02:30:05,172:INFO:_display_container: 2
2024-08-20 02:30:05,173:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-08-20 02:30:05,173:INFO:create_model() successfully completed......................................
2024-08-20 02:30:05,455:INFO:SubProcess create_model() end ==================================
2024-08-20 02:30:05,457:INFO:Creating metrics dataframe
2024-08-20 02:30:05,525:INFO:Initializing create_model()
2024-08-20 02:30:05,525:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 02:30:05,525:INFO:Checking exceptions
2024-08-20 02:30:05,528:INFO:Importing libraries
2024-08-20 02:30:05,528:INFO:Copying training dataset
2024-08-20 02:30:05,542:INFO:Defining folds
2024-08-20 02:30:05,542:INFO:Declaring metric variables
2024-08-20 02:30:05,542:INFO:Importing untrained model
2024-08-20 02:30:05,542:INFO:Declaring custom model
2024-08-20 02:30:05,543:INFO:K Neighbors Classifier Imported successfully
2024-08-20 02:30:05,550:INFO:Cross validation set to False
2024-08-20 02:30:05,550:INFO:Fitting Model
2024-08-20 02:30:06,299:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 02:30:06,299:INFO:create_model() successfully completed......................................
2024-08-20 02:30:06,541:INFO:_master_model_container: 16
2024-08-20 02:30:06,542:INFO:_display_container: 2
2024-08-20 02:30:06,543:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 02:30:06,543:INFO:compare_models() successfully completed......................................
2024-08-20 02:31:03,612:INFO:Initializing plot_model()
2024-08-20 02:31:03,612:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 02:31:03,612:INFO:Checking exceptions
2024-08-20 02:31:03,619:INFO:Preloading libraries
2024-08-20 02:31:03,621:INFO:Copying training dataset
2024-08-20 02:31:03,621:INFO:Plot type: auc
2024-08-20 02:31:03,976:INFO:Fitting Model
2024-08-20 02:31:03,978:INFO:Scoring test/hold-out set
2024-08-20 02:31:05,016:INFO:Visual Rendered Successfully
2024-08-20 02:31:05,234:INFO:plot_model() successfully completed......................................
2024-08-20 02:31:05,236:INFO:Initializing evaluate_model()
2024-08-20 02:31:05,237:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 02:31:05,255:INFO:Initializing plot_model()
2024-08-20 02:31:05,255:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 02:31:05,255:INFO:Checking exceptions
2024-08-20 02:31:05,262:INFO:Preloading libraries
2024-08-20 02:31:05,267:INFO:Copying training dataset
2024-08-20 02:31:05,268:INFO:Plot type: pipeline
2024-08-20 02:31:05,684:INFO:Visual Rendered Successfully
2024-08-20 02:31:05,895:INFO:plot_model() successfully completed......................................
2024-08-20 02:31:05,902:INFO:Initializing predict_model()
2024-08-20 02:31:05,902:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AAE2583E20>)
2024-08-20 02:31:05,903:INFO:Checking exceptions
2024-08-20 02:31:05,903:INFO:Preloading libraries
2024-08-20 02:31:05,906:INFO:Set up data.
2024-08-20 02:31:05,946:INFO:Set up index.
2024-08-20 02:39:34,458:INFO:Initializing save_model()
2024-08-20 02:39:34,458:INFO:save_model(model=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), model_name=mushroom_classification_pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-08-20 02:39:34,459:INFO:Adding model into prep_pipe
2024-08-20 02:39:34,508:INFO:mushroom_classification_pipeline.pkl saved in current working directory
2024-08-20 02:39:34,641:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 02:39:34,642:INFO:save_model() successfully completed......................................
2024-08-20 02:42:22,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:42:22,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:42:22,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:42:22,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 02:42:47,725:INFO:PyCaret ClassificationExperiment
2024-08-20 02:42:47,726:INFO:Logging name: clf-default-name
2024-08-20 02:42:47,726:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:42:47,726:INFO:version 3.3.2
2024-08-20 02:42:47,726:INFO:Initializing setup()
2024-08-20 02:42:47,726:INFO:self.USI: 3dfa
2024-08-20 02:42:47,726:INFO:self._variable_keys: {'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'pipeline', 'exp_id', 'fold_groups_param', 'USI', 'html_param', 'y', 'idx', 'target_param', 'gpu_param', 'memory', 'exp_name_log', 'n_jobs_param', 'data', 'fold_generator', 'is_multiclass', 'seed', 'y_test', '_ml_usecase', 'X', 'X_train', 'X_test', 'fold_shuffle_param', 'fix_imbalance', '_available_plots', 'logging_param'}
2024-08-20 02:42:47,726:INFO:Checking environment
2024-08-20 02:42:47,726:INFO:python_version: 3.11.7
2024-08-20 02:42:47,726:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:42:47,726:INFO:machine: AMD64
2024-08-20 02:42:47,726:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:42:47,726:INFO:Memory: svmem(total=16890978304, available=5315981312, percent=68.5, used=11574996992, free=5315981312)
2024-08-20 02:42:47,728:INFO:Physical Core: 12
2024-08-20 02:42:47,728:INFO:Logical Core: 16
2024-08-20 02:42:47,728:INFO:Checking libraries
2024-08-20 02:42:47,728:INFO:System:
2024-08-20 02:42:47,728:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:42:47,728:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:42:47,728:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:42:47,728:INFO:PyCaret required dependencies:
2024-08-20 02:42:49,128:INFO:                 pip: 23.3.1
2024-08-20 02:42:49,128:INFO:          setuptools: 68.2.2
2024-08-20 02:42:49,128:INFO:             pycaret: 3.3.2
2024-08-20 02:42:49,128:INFO:             IPython: 8.20.0
2024-08-20 02:42:49,128:INFO:          ipywidgets: 7.6.5
2024-08-20 02:42:49,129:INFO:                tqdm: 4.65.0
2024-08-20 02:42:49,129:INFO:               numpy: 1.26.4
2024-08-20 02:42:49,129:INFO:              pandas: 2.1.4
2024-08-20 02:42:49,129:INFO:              jinja2: 3.1.3
2024-08-20 02:42:49,129:INFO:               scipy: 1.11.4
2024-08-20 02:42:49,129:INFO:              joblib: 1.2.0
2024-08-20 02:42:49,129:INFO:             sklearn: 1.2.2
2024-08-20 02:42:49,129:INFO:                pyod: 2.0.1
2024-08-20 02:42:49,129:INFO:            imblearn: 0.11.0
2024-08-20 02:42:49,129:INFO:   category_encoders: 2.6.3
2024-08-20 02:42:49,129:INFO:            lightgbm: 4.4.0
2024-08-20 02:42:49,129:INFO:               numba: 0.59.0
2024-08-20 02:42:49,130:INFO:            requests: 2.31.0
2024-08-20 02:42:49,130:INFO:          matplotlib: 3.8.0
2024-08-20 02:42:49,130:INFO:          scikitplot: 0.3.7
2024-08-20 02:42:49,130:INFO:         yellowbrick: 1.5
2024-08-20 02:42:49,130:INFO:              plotly: 5.9.0
2024-08-20 02:42:49,130:INFO:    plotly-resampler: Not installed
2024-08-20 02:42:49,130:INFO:             kaleido: 0.2.1
2024-08-20 02:42:49,130:INFO:           schemdraw: 0.15
2024-08-20 02:42:49,130:INFO:         statsmodels: 0.14.0
2024-08-20 02:42:49,130:INFO:              sktime: 0.26.0
2024-08-20 02:42:49,130:INFO:               tbats: 1.1.3
2024-08-20 02:42:49,130:INFO:            pmdarima: 2.0.4
2024-08-20 02:42:49,130:INFO:              psutil: 5.9.0
2024-08-20 02:42:49,130:INFO:          markupsafe: 2.1.3
2024-08-20 02:42:49,131:INFO:             pickle5: Not installed
2024-08-20 02:42:49,131:INFO:         cloudpickle: 2.2.1
2024-08-20 02:42:49,131:INFO:         deprecation: 2.1.0
2024-08-20 02:42:49,131:INFO:              xxhash: 3.4.1
2024-08-20 02:42:49,131:INFO:           wurlitzer: Not installed
2024-08-20 02:42:49,131:INFO:PyCaret optional dependencies:
2024-08-20 02:42:54,447:INFO:                shap: 0.44.1
2024-08-20 02:42:54,447:INFO:           interpret: 0.6.2
2024-08-20 02:42:54,447:INFO:                umap: 0.5.6
2024-08-20 02:42:54,447:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:42:54,447:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:42:54,448:INFO:             autoviz: Not installed
2024-08-20 02:42:54,448:INFO:           fairlearn: 0.7.0
2024-08-20 02:42:54,448:INFO:          deepchecks: Not installed
2024-08-20 02:42:54,448:INFO:             xgboost: 2.1.0
2024-08-20 02:42:54,448:INFO:            catboost: 1.2.5
2024-08-20 02:42:54,448:INFO:              kmodes: 0.12.2
2024-08-20 02:42:54,448:INFO:             mlxtend: 0.23.1
2024-08-20 02:42:54,448:INFO:       statsforecast: 1.5.0
2024-08-20 02:42:54,448:INFO:        tune_sklearn: Not installed
2024-08-20 02:42:54,448:INFO:                 ray: Not installed
2024-08-20 02:42:54,448:INFO:            hyperopt: 0.2.7
2024-08-20 02:42:54,448:INFO:              optuna: 3.6.1
2024-08-20 02:42:54,448:INFO:               skopt: 0.10.2
2024-08-20 02:42:54,449:INFO:              mlflow: 2.14.2
2024-08-20 02:42:54,449:INFO:              gradio: 4.37.2
2024-08-20 02:42:54,449:INFO:             fastapi: 0.111.0
2024-08-20 02:42:54,449:INFO:             uvicorn: 0.30.1
2024-08-20 02:42:54,449:INFO:              m2cgen: 0.10.0
2024-08-20 02:42:54,449:INFO:           evidently: 0.4.30
2024-08-20 02:42:54,449:INFO:               fugue: 0.8.7
2024-08-20 02:42:54,449:INFO:           streamlit: 1.30.0
2024-08-20 02:42:54,449:INFO:             prophet: Not installed
2024-08-20 02:42:54,449:INFO:None
2024-08-20 02:42:54,449:INFO:Set up data.
2024-08-20 02:42:54,699:INFO:Set up folding strategy.
2024-08-20 02:42:54,699:INFO:Set up train/test split.
2024-08-20 02:43:46,032:INFO:PyCaret ClassificationExperiment
2024-08-20 02:43:46,033:INFO:Logging name: clf-default-name
2024-08-20 02:43:46,033:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 02:43:46,033:INFO:version 3.3.2
2024-08-20 02:43:46,033:INFO:Initializing setup()
2024-08-20 02:43:46,033:INFO:self.USI: 3b71
2024-08-20 02:43:46,033:INFO:self._variable_keys: {'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'pipeline', 'exp_id', 'fold_groups_param', 'USI', 'html_param', 'y', 'idx', 'target_param', 'gpu_param', 'memory', 'exp_name_log', 'n_jobs_param', 'data', 'fold_generator', 'is_multiclass', 'seed', 'y_test', '_ml_usecase', 'X', 'X_train', 'X_test', 'fold_shuffle_param', 'fix_imbalance', '_available_plots', 'logging_param'}
2024-08-20 02:43:46,033:INFO:Checking environment
2024-08-20 02:43:46,033:INFO:python_version: 3.11.7
2024-08-20 02:43:46,033:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:43:46,033:INFO:machine: AMD64
2024-08-20 02:43:46,033:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:43:46,033:INFO:Memory: svmem(total=16890978304, available=5142609920, percent=69.6, used=11748368384, free=5142609920)
2024-08-20 02:43:46,034:INFO:Physical Core: 12
2024-08-20 02:43:46,034:INFO:Logical Core: 16
2024-08-20 02:43:46,034:INFO:Checking libraries
2024-08-20 02:43:46,034:INFO:System:
2024-08-20 02:43:46,034:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:43:46,034:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:43:46,034:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:43:46,034:INFO:PyCaret required dependencies:
2024-08-20 02:43:46,034:INFO:                 pip: 23.3.1
2024-08-20 02:43:46,034:INFO:          setuptools: 68.2.2
2024-08-20 02:43:46,034:INFO:             pycaret: 3.3.2
2024-08-20 02:43:46,034:INFO:             IPython: 8.20.0
2024-08-20 02:43:46,034:INFO:          ipywidgets: 7.6.5
2024-08-20 02:43:46,034:INFO:                tqdm: 4.65.0
2024-08-20 02:43:46,034:INFO:               numpy: 1.26.4
2024-08-20 02:43:46,034:INFO:              pandas: 2.1.4
2024-08-20 02:43:46,034:INFO:              jinja2: 3.1.3
2024-08-20 02:43:46,035:INFO:               scipy: 1.11.4
2024-08-20 02:43:46,035:INFO:              joblib: 1.2.0
2024-08-20 02:43:46,035:INFO:             sklearn: 1.2.2
2024-08-20 02:43:46,035:INFO:                pyod: 2.0.1
2024-08-20 02:43:46,035:INFO:            imblearn: 0.11.0
2024-08-20 02:43:46,035:INFO:   category_encoders: 2.6.3
2024-08-20 02:43:46,035:INFO:            lightgbm: 4.4.0
2024-08-20 02:43:46,035:INFO:               numba: 0.59.0
2024-08-20 02:43:46,035:INFO:            requests: 2.31.0
2024-08-20 02:43:46,035:INFO:          matplotlib: 3.8.0
2024-08-20 02:43:46,035:INFO:          scikitplot: 0.3.7
2024-08-20 02:43:46,035:INFO:         yellowbrick: 1.5
2024-08-20 02:43:46,035:INFO:              plotly: 5.9.0
2024-08-20 02:43:46,035:INFO:    plotly-resampler: Not installed
2024-08-20 02:43:46,035:INFO:             kaleido: 0.2.1
2024-08-20 02:43:46,035:INFO:           schemdraw: 0.15
2024-08-20 02:43:46,035:INFO:         statsmodels: 0.14.0
2024-08-20 02:43:46,036:INFO:              sktime: 0.26.0
2024-08-20 02:43:46,036:INFO:               tbats: 1.1.3
2024-08-20 02:43:46,036:INFO:            pmdarima: 2.0.4
2024-08-20 02:43:46,036:INFO:              psutil: 5.9.0
2024-08-20 02:43:46,036:INFO:          markupsafe: 2.1.3
2024-08-20 02:43:46,036:INFO:             pickle5: Not installed
2024-08-20 02:43:46,036:INFO:         cloudpickle: 2.2.1
2024-08-20 02:43:46,036:INFO:         deprecation: 2.1.0
2024-08-20 02:43:46,036:INFO:              xxhash: 3.4.1
2024-08-20 02:43:46,036:INFO:           wurlitzer: Not installed
2024-08-20 02:43:46,036:INFO:PyCaret optional dependencies:
2024-08-20 02:43:46,036:INFO:                shap: 0.44.1
2024-08-20 02:43:46,036:INFO:           interpret: 0.6.2
2024-08-20 02:43:46,036:INFO:                umap: 0.5.6
2024-08-20 02:43:46,036:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:43:46,036:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:43:46,037:INFO:             autoviz: Not installed
2024-08-20 02:43:46,037:INFO:           fairlearn: 0.7.0
2024-08-20 02:43:46,037:INFO:          deepchecks: Not installed
2024-08-20 02:43:46,037:INFO:             xgboost: 2.1.0
2024-08-20 02:43:46,037:INFO:            catboost: 1.2.5
2024-08-20 02:43:46,037:INFO:              kmodes: 0.12.2
2024-08-20 02:43:46,037:INFO:             mlxtend: 0.23.1
2024-08-20 02:43:46,037:INFO:       statsforecast: 1.5.0
2024-08-20 02:43:46,037:INFO:        tune_sklearn: Not installed
2024-08-20 02:43:46,037:INFO:                 ray: Not installed
2024-08-20 02:43:46,037:INFO:            hyperopt: 0.2.7
2024-08-20 02:43:46,037:INFO:              optuna: 3.6.1
2024-08-20 02:43:46,037:INFO:               skopt: 0.10.2
2024-08-20 02:43:46,037:INFO:              mlflow: 2.14.2
2024-08-20 02:43:46,037:INFO:              gradio: 4.37.2
2024-08-20 02:43:46,037:INFO:             fastapi: 0.111.0
2024-08-20 02:43:46,038:INFO:             uvicorn: 0.30.1
2024-08-20 02:43:46,038:INFO:              m2cgen: 0.10.0
2024-08-20 02:43:46,038:INFO:           evidently: 0.4.30
2024-08-20 02:43:46,038:INFO:               fugue: 0.8.7
2024-08-20 02:43:46,038:INFO:           streamlit: 1.30.0
2024-08-20 02:43:46,038:INFO:             prophet: Not installed
2024-08-20 02:43:46,038:INFO:None
2024-08-20 02:43:46,038:INFO:Set up data.
2024-08-20 02:43:46,243:INFO:Set up folding strategy.
2024-08-20 02:43:46,243:INFO:Set up train/test split.
2024-08-20 02:45:12,259:INFO:PyCaret RegressionExperiment
2024-08-20 02:45:12,259:INFO:Logging name: reg-default-name
2024-08-20 02:45:12,260:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 02:45:12,260:INFO:version 3.3.2
2024-08-20 02:45:12,260:INFO:Initializing setup()
2024-08-20 02:45:12,260:INFO:self.USI: 2b35
2024-08-20 02:45:12,260:INFO:self._variable_keys: {'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'pipeline', 'exp_id', 'fold_groups_param', 'USI', 'html_param', 'y', 'idx', 'target_param', 'gpu_param', 'memory', 'exp_name_log', 'n_jobs_param', 'data', 'fold_generator', 'transform_target_param', 'seed', 'y_test', '_ml_usecase', 'X', 'X_train', 'X_test', 'fold_shuffle_param', '_available_plots', 'logging_param'}
2024-08-20 02:45:12,260:INFO:Checking environment
2024-08-20 02:45:12,260:INFO:python_version: 3.11.7
2024-08-20 02:45:12,260:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 02:45:12,261:INFO:machine: AMD64
2024-08-20 02:45:12,261:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 02:45:12,261:INFO:Memory: svmem(total=16890978304, available=5101858816, percent=69.8, used=11789119488, free=5101858816)
2024-08-20 02:45:12,261:INFO:Physical Core: 12
2024-08-20 02:45:12,261:INFO:Logical Core: 16
2024-08-20 02:45:12,261:INFO:Checking libraries
2024-08-20 02:45:12,261:INFO:System:
2024-08-20 02:45:12,261:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 02:45:12,261:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 02:45:12,261:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 02:45:12,261:INFO:PyCaret required dependencies:
2024-08-20 02:45:12,261:INFO:                 pip: 23.3.1
2024-08-20 02:45:12,261:INFO:          setuptools: 68.2.2
2024-08-20 02:45:12,261:INFO:             pycaret: 3.3.2
2024-08-20 02:45:12,261:INFO:             IPython: 8.20.0
2024-08-20 02:45:12,262:INFO:          ipywidgets: 7.6.5
2024-08-20 02:45:12,262:INFO:                tqdm: 4.65.0
2024-08-20 02:45:12,262:INFO:               numpy: 1.26.4
2024-08-20 02:45:12,262:INFO:              pandas: 2.1.4
2024-08-20 02:45:12,262:INFO:              jinja2: 3.1.3
2024-08-20 02:45:12,262:INFO:               scipy: 1.11.4
2024-08-20 02:45:12,262:INFO:              joblib: 1.2.0
2024-08-20 02:45:12,262:INFO:             sklearn: 1.2.2
2024-08-20 02:45:12,262:INFO:                pyod: 2.0.1
2024-08-20 02:45:12,262:INFO:            imblearn: 0.11.0
2024-08-20 02:45:12,262:INFO:   category_encoders: 2.6.3
2024-08-20 02:45:12,262:INFO:            lightgbm: 4.4.0
2024-08-20 02:45:12,262:INFO:               numba: 0.59.0
2024-08-20 02:45:12,262:INFO:            requests: 2.31.0
2024-08-20 02:45:12,262:INFO:          matplotlib: 3.8.0
2024-08-20 02:45:12,262:INFO:          scikitplot: 0.3.7
2024-08-20 02:45:12,262:INFO:         yellowbrick: 1.5
2024-08-20 02:45:12,262:INFO:              plotly: 5.9.0
2024-08-20 02:45:12,263:INFO:    plotly-resampler: Not installed
2024-08-20 02:45:12,263:INFO:             kaleido: 0.2.1
2024-08-20 02:45:12,263:INFO:           schemdraw: 0.15
2024-08-20 02:45:12,263:INFO:         statsmodels: 0.14.0
2024-08-20 02:45:12,263:INFO:              sktime: 0.26.0
2024-08-20 02:45:12,263:INFO:               tbats: 1.1.3
2024-08-20 02:45:12,263:INFO:            pmdarima: 2.0.4
2024-08-20 02:45:12,263:INFO:              psutil: 5.9.0
2024-08-20 02:45:12,263:INFO:          markupsafe: 2.1.3
2024-08-20 02:45:12,263:INFO:             pickle5: Not installed
2024-08-20 02:45:12,263:INFO:         cloudpickle: 2.2.1
2024-08-20 02:45:12,263:INFO:         deprecation: 2.1.0
2024-08-20 02:45:12,263:INFO:              xxhash: 3.4.1
2024-08-20 02:45:12,263:INFO:           wurlitzer: Not installed
2024-08-20 02:45:12,263:INFO:PyCaret optional dependencies:
2024-08-20 02:45:12,263:INFO:                shap: 0.44.1
2024-08-20 02:45:12,263:INFO:           interpret: 0.6.2
2024-08-20 02:45:12,264:INFO:                umap: 0.5.6
2024-08-20 02:45:12,264:INFO:     ydata_profiling: 4.8.3
2024-08-20 02:45:12,264:INFO:  explainerdashboard: 0.4.7
2024-08-20 02:45:12,264:INFO:             autoviz: Not installed
2024-08-20 02:45:12,264:INFO:           fairlearn: 0.7.0
2024-08-20 02:45:12,264:INFO:          deepchecks: Not installed
2024-08-20 02:45:12,264:INFO:             xgboost: 2.1.0
2024-08-20 02:45:12,264:INFO:            catboost: 1.2.5
2024-08-20 02:45:12,264:INFO:              kmodes: 0.12.2
2024-08-20 02:45:12,264:INFO:             mlxtend: 0.23.1
2024-08-20 02:45:12,264:INFO:       statsforecast: 1.5.0
2024-08-20 02:45:12,264:INFO:        tune_sklearn: Not installed
2024-08-20 02:45:12,265:INFO:                 ray: Not installed
2024-08-20 02:45:12,265:INFO:            hyperopt: 0.2.7
2024-08-20 02:45:12,265:INFO:              optuna: 3.6.1
2024-08-20 02:45:12,265:INFO:               skopt: 0.10.2
2024-08-20 02:45:12,265:INFO:              mlflow: 2.14.2
2024-08-20 02:45:12,265:INFO:              gradio: 4.37.2
2024-08-20 02:45:12,265:INFO:             fastapi: 0.111.0
2024-08-20 02:45:12,265:INFO:             uvicorn: 0.30.1
2024-08-20 02:45:12,265:INFO:              m2cgen: 0.10.0
2024-08-20 02:45:12,265:INFO:           evidently: 0.4.30
2024-08-20 02:45:12,265:INFO:               fugue: 0.8.7
2024-08-20 02:45:12,265:INFO:           streamlit: 1.30.0
2024-08-20 02:45:12,265:INFO:             prophet: Not installed
2024-08-20 02:45:12,266:INFO:None
2024-08-20 02:45:12,266:INFO:Set up data.
2024-08-20 02:45:12,470:INFO:Set up folding strategy.
2024-08-20 02:45:12,470:INFO:Set up train/test split.
2024-08-20 02:45:12,544:INFO:Set up index.
2024-08-20 02:45:12,551:INFO:Assigning column types.
2024-08-20 02:45:12,594:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 02:45:12,594:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,605:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,616:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,809:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,920:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,921:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:12,927:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:12,962:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,973:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 02:45:12,987:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,183:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,291:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,292:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:13,298:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:13,299:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 02:45:13,312:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,322:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,512:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,620:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,621:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:13,627:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:13,639:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,648:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,836:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,944:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:13,945:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:13,951:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:13,952:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 02:45:13,974:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,162:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,272:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,273:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:14,279:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:14,304:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,489:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,598:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,599:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:14,604:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:14,605:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 02:45:14,826:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,937:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:14,938:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:14,945:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:15,158:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:15,266:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 02:45:15,267:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:15,274:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:15,275:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 02:45:15,488:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:15,596:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:15,601:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:15,817:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 02:45:15,926:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:15,932:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:15,937:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 02:45:16,262:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:16,269:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:16,588:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 02:45:16,594:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 02:45:16,597:INFO:Preparing preprocessing pipeline...
2024-08-20 02:45:16,597:INFO:Set up simple imputation.
2024-08-20 02:45:16,632:INFO:Set up encoding of categorical features.
2024-08-20 02:45:16,633:INFO:Set up binning of numerical features.
2024-08-20 03:10:34,896:INFO:PyCaret RegressionExperiment
2024-08-20 03:10:34,896:INFO:Logging name: reg-default-name
2024-08-20 03:10:34,896:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 03:10:34,896:INFO:version 3.3.2
2024-08-20 03:10:34,896:INFO:Initializing setup()
2024-08-20 03:10:34,896:INFO:self.USI: e12d
2024-08-20 03:10:34,896:INFO:self._variable_keys: {'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'pipeline', 'exp_id', 'fold_groups_param', 'USI', 'html_param', 'y', 'idx', 'target_param', 'gpu_param', 'memory', 'exp_name_log', 'n_jobs_param', 'data', 'fold_generator', 'transform_target_param', 'seed', 'y_test', '_ml_usecase', 'X', 'X_train', 'X_test', 'fold_shuffle_param', '_available_plots', 'logging_param'}
2024-08-20 03:10:34,898:INFO:Checking environment
2024-08-20 03:10:34,898:INFO:python_version: 3.11.7
2024-08-20 03:10:34,898:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 03:10:34,898:INFO:machine: AMD64
2024-08-20 03:10:34,898:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 03:10:34,898:INFO:Memory: svmem(total=16890978304, available=4863975424, percent=71.2, used=12027002880, free=4863975424)
2024-08-20 03:10:34,898:INFO:Physical Core: 12
2024-08-20 03:10:34,898:INFO:Logical Core: 16
2024-08-20 03:10:34,898:INFO:Checking libraries
2024-08-20 03:10:34,898:INFO:System:
2024-08-20 03:10:34,898:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 03:10:34,898:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 03:10:34,898:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 03:10:34,899:INFO:PyCaret required dependencies:
2024-08-20 03:10:34,899:INFO:                 pip: 23.3.1
2024-08-20 03:10:34,899:INFO:          setuptools: 68.2.2
2024-08-20 03:10:34,899:INFO:             pycaret: 3.3.2
2024-08-20 03:10:34,899:INFO:             IPython: 8.20.0
2024-08-20 03:10:34,899:INFO:          ipywidgets: 7.6.5
2024-08-20 03:10:34,899:INFO:                tqdm: 4.65.0
2024-08-20 03:10:34,899:INFO:               numpy: 1.26.4
2024-08-20 03:10:34,899:INFO:              pandas: 2.1.4
2024-08-20 03:10:34,899:INFO:              jinja2: 3.1.3
2024-08-20 03:10:34,899:INFO:               scipy: 1.11.4
2024-08-20 03:10:34,899:INFO:              joblib: 1.2.0
2024-08-20 03:10:34,899:INFO:             sklearn: 1.2.2
2024-08-20 03:10:34,899:INFO:                pyod: 2.0.1
2024-08-20 03:10:34,900:INFO:            imblearn: 0.11.0
2024-08-20 03:10:34,900:INFO:   category_encoders: 2.6.3
2024-08-20 03:10:34,900:INFO:            lightgbm: 4.4.0
2024-08-20 03:10:34,900:INFO:               numba: 0.59.0
2024-08-20 03:10:34,900:INFO:            requests: 2.31.0
2024-08-20 03:10:34,900:INFO:          matplotlib: 3.8.0
2024-08-20 03:10:34,900:INFO:          scikitplot: 0.3.7
2024-08-20 03:10:34,900:INFO:         yellowbrick: 1.5
2024-08-20 03:10:34,900:INFO:              plotly: 5.9.0
2024-08-20 03:10:34,900:INFO:    plotly-resampler: Not installed
2024-08-20 03:10:34,900:INFO:             kaleido: 0.2.1
2024-08-20 03:10:34,900:INFO:           schemdraw: 0.15
2024-08-20 03:10:34,900:INFO:         statsmodels: 0.14.0
2024-08-20 03:10:34,900:INFO:              sktime: 0.26.0
2024-08-20 03:10:34,900:INFO:               tbats: 1.1.3
2024-08-20 03:10:34,901:INFO:            pmdarima: 2.0.4
2024-08-20 03:10:34,901:INFO:              psutil: 5.9.0
2024-08-20 03:10:34,901:INFO:          markupsafe: 2.1.3
2024-08-20 03:10:34,901:INFO:             pickle5: Not installed
2024-08-20 03:10:34,901:INFO:         cloudpickle: 2.2.1
2024-08-20 03:10:34,901:INFO:         deprecation: 2.1.0
2024-08-20 03:10:34,901:INFO:              xxhash: 3.4.1
2024-08-20 03:10:34,901:INFO:           wurlitzer: Not installed
2024-08-20 03:10:34,901:INFO:PyCaret optional dependencies:
2024-08-20 03:10:34,901:INFO:                shap: 0.44.1
2024-08-20 03:10:34,901:INFO:           interpret: 0.6.2
2024-08-20 03:10:34,901:INFO:                umap: 0.5.6
2024-08-20 03:10:34,901:INFO:     ydata_profiling: 4.8.3
2024-08-20 03:10:34,901:INFO:  explainerdashboard: 0.4.7
2024-08-20 03:10:34,901:INFO:             autoviz: Not installed
2024-08-20 03:10:34,901:INFO:           fairlearn: 0.7.0
2024-08-20 03:10:34,902:INFO:          deepchecks: Not installed
2024-08-20 03:10:34,902:INFO:             xgboost: 2.1.0
2024-08-20 03:10:34,902:INFO:            catboost: 1.2.5
2024-08-20 03:10:34,902:INFO:              kmodes: 0.12.2
2024-08-20 03:10:34,902:INFO:             mlxtend: 0.23.1
2024-08-20 03:10:34,902:INFO:       statsforecast: 1.5.0
2024-08-20 03:10:34,902:INFO:        tune_sklearn: Not installed
2024-08-20 03:10:34,902:INFO:                 ray: Not installed
2024-08-20 03:10:34,902:INFO:            hyperopt: 0.2.7
2024-08-20 03:10:34,902:INFO:              optuna: 3.6.1
2024-08-20 03:10:34,902:INFO:               skopt: 0.10.2
2024-08-20 03:10:34,902:INFO:              mlflow: 2.14.2
2024-08-20 03:10:34,902:INFO:              gradio: 4.37.2
2024-08-20 03:10:34,903:INFO:             fastapi: 0.111.0
2024-08-20 03:10:34,903:INFO:             uvicorn: 0.30.1
2024-08-20 03:10:34,903:INFO:              m2cgen: 0.10.0
2024-08-20 03:10:34,903:INFO:           evidently: 0.4.30
2024-08-20 03:10:34,903:INFO:               fugue: 0.8.7
2024-08-20 03:10:34,903:INFO:           streamlit: 1.30.0
2024-08-20 03:10:34,903:INFO:             prophet: Not installed
2024-08-20 03:10:34,903:INFO:None
2024-08-20 03:10:34,903:INFO:Set up data.
2024-08-20 03:10:35,124:INFO:Set up folding strategy.
2024-08-20 03:10:35,125:INFO:Set up train/test split.
2024-08-20 03:10:35,189:INFO:Set up index.
2024-08-20 03:10:35,196:INFO:Assigning column types.
2024-08-20 03:10:35,238:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 03:10:35,239:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,250:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,263:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,452:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,561:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,562:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:35,569:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:35,570:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,581:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,593:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,802:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,913:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,914:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:35,920:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:35,921:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 03:10:35,932:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:10:35,943:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,132:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,242:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,243:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:36,248:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:36,260:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,270:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,464:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,571:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,571:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:36,577:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:36,578:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 03:10:36,600:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,794:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,903:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:36,905:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:36,912:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:36,935:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,123:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,233:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,234:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:37,240:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:37,244:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 03:10:37,461:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,566:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,566:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:37,573:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:37,784:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,892:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:10:37,893:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:37,899:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:37,900:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 03:10:38,115:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:38,224:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:38,231:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:38,440:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:10:38,546:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:38,553:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:38,554:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 03:10:38,877:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:38,883:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:39,211:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:10:39,218:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:10:39,220:INFO:Preparing preprocessing pipeline...
2024-08-20 03:10:39,220:INFO:Set up simple imputation.
2024-08-20 03:10:39,255:INFO:Set up encoding of categorical features.
2024-08-20 03:10:39,257:INFO:Set up binning of numerical features.
2024-08-20 03:12:30,610:INFO:PyCaret RegressionExperiment
2024-08-20 03:12:30,610:INFO:Logging name: reg-default-name
2024-08-20 03:12:30,610:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 03:12:30,610:INFO:version 3.3.2
2024-08-20 03:12:30,611:INFO:Initializing setup()
2024-08-20 03:12:30,611:INFO:self.USI: 138f
2024-08-20 03:12:30,611:INFO:self._variable_keys: {'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'pipeline', 'exp_id', 'fold_groups_param', 'USI', 'html_param', 'y', 'idx', 'target_param', 'gpu_param', 'memory', 'exp_name_log', 'n_jobs_param', 'data', 'fold_generator', 'transform_target_param', 'seed', 'y_test', '_ml_usecase', 'X', 'X_train', 'X_test', 'fold_shuffle_param', '_available_plots', 'logging_param'}
2024-08-20 03:12:30,611:INFO:Checking environment
2024-08-20 03:12:30,611:INFO:python_version: 3.11.7
2024-08-20 03:12:30,611:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 03:12:30,611:INFO:machine: AMD64
2024-08-20 03:12:30,611:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 03:12:30,612:INFO:Memory: svmem(total=16890978304, available=4801183744, percent=71.6, used=12089794560, free=4801183744)
2024-08-20 03:12:30,612:INFO:Physical Core: 12
2024-08-20 03:12:30,612:INFO:Logical Core: 16
2024-08-20 03:12:30,612:INFO:Checking libraries
2024-08-20 03:12:30,612:INFO:System:
2024-08-20 03:12:30,612:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 03:12:30,612:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 03:12:30,612:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 03:12:30,613:INFO:PyCaret required dependencies:
2024-08-20 03:12:30,613:INFO:                 pip: 23.3.1
2024-08-20 03:12:30,613:INFO:          setuptools: 68.2.2
2024-08-20 03:12:30,613:INFO:             pycaret: 3.3.2
2024-08-20 03:12:30,613:INFO:             IPython: 8.20.0
2024-08-20 03:12:30,613:INFO:          ipywidgets: 7.6.5
2024-08-20 03:12:30,613:INFO:                tqdm: 4.65.0
2024-08-20 03:12:30,613:INFO:               numpy: 1.26.4
2024-08-20 03:12:30,613:INFO:              pandas: 2.1.4
2024-08-20 03:12:30,614:INFO:              jinja2: 3.1.3
2024-08-20 03:12:30,614:INFO:               scipy: 1.11.4
2024-08-20 03:12:30,614:INFO:              joblib: 1.2.0
2024-08-20 03:12:30,614:INFO:             sklearn: 1.2.2
2024-08-20 03:12:30,614:INFO:                pyod: 2.0.1
2024-08-20 03:12:30,614:INFO:            imblearn: 0.11.0
2024-08-20 03:12:30,614:INFO:   category_encoders: 2.6.3
2024-08-20 03:12:30,614:INFO:            lightgbm: 4.4.0
2024-08-20 03:12:30,614:INFO:               numba: 0.59.0
2024-08-20 03:12:30,614:INFO:            requests: 2.31.0
2024-08-20 03:12:30,615:INFO:          matplotlib: 3.8.0
2024-08-20 03:12:30,615:INFO:          scikitplot: 0.3.7
2024-08-20 03:12:30,615:INFO:         yellowbrick: 1.5
2024-08-20 03:12:30,615:INFO:              plotly: 5.9.0
2024-08-20 03:12:30,615:INFO:    plotly-resampler: Not installed
2024-08-20 03:12:30,615:INFO:             kaleido: 0.2.1
2024-08-20 03:12:30,615:INFO:           schemdraw: 0.15
2024-08-20 03:12:30,615:INFO:         statsmodels: 0.14.0
2024-08-20 03:12:30,615:INFO:              sktime: 0.26.0
2024-08-20 03:12:30,616:INFO:               tbats: 1.1.3
2024-08-20 03:12:30,616:INFO:            pmdarima: 2.0.4
2024-08-20 03:12:30,616:INFO:              psutil: 5.9.0
2024-08-20 03:12:30,616:INFO:          markupsafe: 2.1.3
2024-08-20 03:12:30,616:INFO:             pickle5: Not installed
2024-08-20 03:12:30,616:INFO:         cloudpickle: 2.2.1
2024-08-20 03:12:30,616:INFO:         deprecation: 2.1.0
2024-08-20 03:12:30,616:INFO:              xxhash: 3.4.1
2024-08-20 03:12:30,616:INFO:           wurlitzer: Not installed
2024-08-20 03:12:30,616:INFO:PyCaret optional dependencies:
2024-08-20 03:12:30,616:INFO:                shap: 0.44.1
2024-08-20 03:12:30,616:INFO:           interpret: 0.6.2
2024-08-20 03:12:30,616:INFO:                umap: 0.5.6
2024-08-20 03:12:30,616:INFO:     ydata_profiling: 4.8.3
2024-08-20 03:12:30,616:INFO:  explainerdashboard: 0.4.7
2024-08-20 03:12:30,617:INFO:             autoviz: Not installed
2024-08-20 03:12:30,617:INFO:           fairlearn: 0.7.0
2024-08-20 03:12:30,617:INFO:          deepchecks: Not installed
2024-08-20 03:12:30,617:INFO:             xgboost: 2.1.0
2024-08-20 03:12:30,617:INFO:            catboost: 1.2.5
2024-08-20 03:12:30,618:INFO:              kmodes: 0.12.2
2024-08-20 03:12:30,618:INFO:             mlxtend: 0.23.1
2024-08-20 03:12:30,618:INFO:       statsforecast: 1.5.0
2024-08-20 03:12:30,618:INFO:        tune_sklearn: Not installed
2024-08-20 03:12:30,618:INFO:                 ray: Not installed
2024-08-20 03:12:30,618:INFO:            hyperopt: 0.2.7
2024-08-20 03:12:30,618:INFO:              optuna: 3.6.1
2024-08-20 03:12:30,618:INFO:               skopt: 0.10.2
2024-08-20 03:12:30,618:INFO:              mlflow: 2.14.2
2024-08-20 03:12:30,618:INFO:              gradio: 4.37.2
2024-08-20 03:12:30,618:INFO:             fastapi: 0.111.0
2024-08-20 03:12:30,618:INFO:             uvicorn: 0.30.1
2024-08-20 03:12:30,618:INFO:              m2cgen: 0.10.0
2024-08-20 03:12:30,619:INFO:           evidently: 0.4.30
2024-08-20 03:12:30,619:INFO:               fugue: 0.8.7
2024-08-20 03:12:30,619:INFO:           streamlit: 1.30.0
2024-08-20 03:12:30,619:INFO:             prophet: Not installed
2024-08-20 03:12:30,619:INFO:None
2024-08-20 03:12:30,619:INFO:Set up data.
2024-08-20 03:12:30,833:INFO:Set up folding strategy.
2024-08-20 03:12:30,833:INFO:Set up train/test split.
2024-08-20 03:12:30,889:INFO:Set up index.
2024-08-20 03:12:30,896:INFO:Assigning column types.
2024-08-20 03:12:30,959:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 03:12:30,960:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 03:12:30,974:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:12:30,985:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,199:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,311:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,312:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:31,318:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:31,319:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,330:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,341:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,542:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,649:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,650:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:31,656:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:31,658:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 03:12:31,668:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,680:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,878:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,983:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:31,984:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:31,990:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:32,002:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,012:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,210:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,320:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,321:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:32,328:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:32,329:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 03:12:32,351:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,550:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,662:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,663:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:32,668:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:32,691:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:12:32,888:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:33,001:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:33,002:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:33,008:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:33,009:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 03:12:33,227:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:33,336:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:33,337:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:33,343:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:33,565:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:33,673:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:12:33,674:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:33,680:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:33,681:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 03:12:33,905:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:34,021:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:34,029:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:34,256:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:12:34,367:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:34,373:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:34,374:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 03:12:34,710:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:34,717:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:35,067:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:35,073:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:35,075:INFO:Preparing preprocessing pipeline...
2024-08-20 03:12:35,075:INFO:Set up simple imputation.
2024-08-20 03:12:35,129:INFO:Set up encoding of categorical features.
2024-08-20 03:12:37,767:INFO:Finished creating preprocessing pipeline.
2024-08-20 03:12:37,781:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2024-08-20 03:12:37,781:INFO:Creating final display dataframe.
2024-08-20 03:12:41,460:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target      resale_price
2                   Target type        Regression
3           Original data shape      (176460, 15)
4        Transformed data shape      (176460, 57)
5   Transformed train set shape      (123521, 57)
6    Transformed test set shape       (52939, 57)
7              Numeric features                 7
8          Categorical features                 7
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              138f
2024-08-20 03:12:41,804:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:41,809:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:42,136:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:12:42,141:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:12:42,143:INFO:setup() successfully completed in 11.58s...............
2024-08-20 03:15:17,985:INFO:PyCaret RegressionExperiment
2024-08-20 03:15:17,986:INFO:Logging name: reg-default-name
2024-08-20 03:15:17,986:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 03:15:17,986:INFO:version 3.3.2
2024-08-20 03:15:17,986:INFO:Initializing setup()
2024-08-20 03:15:17,986:INFO:self.USI: 1369
2024-08-20 03:15:17,986:INFO:self._variable_keys: {'log_plots_param', 'y_train', 'gpu_n_jobs_param', 'pipeline', 'exp_id', 'fold_groups_param', 'USI', 'html_param', 'y', 'idx', 'target_param', 'gpu_param', 'memory', 'exp_name_log', 'n_jobs_param', 'data', 'fold_generator', 'transform_target_param', 'seed', 'y_test', '_ml_usecase', 'X', 'X_train', 'X_test', 'fold_shuffle_param', '_available_plots', 'logging_param'}
2024-08-20 03:15:17,986:INFO:Checking environment
2024-08-20 03:15:17,987:INFO:python_version: 3.11.7
2024-08-20 03:15:17,987:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 03:15:17,987:INFO:machine: AMD64
2024-08-20 03:15:17,987:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 03:15:17,987:INFO:Memory: svmem(total=16890978304, available=4744724480, percent=71.9, used=12146253824, free=4744724480)
2024-08-20 03:15:17,987:INFO:Physical Core: 12
2024-08-20 03:15:17,987:INFO:Logical Core: 16
2024-08-20 03:15:17,988:INFO:Checking libraries
2024-08-20 03:15:17,992:INFO:System:
2024-08-20 03:15:17,992:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 03:15:17,993:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 03:15:17,993:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 03:15:17,993:INFO:PyCaret required dependencies:
2024-08-20 03:15:17,993:INFO:                 pip: 23.3.1
2024-08-20 03:15:17,993:INFO:          setuptools: 68.2.2
2024-08-20 03:15:17,993:INFO:             pycaret: 3.3.2
2024-08-20 03:15:17,993:INFO:             IPython: 8.20.0
2024-08-20 03:15:17,993:INFO:          ipywidgets: 7.6.5
2024-08-20 03:15:17,993:INFO:                tqdm: 4.65.0
2024-08-20 03:15:17,993:INFO:               numpy: 1.26.4
2024-08-20 03:15:17,993:INFO:              pandas: 2.1.4
2024-08-20 03:15:17,993:INFO:              jinja2: 3.1.3
2024-08-20 03:15:17,993:INFO:               scipy: 1.11.4
2024-08-20 03:15:17,993:INFO:              joblib: 1.2.0
2024-08-20 03:15:17,993:INFO:             sklearn: 1.2.2
2024-08-20 03:15:17,993:INFO:                pyod: 2.0.1
2024-08-20 03:15:17,993:INFO:            imblearn: 0.11.0
2024-08-20 03:15:17,993:INFO:   category_encoders: 2.6.3
2024-08-20 03:15:17,993:INFO:            lightgbm: 4.4.0
2024-08-20 03:15:17,993:INFO:               numba: 0.59.0
2024-08-20 03:15:17,993:INFO:            requests: 2.31.0
2024-08-20 03:15:17,993:INFO:          matplotlib: 3.8.0
2024-08-20 03:15:17,993:INFO:          scikitplot: 0.3.7
2024-08-20 03:15:17,993:INFO:         yellowbrick: 1.5
2024-08-20 03:15:17,994:INFO:              plotly: 5.9.0
2024-08-20 03:15:17,994:INFO:    plotly-resampler: Not installed
2024-08-20 03:15:17,994:INFO:             kaleido: 0.2.1
2024-08-20 03:15:17,994:INFO:           schemdraw: 0.15
2024-08-20 03:15:17,994:INFO:         statsmodels: 0.14.0
2024-08-20 03:15:17,994:INFO:              sktime: 0.26.0
2024-08-20 03:15:17,994:INFO:               tbats: 1.1.3
2024-08-20 03:15:17,994:INFO:            pmdarima: 2.0.4
2024-08-20 03:15:17,994:INFO:              psutil: 5.9.0
2024-08-20 03:15:17,994:INFO:          markupsafe: 2.1.3
2024-08-20 03:15:17,994:INFO:             pickle5: Not installed
2024-08-20 03:15:17,994:INFO:         cloudpickle: 2.2.1
2024-08-20 03:15:17,994:INFO:         deprecation: 2.1.0
2024-08-20 03:15:17,994:INFO:              xxhash: 3.4.1
2024-08-20 03:15:17,994:INFO:           wurlitzer: Not installed
2024-08-20 03:15:17,994:INFO:PyCaret optional dependencies:
2024-08-20 03:15:17,994:INFO:                shap: 0.44.1
2024-08-20 03:15:17,994:INFO:           interpret: 0.6.2
2024-08-20 03:15:17,994:INFO:                umap: 0.5.6
2024-08-20 03:15:17,994:INFO:     ydata_profiling: 4.8.3
2024-08-20 03:15:17,994:INFO:  explainerdashboard: 0.4.7
2024-08-20 03:15:17,994:INFO:             autoviz: Not installed
2024-08-20 03:15:17,994:INFO:           fairlearn: 0.7.0
2024-08-20 03:15:17,994:INFO:          deepchecks: Not installed
2024-08-20 03:15:17,994:INFO:             xgboost: 2.1.0
2024-08-20 03:15:17,994:INFO:            catboost: 1.2.5
2024-08-20 03:15:17,994:INFO:              kmodes: 0.12.2
2024-08-20 03:15:17,994:INFO:             mlxtend: 0.23.1
2024-08-20 03:15:17,994:INFO:       statsforecast: 1.5.0
2024-08-20 03:15:17,994:INFO:        tune_sklearn: Not installed
2024-08-20 03:15:17,995:INFO:                 ray: Not installed
2024-08-20 03:15:17,995:INFO:            hyperopt: 0.2.7
2024-08-20 03:15:17,995:INFO:              optuna: 3.6.1
2024-08-20 03:15:17,995:INFO:               skopt: 0.10.2
2024-08-20 03:15:17,995:INFO:              mlflow: 2.14.2
2024-08-20 03:15:17,995:INFO:              gradio: 4.37.2
2024-08-20 03:15:17,995:INFO:             fastapi: 0.111.0
2024-08-20 03:15:17,995:INFO:             uvicorn: 0.30.1
2024-08-20 03:15:17,995:INFO:              m2cgen: 0.10.0
2024-08-20 03:15:17,995:INFO:           evidently: 0.4.30
2024-08-20 03:15:17,995:INFO:               fugue: 0.8.7
2024-08-20 03:15:17,995:INFO:           streamlit: 1.30.0
2024-08-20 03:15:17,995:INFO:             prophet: Not installed
2024-08-20 03:15:17,995:INFO:None
2024-08-20 03:15:17,995:INFO:Set up data.
2024-08-20 03:15:18,237:INFO:Set up folding strategy.
2024-08-20 03:15:18,237:INFO:Set up train/test split.
2024-08-20 03:15:18,306:INFO:Set up index.
2024-08-20 03:15:18,320:INFO:Assigning column types.
2024-08-20 03:15:18,394:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 03:15:18,396:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,403:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,411:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,568:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,641:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,642:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:18,646:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:18,646:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,654:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,663:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,806:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,873:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,874:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:18,879:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:18,880:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 03:15:18,885:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:15:18,893:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,028:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,099:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,100:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:19,104:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:19,111:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,119:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,261:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,336:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,338:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:19,342:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:19,343:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 03:15:19,358:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,515:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,589:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,591:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:19,596:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:19,613:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,772:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,842:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:19,842:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:19,845:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:19,845:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 03:15:19,997:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:20,061:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:20,062:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:20,065:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:20,240:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:20,315:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 03:15:20,315:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:20,319:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:20,320:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 03:15:20,472:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:20,548:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:20,554:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:20,695:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 03:15:20,759:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:20,763:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:20,764:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 03:15:20,965:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:20,969:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:21,188:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:21,193:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:21,195:INFO:Preparing preprocessing pipeline...
2024-08-20 03:15:21,195:INFO:Set up simple imputation.
2024-08-20 03:15:21,239:INFO:Set up encoding of categorical features.
2024-08-20 03:15:22,391:INFO:Finished creating preprocessing pipeline.
2024-08-20 03:15:22,403:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2024-08-20 03:15:22,403:INFO:Creating final display dataframe.
2024-08-20 03:15:26,002:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target      resale_price
2                   Target type        Regression
3           Original data shape      (176460, 15)
4        Transformed data shape      (176460, 57)
5   Transformed train set shape      (123521, 57)
6    Transformed test set shape       (52939, 57)
7              Numeric features                 7
8          Categorical features                 7
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              1369
2024-08-20 03:15:26,241:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:26,246:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:26,464:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 03:15:26,468:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 03:15:26,470:INFO:setup() successfully completed in 8.54s...............
2024-08-20 03:15:26,522:INFO:Initializing compare_models()
2024-08-20 03:15:26,522:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-08-20 03:15:26,522:INFO:Checking exceptions
2024-08-20 03:15:26,558:INFO:Preparing display monitor
2024-08-20 03:15:26,590:INFO:Initializing Linear Regression
2024-08-20 03:15:26,590:INFO:Total runtime is 0.0 minutes
2024-08-20 03:15:26,595:INFO:SubProcess create_model() called ==================================
2024-08-20 03:15:26,595:INFO:Initializing create_model()
2024-08-20 03:15:26,595:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:15:26,595:INFO:Checking exceptions
2024-08-20 03:15:26,595:INFO:Importing libraries
2024-08-20 03:15:26,595:INFO:Copying training dataset
2024-08-20 03:15:26,674:INFO:Defining folds
2024-08-20 03:15:26,674:INFO:Declaring metric variables
2024-08-20 03:15:26,679:INFO:Importing untrained model
2024-08-20 03:15:26,685:INFO:Linear Regression Imported successfully
2024-08-20 03:15:26,694:INFO:Starting cross validation
2024-08-20 03:15:26,710:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:16:14,443:INFO:Calculating mean and std
2024-08-20 03:16:14,452:INFO:Creating metrics dataframe
2024-08-20 03:16:14,456:INFO:Uploading results into container
2024-08-20 03:16:14,457:INFO:Uploading model into container now
2024-08-20 03:16:14,458:INFO:_master_model_container: 1
2024-08-20 03:16:14,458:INFO:_display_container: 2
2024-08-20 03:16:14,458:INFO:LinearRegression(copy_X=True, fit_intercept=True, n_jobs=-1, positive=False)
2024-08-20 03:16:14,458:INFO:create_model() successfully completed......................................
2024-08-20 03:16:14,981:INFO:SubProcess create_model() end ==================================
2024-08-20 03:16:14,981:INFO:Creating metrics dataframe
2024-08-20 03:16:14,996:INFO:Initializing Lasso Regression
2024-08-20 03:16:14,996:INFO:Total runtime is 0.8067638715108235 minutes
2024-08-20 03:16:15,006:INFO:SubProcess create_model() called ==================================
2024-08-20 03:16:15,006:INFO:Initializing create_model()
2024-08-20 03:16:15,007:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:16:15,009:INFO:Checking exceptions
2024-08-20 03:16:15,009:INFO:Importing libraries
2024-08-20 03:16:15,009:INFO:Copying training dataset
2024-08-20 03:16:15,146:INFO:Defining folds
2024-08-20 03:16:15,146:INFO:Declaring metric variables
2024-08-20 03:16:15,155:INFO:Importing untrained model
2024-08-20 03:16:15,161:INFO:Lasso Regression Imported successfully
2024-08-20 03:16:15,178:INFO:Starting cross validation
2024-08-20 03:16:15,183:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:17:49,353:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.398e+13, tolerance: 3.021e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:17:49,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.402e+13, tolerance: 3.026e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:17:49,357:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.434e+13, tolerance: 3.037e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:17:49,391:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.407e+13, tolerance: 3.024e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:18:57,020:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.685e+14, tolerance: 3.026e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:19:00,077:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.463e+13, tolerance: 3.038e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:19:00,424:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.409e+13, tolerance: 3.022e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:19:00,581:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.803e+14, tolerance: 3.035e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:19:00,961:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.405e+13, tolerance: 3.028e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:19:01,884:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.753e+14, tolerance: 3.029e+11
  model = cd_fast.enet_coordinate_descent(

2024-08-20 03:19:02,137:INFO:Calculating mean and std
2024-08-20 03:19:02,139:INFO:Creating metrics dataframe
2024-08-20 03:19:02,145:INFO:Uploading results into container
2024-08-20 03:19:02,145:INFO:Uploading model into container now
2024-08-20 03:19:02,146:INFO:_master_model_container: 2
2024-08-20 03:19:02,146:INFO:_display_container: 2
2024-08-20 03:19:02,147:INFO:Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000, positive=False,
      precompute=False, random_state=123, selection='cyclic', tol=0.0001,
      warm_start=False)
2024-08-20 03:19:02,147:INFO:create_model() successfully completed......................................
2024-08-20 03:19:02,473:INFO:SubProcess create_model() end ==================================
2024-08-20 03:19:02,473:INFO:Creating metrics dataframe
2024-08-20 03:19:02,487:INFO:Initializing Ridge Regression
2024-08-20 03:19:02,487:INFO:Total runtime is 3.598279289404551 minutes
2024-08-20 03:19:02,497:INFO:SubProcess create_model() called ==================================
2024-08-20 03:19:02,497:INFO:Initializing create_model()
2024-08-20 03:19:02,498:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:19:02,500:INFO:Checking exceptions
2024-08-20 03:19:02,500:INFO:Importing libraries
2024-08-20 03:19:02,500:INFO:Copying training dataset
2024-08-20 03:19:02,605:INFO:Defining folds
2024-08-20 03:19:02,605:INFO:Declaring metric variables
2024-08-20 03:19:02,610:INFO:Importing untrained model
2024-08-20 03:19:02,616:INFO:Ridge Regression Imported successfully
2024-08-20 03:19:02,625:INFO:Starting cross validation
2024-08-20 03:19:02,627:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:19:17,203:INFO:Calculating mean and std
2024-08-20 03:19:17,205:INFO:Creating metrics dataframe
2024-08-20 03:19:17,208:INFO:Uploading results into container
2024-08-20 03:19:17,209:INFO:Uploading model into container now
2024-08-20 03:19:17,210:INFO:_master_model_container: 3
2024-08-20 03:19:17,210:INFO:_display_container: 2
2024-08-20 03:19:17,211:INFO:Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None, positive=False,
      random_state=123, solver='auto', tol=0.0001)
2024-08-20 03:19:17,211:INFO:create_model() successfully completed......................................
2024-08-20 03:19:17,529:INFO:SubProcess create_model() end ==================================
2024-08-20 03:19:17,529:INFO:Creating metrics dataframe
2024-08-20 03:19:17,546:INFO:Initializing Elastic Net
2024-08-20 03:19:17,546:INFO:Total runtime is 3.849261275927226 minutes
2024-08-20 03:19:17,563:INFO:SubProcess create_model() called ==================================
2024-08-20 03:19:17,563:INFO:Initializing create_model()
2024-08-20 03:19:17,566:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:19:17,568:INFO:Checking exceptions
2024-08-20 03:19:17,568:INFO:Importing libraries
2024-08-20 03:19:17,568:INFO:Copying training dataset
2024-08-20 03:19:17,645:INFO:Defining folds
2024-08-20 03:19:17,646:INFO:Declaring metric variables
2024-08-20 03:19:17,651:INFO:Importing untrained model
2024-08-20 03:19:17,656:INFO:Elastic Net Imported successfully
2024-08-20 03:19:17,675:INFO:Starting cross validation
2024-08-20 03:19:17,681:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:19:41,631:INFO:Calculating mean and std
2024-08-20 03:19:41,639:INFO:Creating metrics dataframe
2024-08-20 03:19:41,645:INFO:Uploading results into container
2024-08-20 03:19:41,646:INFO:Uploading model into container now
2024-08-20 03:19:41,647:INFO:_master_model_container: 4
2024-08-20 03:19:41,647:INFO:_display_container: 2
2024-08-20 03:19:41,648:INFO:ElasticNet(alpha=1.0, copy_X=True, fit_intercept=True, l1_ratio=0.5,
           max_iter=1000, positive=False, precompute=False, random_state=123,
           selection='cyclic', tol=0.0001, warm_start=False)
2024-08-20 03:19:41,648:INFO:create_model() successfully completed......................................
2024-08-20 03:19:41,923:INFO:SubProcess create_model() end ==================================
2024-08-20 03:19:41,923:INFO:Creating metrics dataframe
2024-08-20 03:19:41,941:INFO:Initializing Least Angle Regression
2024-08-20 03:19:41,941:INFO:Total runtime is 4.255846158663432 minutes
2024-08-20 03:19:41,960:INFO:SubProcess create_model() called ==================================
2024-08-20 03:19:41,960:INFO:Initializing create_model()
2024-08-20 03:19:41,961:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:19:41,961:INFO:Checking exceptions
2024-08-20 03:19:41,961:INFO:Importing libraries
2024-08-20 03:19:41,961:INFO:Copying training dataset
2024-08-20 03:19:42,065:INFO:Defining folds
2024-08-20 03:19:42,066:INFO:Declaring metric variables
2024-08-20 03:19:42,072:INFO:Importing untrained model
2024-08-20 03:19:42,082:INFO:Least Angle Regression Imported successfully
2024-08-20 03:19:42,100:INFO:Starting cross validation
2024-08-20 03:19:42,106:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:19:55,873:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 43 iterations, i.e. alpha=2.038e+02, with an active set of 36 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,007:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 58 iterations, i.e. alpha=1.592e+02, with an active set of 48 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,018:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 65 iterations, i.e. alpha=6.092e+01, with an active set of 55 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,327:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 42 iterations, i.e. alpha=2.067e+02, with an active set of 35 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,329:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 48 iterations, i.e. alpha=1.776e+02, with an active set of 41 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,333:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 68 iterations, i.e. alpha=9.856e+02, with an active set of 55 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,811:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 69 iterations, i.e. alpha=1.401e+05, with an active set of 55 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,839:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 46 iterations, i.e. alpha=2.417e+02, with an active set of 38 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,846:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 64 iterations, i.e. alpha=1.681e+02, with an active set of 54 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,846:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 64 iterations, i.e. alpha=1.466e+02, with an active set of 54 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:56,973:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 67 iterations, i.e. alpha=5.767e+02, with an active set of 55 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:57,848:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 65 iterations, i.e. alpha=2.448e+02, with an active set of 55 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:58,142:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 43 iterations, i.e. alpha=1.996e+02, with an active set of 36 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:58,153:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 68 iterations, i.e. alpha=8.873e+03, with an active set of 55 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:19:58,348:INFO:Calculating mean and std
2024-08-20 03:19:58,350:INFO:Creating metrics dataframe
2024-08-20 03:19:58,353:INFO:Uploading results into container
2024-08-20 03:19:58,354:INFO:Uploading model into container now
2024-08-20 03:19:58,356:INFO:_master_model_container: 5
2024-08-20 03:19:58,356:INFO:_display_container: 2
2024-08-20 03:19:58,356:INFO:Lars(copy_X=True, eps=2.220446049250313e-16, fit_intercept=True, fit_path=True,
     jitter=None, n_nonzero_coefs=500, precompute='auto', random_state=123,
     verbose=False)
2024-08-20 03:19:58,356:INFO:create_model() successfully completed......................................
2024-08-20 03:19:58,628:INFO:SubProcess create_model() end ==================================
2024-08-20 03:19:58,628:INFO:Creating metrics dataframe
2024-08-20 03:19:58,642:INFO:Initializing Lasso Least Angle Regression
2024-08-20 03:19:58,642:INFO:Total runtime is 4.534191457430522 minutes
2024-08-20 03:19:58,646:INFO:SubProcess create_model() called ==================================
2024-08-20 03:19:58,647:INFO:Initializing create_model()
2024-08-20 03:19:58,647:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:19:58,647:INFO:Checking exceptions
2024-08-20 03:19:58,647:INFO:Importing libraries
2024-08-20 03:19:58,647:INFO:Copying training dataset
2024-08-20 03:19:58,787:INFO:Defining folds
2024-08-20 03:19:58,788:INFO:Declaring metric variables
2024-08-20 03:19:58,797:INFO:Importing untrained model
2024-08-20 03:19:58,805:INFO:Lasso Least Angle Regression Imported successfully
2024-08-20 03:19:58,815:INFO:Starting cross validation
2024-08-20 03:19:58,819:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:20:14,412:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 64 iterations, alpha=2.533e+01, previous alpha=2.531e+01, with an active set of 43 regressors.
  warnings.warn(

2024-08-20 03:20:14,473:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 60 iterations, i.e. alpha=3.292e+01, with an active set of 40 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,475:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 62 iterations, i.e. alpha=2.590e+01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,476:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 64 iterations, alpha=2.225e+01, previous alpha=2.036e+01, with an active set of 43 regressors.
  warnings.warn(

2024-08-20 03:20:14,484:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 71 iterations, alpha=1.657e+01, previous alpha=1.652e+01, with an active set of 46 regressors.
  warnings.warn(

2024-08-20 03:20:14,508:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 60 iterations, i.e. alpha=3.398e+01, with an active set of 40 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,510:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 65 iterations, i.e. alpha=2.166e+01, with an active set of 41 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,513:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 68 iterations, i.e. alpha=1.754e+01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,516:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 60 iterations, i.e. alpha=3.563e+01, with an active set of 40 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,517:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 76 iterations, alpha=1.186e+01, previous alpha=1.185e+01, with an active set of 47 regressors.
  warnings.warn(

2024-08-20 03:20:14,538:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 74 iterations, alpha=1.144e+01, previous alpha=1.143e+01, with an active set of 49 regressors.
  warnings.warn(

2024-08-20 03:20:14,540:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 78 iterations, alpha=8.844e+00, previous alpha=6.652e+00, with an active set of 51 regressors.
  warnings.warn(

2024-08-20 03:20:14,557:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 60 iterations, i.e. alpha=3.546e+01, with an active set of 40 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,569:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 70 iterations, i.e. alpha=1.921e+01, with an active set of 44 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,570:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 71 iterations, i.e. alpha=1.472e+01, with an active set of 45 regressors, and the smallest cholesky pivot element being 8.429e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-08-20 03:20:14,573:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 75 iterations, alpha=8.837e+00, previous alpha=7.462e+00, with an active set of 48 regressors.
  warnings.warn(

2024-08-20 03:20:14,599:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 87 iterations, alpha=2.405e+00, previous alpha=2.405e+00, with an active set of 52 regressors.
  warnings.warn(

2024-08-20 03:20:15,384:INFO:Calculating mean and std
2024-08-20 03:20:15,386:INFO:Creating metrics dataframe
2024-08-20 03:20:15,389:INFO:Uploading results into container
2024-08-20 03:20:15,390:INFO:Uploading model into container now
2024-08-20 03:20:15,391:INFO:_master_model_container: 6
2024-08-20 03:20:15,392:INFO:_display_container: 2
2024-08-20 03:20:15,392:INFO:LassoLars(alpha=1.0, copy_X=True, eps=2.220446049250313e-16, fit_intercept=True,
          fit_path=True, jitter=None, max_iter=500, positive=False,
          precompute='auto', random_state=123, verbose=False)
2024-08-20 03:20:15,392:INFO:create_model() successfully completed......................................
2024-08-20 03:20:15,738:INFO:SubProcess create_model() end ==================================
2024-08-20 03:20:15,738:INFO:Creating metrics dataframe
2024-08-20 03:20:15,750:INFO:Initializing Orthogonal Matching Pursuit
2024-08-20 03:20:15,751:INFO:Total runtime is 4.8193449735641485 minutes
2024-08-20 03:20:15,756:INFO:SubProcess create_model() called ==================================
2024-08-20 03:20:15,757:INFO:Initializing create_model()
2024-08-20 03:20:15,757:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:20:15,757:INFO:Checking exceptions
2024-08-20 03:20:15,757:INFO:Importing libraries
2024-08-20 03:20:15,757:INFO:Copying training dataset
2024-08-20 03:20:15,887:INFO:Defining folds
2024-08-20 03:20:15,887:INFO:Declaring metric variables
2024-08-20 03:20:15,893:INFO:Importing untrained model
2024-08-20 03:20:15,898:INFO:Orthogonal Matching Pursuit Imported successfully
2024-08-20 03:20:15,908:INFO:Starting cross validation
2024-08-20 03:20:15,912:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:20:32,267:INFO:Calculating mean and std
2024-08-20 03:20:32,269:INFO:Creating metrics dataframe
2024-08-20 03:20:32,271:INFO:Uploading results into container
2024-08-20 03:20:32,271:INFO:Uploading model into container now
2024-08-20 03:20:32,272:INFO:_master_model_container: 7
2024-08-20 03:20:32,272:INFO:_display_container: 2
2024-08-20 03:20:32,272:INFO:OrthogonalMatchingPursuit(fit_intercept=True, n_nonzero_coefs=None,
                          precompute='auto', tol=None)
2024-08-20 03:20:32,272:INFO:create_model() successfully completed......................................
2024-08-20 03:20:32,585:INFO:SubProcess create_model() end ==================================
2024-08-20 03:20:32,585:INFO:Creating metrics dataframe
2024-08-20 03:20:32,604:INFO:Initializing Bayesian Ridge
2024-08-20 03:20:32,607:INFO:Total runtime is 5.100263957182567 minutes
2024-08-20 03:20:32,615:INFO:SubProcess create_model() called ==================================
2024-08-20 03:20:32,619:INFO:Initializing create_model()
2024-08-20 03:20:32,619:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:20:32,619:INFO:Checking exceptions
2024-08-20 03:20:32,619:INFO:Importing libraries
2024-08-20 03:20:32,619:INFO:Copying training dataset
2024-08-20 03:20:32,764:INFO:Defining folds
2024-08-20 03:20:32,764:INFO:Declaring metric variables
2024-08-20 03:20:32,771:INFO:Importing untrained model
2024-08-20 03:20:32,778:INFO:Bayesian Ridge Imported successfully
2024-08-20 03:20:32,786:INFO:Starting cross validation
2024-08-20 03:20:32,790:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:20:53,809:INFO:Calculating mean and std
2024-08-20 03:20:53,811:INFO:Creating metrics dataframe
2024-08-20 03:20:53,817:INFO:Uploading results into container
2024-08-20 03:20:53,818:INFO:Uploading model into container now
2024-08-20 03:20:53,818:INFO:_master_model_container: 8
2024-08-20 03:20:53,818:INFO:_display_container: 2
2024-08-20 03:20:53,819:INFO:BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,
              compute_score=False, copy_X=True, fit_intercept=True,
              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, max_iter=None,
              n_iter='deprecated', tol=0.001, verbose=False)
2024-08-20 03:20:53,819:INFO:create_model() successfully completed......................................
2024-08-20 03:20:54,246:INFO:SubProcess create_model() end ==================================
2024-08-20 03:20:54,248:INFO:Creating metrics dataframe
2024-08-20 03:20:54,260:INFO:Initializing Passive Aggressive Regressor
2024-08-20 03:20:54,261:INFO:Total runtime is 5.461178672313691 minutes
2024-08-20 03:20:54,267:INFO:SubProcess create_model() called ==================================
2024-08-20 03:20:54,268:INFO:Initializing create_model()
2024-08-20 03:20:54,268:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:20:54,268:INFO:Checking exceptions
2024-08-20 03:20:54,268:INFO:Importing libraries
2024-08-20 03:20:54,268:INFO:Copying training dataset
2024-08-20 03:20:54,477:INFO:Defining folds
2024-08-20 03:20:54,478:INFO:Declaring metric variables
2024-08-20 03:20:54,487:INFO:Importing untrained model
2024-08-20 03:20:54,497:INFO:Passive Aggressive Regressor Imported successfully
2024-08-20 03:20:54,511:INFO:Starting cross validation
2024-08-20 03:20:54,515:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:21:14,831:INFO:Calculating mean and std
2024-08-20 03:21:14,832:INFO:Creating metrics dataframe
2024-08-20 03:21:14,838:INFO:Uploading results into container
2024-08-20 03:21:14,847:INFO:Uploading model into container now
2024-08-20 03:21:14,848:INFO:_master_model_container: 9
2024-08-20 03:21:14,848:INFO:_display_container: 2
2024-08-20 03:21:14,848:INFO:PassiveAggressiveRegressor(C=1.0, average=False, early_stopping=False,
                           epsilon=0.1, fit_intercept=True,
                           loss='epsilon_insensitive', max_iter=1000,
                           n_iter_no_change=5, random_state=123, shuffle=True,
                           tol=0.001, validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-08-20 03:21:14,848:INFO:create_model() successfully completed......................................
2024-08-20 03:21:15,126:INFO:SubProcess create_model() end ==================================
2024-08-20 03:21:15,126:INFO:Creating metrics dataframe
2024-08-20 03:21:15,139:INFO:Initializing Huber Regressor
2024-08-20 03:21:15,139:INFO:Total runtime is 5.809143547217052 minutes
2024-08-20 03:21:15,141:INFO:SubProcess create_model() called ==================================
2024-08-20 03:21:15,142:INFO:Initializing create_model()
2024-08-20 03:21:15,142:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:21:15,142:INFO:Checking exceptions
2024-08-20 03:21:15,142:INFO:Importing libraries
2024-08-20 03:21:15,142:INFO:Copying training dataset
2024-08-20 03:21:15,233:INFO:Defining folds
2024-08-20 03:21:15,233:INFO:Declaring metric variables
2024-08-20 03:21:15,243:INFO:Importing untrained model
2024-08-20 03:21:15,256:INFO:Huber Regressor Imported successfully
2024-08-20 03:21:15,274:INFO:Starting cross validation
2024-08-20 03:21:15,281:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:22:02,716:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:02,716:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:02,716:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:02,716:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:02,833:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:02,836:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:02,843:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:03,356:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-08-20 03:22:03,780:INFO:Calculating mean and std
2024-08-20 03:22:03,781:INFO:Creating metrics dataframe
2024-08-20 03:22:03,784:INFO:Uploading results into container
2024-08-20 03:22:03,786:INFO:Uploading model into container now
2024-08-20 03:22:03,787:INFO:_master_model_container: 10
2024-08-20 03:22:03,787:INFO:_display_container: 2
2024-08-20 03:22:03,788:INFO:HuberRegressor(alpha=0.0001, epsilon=1.35, fit_intercept=True, max_iter=100,
               tol=1e-05, warm_start=False)
2024-08-20 03:22:03,788:INFO:create_model() successfully completed......................................
2024-08-20 03:22:04,233:INFO:SubProcess create_model() end ==================================
2024-08-20 03:22:04,233:INFO:Creating metrics dataframe
2024-08-20 03:22:04,250:INFO:Initializing K Neighbors Regressor
2024-08-20 03:22:04,252:INFO:Total runtime is 6.627696271737417 minutes
2024-08-20 03:22:04,260:INFO:SubProcess create_model() called ==================================
2024-08-20 03:22:04,261:INFO:Initializing create_model()
2024-08-20 03:22:04,261:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:22:04,264:INFO:Checking exceptions
2024-08-20 03:22:04,264:INFO:Importing libraries
2024-08-20 03:22:04,264:INFO:Copying training dataset
2024-08-20 03:22:04,392:INFO:Defining folds
2024-08-20 03:22:04,393:INFO:Declaring metric variables
2024-08-20 03:22:04,401:INFO:Importing untrained model
2024-08-20 03:22:04,410:INFO:K Neighbors Regressor Imported successfully
2024-08-20 03:22:04,429:INFO:Starting cross validation
2024-08-20 03:22:04,437:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:23:53,717:INFO:Calculating mean and std
2024-08-20 03:23:53,719:INFO:Creating metrics dataframe
2024-08-20 03:23:53,721:INFO:Uploading results into container
2024-08-20 03:23:53,722:INFO:Uploading model into container now
2024-08-20 03:23:53,723:INFO:_master_model_container: 11
2024-08-20 03:23:53,723:INFO:_display_container: 2
2024-08-20 03:23:53,724:INFO:KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform')
2024-08-20 03:23:53,724:INFO:create_model() successfully completed......................................
2024-08-20 03:23:54,161:INFO:SubProcess create_model() end ==================================
2024-08-20 03:23:54,161:INFO:Creating metrics dataframe
2024-08-20 03:23:54,178:INFO:Initializing Decision Tree Regressor
2024-08-20 03:23:54,178:INFO:Total runtime is 8.459806088606516 minutes
2024-08-20 03:23:54,184:INFO:SubProcess create_model() called ==================================
2024-08-20 03:23:54,184:INFO:Initializing create_model()
2024-08-20 03:23:54,185:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:23:54,185:INFO:Checking exceptions
2024-08-20 03:23:54,185:INFO:Importing libraries
2024-08-20 03:23:54,185:INFO:Copying training dataset
2024-08-20 03:23:54,313:INFO:Defining folds
2024-08-20 03:23:54,313:INFO:Declaring metric variables
2024-08-20 03:23:54,319:INFO:Importing untrained model
2024-08-20 03:23:54,327:INFO:Decision Tree Regressor Imported successfully
2024-08-20 03:23:54,343:INFO:Starting cross validation
2024-08-20 03:23:54,346:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:24:28,362:INFO:Calculating mean and std
2024-08-20 03:24:28,364:INFO:Creating metrics dataframe
2024-08-20 03:24:28,367:INFO:Uploading results into container
2024-08-20 03:24:28,368:INFO:Uploading model into container now
2024-08-20 03:24:28,368:INFO:_master_model_container: 12
2024-08-20 03:24:28,369:INFO:_display_container: 2
2024-08-20 03:24:28,369:INFO:DecisionTreeRegressor(ccp_alpha=0.0, criterion='squared_error', max_depth=None,
                      max_features=None, max_leaf_nodes=None,
                      min_impurity_decrease=0.0, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 03:24:28,370:INFO:create_model() successfully completed......................................
2024-08-20 03:24:28,696:INFO:SubProcess create_model() end ==================================
2024-08-20 03:24:28,696:INFO:Creating metrics dataframe
2024-08-20 03:24:28,712:INFO:Initializing Random Forest Regressor
2024-08-20 03:24:28,713:INFO:Total runtime is 9.035381317138672 minutes
2024-08-20 03:24:28,716:INFO:SubProcess create_model() called ==================================
2024-08-20 03:24:28,717:INFO:Initializing create_model()
2024-08-20 03:24:28,717:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:24:28,717:INFO:Checking exceptions
2024-08-20 03:24:28,717:INFO:Importing libraries
2024-08-20 03:24:28,717:INFO:Copying training dataset
2024-08-20 03:24:28,857:INFO:Defining folds
2024-08-20 03:24:28,857:INFO:Declaring metric variables
2024-08-20 03:24:28,865:INFO:Importing untrained model
2024-08-20 03:24:28,872:INFO:Random Forest Regressor Imported successfully
2024-08-20 03:24:28,880:INFO:Starting cross validation
2024-08-20 03:24:28,883:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:40:29,215:INFO:Calculating mean and std
2024-08-20 03:40:29,307:INFO:Creating metrics dataframe
2024-08-20 03:40:29,433:INFO:Uploading results into container
2024-08-20 03:40:29,441:INFO:Uploading model into container now
2024-08-20 03:40:29,448:INFO:_master_model_container: 13
2024-08-20 03:40:29,448:INFO:_display_container: 2
2024-08-20 03:40:29,457:INFO:RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='squared_error',
                      max_depth=None, max_features=1.0, max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_samples_leaf=1, min_samples_split=2,
                      min_weight_fraction_leaf=0.0, monotonic_cst=None,
                      n_estimators=100, n_jobs=-1, oob_score=False,
                      random_state=123, verbose=0, warm_start=False)
2024-08-20 03:40:29,457:INFO:create_model() successfully completed......................................
2024-08-20 03:40:31,563:INFO:SubProcess create_model() end ==================================
2024-08-20 03:40:31,563:INFO:Creating metrics dataframe
2024-08-20 03:40:31,622:INFO:Initializing Extra Trees Regressor
2024-08-20 03:40:31,625:INFO:Total runtime is 25.08388098478317 minutes
2024-08-20 03:40:31,638:INFO:SubProcess create_model() called ==================================
2024-08-20 03:40:31,639:INFO:Initializing create_model()
2024-08-20 03:40:31,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:40:31,641:INFO:Checking exceptions
2024-08-20 03:40:31,642:INFO:Importing libraries
2024-08-20 03:40:31,645:INFO:Copying training dataset
2024-08-20 03:40:31,825:INFO:Defining folds
2024-08-20 03:40:31,825:INFO:Declaring metric variables
2024-08-20 03:40:31,834:INFO:Importing untrained model
2024-08-20 03:40:31,847:INFO:Extra Trees Regressor Imported successfully
2024-08-20 03:40:31,874:INFO:Starting cross validation
2024-08-20 03:40:31,881:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:52:06,772:INFO:Calculating mean and std
2024-08-20 03:52:07,129:INFO:Creating metrics dataframe
2024-08-20 03:52:07,338:INFO:Uploading results into container
2024-08-20 03:52:07,354:INFO:Uploading model into container now
2024-08-20 03:52:07,380:INFO:_master_model_container: 14
2024-08-20 03:52:07,380:INFO:_display_container: 2
2024-08-20 03:52:07,397:INFO:ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='squared_error',
                    max_depth=None, max_features=1.0, max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_samples_leaf=1, min_samples_split=2,
                    min_weight_fraction_leaf=0.0, monotonic_cst=None,
                    n_estimators=100, n_jobs=-1, oob_score=False,
                    random_state=123, verbose=0, warm_start=False)
2024-08-20 03:52:07,397:INFO:create_model() successfully completed......................................
2024-08-20 03:52:09,850:INFO:SubProcess create_model() end ==================================
2024-08-20 03:52:09,850:INFO:Creating metrics dataframe
2024-08-20 03:52:09,900:INFO:Initializing AdaBoost Regressor
2024-08-20 03:52:09,901:INFO:Total runtime is 36.72184475262959 minutes
2024-08-20 03:52:09,909:INFO:SubProcess create_model() called ==================================
2024-08-20 03:52:09,910:INFO:Initializing create_model()
2024-08-20 03:52:09,911:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:52:09,911:INFO:Checking exceptions
2024-08-20 03:52:09,911:INFO:Importing libraries
2024-08-20 03:52:09,912:INFO:Copying training dataset
2024-08-20 03:52:10,124:INFO:Defining folds
2024-08-20 03:52:10,124:INFO:Declaring metric variables
2024-08-20 03:52:10,130:INFO:Importing untrained model
2024-08-20 03:52:10,139:INFO:AdaBoost Regressor Imported successfully
2024-08-20 03:52:10,153:INFO:Starting cross validation
2024-08-20 03:52:10,157:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 03:56:07,219:INFO:Calculating mean and std
2024-08-20 03:56:07,222:INFO:Creating metrics dataframe
2024-08-20 03:56:07,227:INFO:Uploading results into container
2024-08-20 03:56:07,228:INFO:Uploading model into container now
2024-08-20 03:56:07,229:INFO:_master_model_container: 15
2024-08-20 03:56:07,229:INFO:_display_container: 2
2024-08-20 03:56:07,230:INFO:AdaBoostRegressor(estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=123)
2024-08-20 03:56:07,230:INFO:create_model() successfully completed......................................
2024-08-20 03:56:07,542:INFO:SubProcess create_model() end ==================================
2024-08-20 03:56:07,542:INFO:Creating metrics dataframe
2024-08-20 03:56:07,570:INFO:Initializing Gradient Boosting Regressor
2024-08-20 03:56:07,570:INFO:Total runtime is 40.68299811283747 minutes
2024-08-20 03:56:07,578:INFO:SubProcess create_model() called ==================================
2024-08-20 03:56:07,579:INFO:Initializing create_model()
2024-08-20 03:56:07,579:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 03:56:07,580:INFO:Checking exceptions
2024-08-20 03:56:07,580:INFO:Importing libraries
2024-08-20 03:56:07,581:INFO:Copying training dataset
2024-08-20 03:56:07,714:INFO:Defining folds
2024-08-20 03:56:07,714:INFO:Declaring metric variables
2024-08-20 03:56:07,724:INFO:Importing untrained model
2024-08-20 03:56:07,733:INFO:Gradient Boosting Regressor Imported successfully
2024-08-20 03:56:07,755:INFO:Starting cross validation
2024-08-20 03:56:07,762:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 04:02:15,840:INFO:Calculating mean and std
2024-08-20 04:02:15,842:INFO:Creating metrics dataframe
2024-08-20 04:02:15,847:INFO:Uploading results into container
2024-08-20 04:02:15,849:INFO:Uploading model into container now
2024-08-20 04:02:15,849:INFO:_master_model_container: 16
2024-08-20 04:02:15,850:INFO:_display_container: 2
2024-08-20 04:02:15,851:INFO:GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=123, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False)
2024-08-20 04:02:15,855:INFO:create_model() successfully completed......................................
2024-08-20 04:02:16,164:INFO:SubProcess create_model() end ==================================
2024-08-20 04:02:16,164:INFO:Creating metrics dataframe
2024-08-20 04:02:16,195:INFO:Initializing Extreme Gradient Boosting
2024-08-20 04:02:16,195:INFO:Total runtime is 46.82675113280614 minutes
2024-08-20 04:02:16,203:INFO:SubProcess create_model() called ==================================
2024-08-20 04:02:16,204:INFO:Initializing create_model()
2024-08-20 04:02:16,205:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:02:16,205:INFO:Checking exceptions
2024-08-20 04:02:16,205:INFO:Importing libraries
2024-08-20 04:02:16,205:INFO:Copying training dataset
2024-08-20 04:02:16,352:INFO:Defining folds
2024-08-20 04:02:16,353:INFO:Declaring metric variables
2024-08-20 04:02:16,362:INFO:Importing untrained model
2024-08-20 04:02:16,373:INFO:Extreme Gradient Boosting Imported successfully
2024-08-20 04:02:16,389:INFO:Starting cross validation
2024-08-20 04:02:16,395:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 04:02:52,956:INFO:Calculating mean and std
2024-08-20 04:02:52,959:INFO:Creating metrics dataframe
2024-08-20 04:02:52,963:INFO:Uploading results into container
2024-08-20 04:02:52,964:INFO:Uploading model into container now
2024-08-20 04:02:52,965:INFO:_master_model_container: 17
2024-08-20 04:02:52,965:INFO:_display_container: 2
2024-08-20 04:02:52,967:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, objective='reg:squarederror', ...)
2024-08-20 04:02:52,967:INFO:create_model() successfully completed......................................
2024-08-20 04:02:53,283:INFO:SubProcess create_model() end ==================================
2024-08-20 04:02:53,284:INFO:Creating metrics dataframe
2024-08-20 04:02:53,304:INFO:Initializing Light Gradient Boosting Machine
2024-08-20 04:02:53,305:INFO:Total runtime is 47.445233949025464 minutes
2024-08-20 04:02:53,311:INFO:SubProcess create_model() called ==================================
2024-08-20 04:02:53,311:INFO:Initializing create_model()
2024-08-20 04:02:53,311:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:02:53,311:INFO:Checking exceptions
2024-08-20 04:02:53,311:INFO:Importing libraries
2024-08-20 04:02:53,311:INFO:Copying training dataset
2024-08-20 04:02:53,446:INFO:Defining folds
2024-08-20 04:02:53,446:INFO:Declaring metric variables
2024-08-20 04:02:53,454:INFO:Importing untrained model
2024-08-20 04:02:53,478:INFO:Light Gradient Boosting Machine Imported successfully
2024-08-20 04:02:53,496:INFO:Starting cross validation
2024-08-20 04:02:53,503:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 04:03:49,339:INFO:Calculating mean and std
2024-08-20 04:03:49,347:INFO:Creating metrics dataframe
2024-08-20 04:03:49,363:INFO:Uploading results into container
2024-08-20 04:03:49,364:INFO:Uploading model into container now
2024-08-20 04:03:49,365:INFO:_master_model_container: 18
2024-08-20 04:03:49,365:INFO:_display_container: 2
2024-08-20 04:03:49,366:INFO:LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
              importance_type='split', learning_rate=0.1, max_depth=-1,
              min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
              n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
              random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
              subsample_for_bin=200000, subsample_freq=0)
2024-08-20 04:03:49,366:INFO:create_model() successfully completed......................................
2024-08-20 04:03:49,771:INFO:SubProcess create_model() end ==================================
2024-08-20 04:03:49,771:INFO:Creating metrics dataframe
2024-08-20 04:03:49,794:INFO:Initializing CatBoost Regressor
2024-08-20 04:03:49,795:INFO:Total runtime is 48.38674784104028 minutes
2024-08-20 04:03:49,806:INFO:SubProcess create_model() called ==================================
2024-08-20 04:03:49,808:INFO:Initializing create_model()
2024-08-20 04:03:49,808:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=catboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:03:49,808:INFO:Checking exceptions
2024-08-20 04:03:49,808:INFO:Importing libraries
2024-08-20 04:03:49,809:INFO:Copying training dataset
2024-08-20 04:03:49,967:INFO:Defining folds
2024-08-20 04:03:49,967:INFO:Declaring metric variables
2024-08-20 04:03:49,974:INFO:Importing untrained model
2024-08-20 04:03:50,018:INFO:CatBoost Regressor Imported successfully
2024-08-20 04:03:50,038:INFO:Starting cross validation
2024-08-20 04:03:50,045:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 04:09:39,057:INFO:Calculating mean and std
2024-08-20 04:09:39,060:INFO:Creating metrics dataframe
2024-08-20 04:09:39,069:INFO:Uploading results into container
2024-08-20 04:09:39,070:INFO:Uploading model into container now
2024-08-20 04:09:39,071:INFO:_master_model_container: 19
2024-08-20 04:09:39,071:INFO:_display_container: 2
2024-08-20 04:09:39,071:INFO:<catboost.core.CatBoostRegressor object at 0x000001F222E653D0>
2024-08-20 04:09:39,071:INFO:create_model() successfully completed......................................
2024-08-20 04:09:39,525:INFO:SubProcess create_model() end ==================================
2024-08-20 04:09:39,525:INFO:Creating metrics dataframe
2024-08-20 04:09:39,550:INFO:Initializing Dummy Regressor
2024-08-20 04:09:39,550:INFO:Total runtime is 54.21600618362426 minutes
2024-08-20 04:09:39,562:INFO:SubProcess create_model() called ==================================
2024-08-20 04:09:39,562:INFO:Initializing create_model()
2024-08-20 04:09:39,563:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F20FBDEDD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:09:39,563:INFO:Checking exceptions
2024-08-20 04:09:39,563:INFO:Importing libraries
2024-08-20 04:09:39,564:INFO:Copying training dataset
2024-08-20 04:09:39,697:INFO:Defining folds
2024-08-20 04:09:39,698:INFO:Declaring metric variables
2024-08-20 04:09:39,703:INFO:Importing untrained model
2024-08-20 04:09:39,714:INFO:Dummy Regressor Imported successfully
2024-08-20 04:09:39,725:INFO:Starting cross validation
2024-08-20 04:09:39,728:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 04:09:54,253:INFO:Calculating mean and std
2024-08-20 04:09:54,262:INFO:Creating metrics dataframe
2024-08-20 04:09:54,267:INFO:Uploading results into container
2024-08-20 04:09:54,268:INFO:Uploading model into container now
2024-08-20 04:09:54,268:INFO:_master_model_container: 20
2024-08-20 04:09:54,268:INFO:_display_container: 2
2024-08-20 04:09:54,268:INFO:DummyRegressor(constant=None, quantile=None, strategy='mean')
2024-08-20 04:09:54,270:INFO:create_model() successfully completed......................................
2024-08-20 04:09:54,634:INFO:SubProcess create_model() end ==================================
2024-08-20 04:09:54,634:INFO:Creating metrics dataframe
2024-08-20 04:09:54,684:INFO:Initializing create_model()
2024-08-20 04:09:54,686:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F222E653D0>, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:09:54,686:INFO:Checking exceptions
2024-08-20 04:09:54,693:INFO:Importing libraries
2024-08-20 04:09:54,694:INFO:Copying training dataset
2024-08-20 04:09:54,827:INFO:Defining folds
2024-08-20 04:09:54,828:INFO:Declaring metric variables
2024-08-20 04:09:54,828:INFO:Importing untrained model
2024-08-20 04:09:54,829:INFO:Declaring custom model
2024-08-20 04:09:54,829:INFO:CatBoost Regressor Imported successfully
2024-08-20 04:09:54,835:INFO:Cross validation set to False
2024-08-20 04:09:54,835:INFO:Fitting Model
2024-08-20 04:10:47,884:INFO:<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>
2024-08-20 04:10:47,884:INFO:create_model() successfully completed......................................
2024-08-20 04:10:48,298:INFO:_master_model_container: 20
2024-08-20 04:10:48,298:INFO:_display_container: 2
2024-08-20 04:10:48,299:INFO:<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>
2024-08-20 04:10:48,299:INFO:compare_models() successfully completed......................................
2024-08-20 04:15:51,230:INFO:Initializing evaluate_model()
2024-08-20 04:15:51,230:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 04:15:51,289:INFO:Initializing plot_model()
2024-08-20 04:15:51,290:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=pipeline, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:15:51,290:INFO:Checking exceptions
2024-08-20 04:15:51,331:INFO:Preloading libraries
2024-08-20 04:15:51,338:INFO:Copying training dataset
2024-08-20 04:15:51,338:INFO:Plot type: pipeline
2024-08-20 04:15:51,719:INFO:Visual Rendered Successfully
2024-08-20 04:15:52,012:INFO:plot_model() successfully completed......................................
2024-08-20 04:15:55,500:INFO:Initializing plot_model()
2024-08-20 04:15:55,500:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=parameter, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:15:55,500:INFO:Checking exceptions
2024-08-20 04:15:55,527:INFO:Preloading libraries
2024-08-20 04:15:55,535:INFO:Copying training dataset
2024-08-20 04:15:55,535:INFO:Plot type: parameter
2024-08-20 04:15:55,552:INFO:Visual Rendered Successfully
2024-08-20 04:15:55,796:INFO:plot_model() successfully completed......................................
2024-08-20 04:15:56,041:INFO:Initializing plot_model()
2024-08-20 04:15:56,041:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=residuals, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:15:56,041:INFO:Checking exceptions
2024-08-20 04:15:56,070:INFO:Preloading libraries
2024-08-20 04:15:56,076:INFO:Copying training dataset
2024-08-20 04:15:56,076:INFO:Plot type: residuals
2024-08-20 04:15:56,959:INFO:Fitting Model
2024-08-20 04:15:57,164:INFO:Scoring test/hold-out set
2024-08-20 04:16:00,010:INFO:Visual Rendered Successfully
2024-08-20 04:16:00,366:INFO:plot_model() successfully completed......................................
2024-08-20 04:16:00,411:INFO:Initializing plot_model()
2024-08-20 04:16:00,411:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=tree, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:16:00,411:INFO:Checking exceptions
2024-08-20 04:16:03,110:INFO:Initializing plot_model()
2024-08-20 04:16:03,110:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=vc, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:16:03,110:INFO:Checking exceptions
2024-08-20 04:16:03,148:INFO:Preloading libraries
2024-08-20 04:16:03,157:INFO:Copying training dataset
2024-08-20 04:16:03,158:INFO:Plot type: vc
2024-08-20 04:16:03,158:INFO:Determining param_name
2024-08-20 04:16:03,159:INFO:param_name: depth
2024-08-20 04:16:04,044:INFO:Fitting Model
2024-08-20 04:30:25,183:INFO:Initializing evaluate_model()
2024-08-20 04:30:25,183:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 04:30:25,288:INFO:Initializing plot_model()
2024-08-20 04:30:25,290:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=pipeline, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:25,290:INFO:Checking exceptions
2024-08-20 04:30:25,314:INFO:Preloading libraries
2024-08-20 04:30:25,317:INFO:Copying training dataset
2024-08-20 04:30:25,317:INFO:Plot type: pipeline
2024-08-20 04:30:25,626:INFO:Visual Rendered Successfully
2024-08-20 04:30:26,094:INFO:plot_model() successfully completed......................................
2024-08-20 04:30:26,143:INFO:Initializing plot_model()
2024-08-20 04:30:26,143:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=pipeline, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:26,143:INFO:Checking exceptions
2024-08-20 04:30:26,198:INFO:Preloading libraries
2024-08-20 04:30:26,209:INFO:Copying training dataset
2024-08-20 04:30:26,209:INFO:Plot type: pipeline
2024-08-20 04:30:26,452:INFO:Visual Rendered Successfully
2024-08-20 04:30:26,788:INFO:plot_model() successfully completed......................................
2024-08-20 04:30:31,966:INFO:Initializing plot_model()
2024-08-20 04:30:31,966:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=parameter, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:31,966:INFO:Checking exceptions
2024-08-20 04:30:32,076:INFO:Preloading libraries
2024-08-20 04:30:32,102:INFO:Copying training dataset
2024-08-20 04:30:32,103:INFO:Plot type: parameter
2024-08-20 04:30:32,145:INFO:Visual Rendered Successfully
2024-08-20 04:30:32,885:INFO:plot_model() successfully completed......................................
2024-08-20 04:30:36,683:INFO:Initializing plot_model()
2024-08-20 04:30:36,683:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=residuals, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:36,683:INFO:Checking exceptions
2024-08-20 04:30:36,709:INFO:Preloading libraries
2024-08-20 04:30:36,715:INFO:Copying training dataset
2024-08-20 04:30:36,715:INFO:Plot type: residuals
2024-08-20 04:30:37,612:INFO:Fitting Model
2024-08-20 04:30:37,846:INFO:Scoring test/hold-out set
2024-08-20 04:30:40,665:INFO:Visual Rendered Successfully
2024-08-20 04:30:40,979:INFO:plot_model() successfully completed......................................
2024-08-20 04:30:43,371:INFO:Initializing plot_model()
2024-08-20 04:30:43,371:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=error, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:43,372:INFO:Checking exceptions
2024-08-20 04:30:43,420:INFO:Preloading libraries
2024-08-20 04:30:43,437:INFO:Copying training dataset
2024-08-20 04:30:43,438:INFO:Plot type: error
2024-08-20 04:30:44,366:INFO:Fitting Model
2024-08-20 04:30:44,367:INFO:Scoring test/hold-out set
2024-08-20 04:30:45,676:INFO:Visual Rendered Successfully
2024-08-20 04:30:46,002:INFO:plot_model() successfully completed......................................
2024-08-20 04:30:47,822:INFO:Initializing plot_model()
2024-08-20 04:30:47,822:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=cooks, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:47,822:INFO:Checking exceptions
2024-08-20 04:30:47,851:INFO:Preloading libraries
2024-08-20 04:30:47,857:INFO:Copying training dataset
2024-08-20 04:30:47,857:INFO:Plot type: cooks
2024-08-20 04:30:48,687:INFO:Fitting Model
2024-08-20 04:30:55,807:INFO:Visual Rendered Successfully
2024-08-20 04:30:56,376:INFO:plot_model() successfully completed......................................
2024-08-20 04:30:58,414:INFO:Initializing plot_model()
2024-08-20 04:30:58,414:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=feature_all, scale=1, save=False, fold=KFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:30:58,415:INFO:Checking exceptions
2024-08-20 04:30:58,447:INFO:Preloading libraries
2024-08-20 04:30:58,453:INFO:Copying training dataset
2024-08-20 04:30:58,453:INFO:Plot type: feature_all
2024-08-20 04:30:58,737:WARNING:No coef_ found. Trying feature_importances_
2024-08-20 04:30:59,806:INFO:Visual Rendered Successfully
2024-08-20 04:31:00,102:INFO:plot_model() successfully completed......................................
2024-08-20 04:32:55,825:INFO:Initializing plot_model()
2024-08-20 04:32:55,826:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=feature, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:32:55,827:INFO:Checking exceptions
2024-08-20 04:32:59,727:INFO:Initializing plot_model()
2024-08-20 04:32:59,727:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=feature_all, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 04:32:59,729:INFO:Checking exceptions
2024-08-20 04:43:06,430:INFO:Initializing plot_model()
2024-08-20 04:43:06,431:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=residuals, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 04:43:06,431:INFO:Checking exceptions
2024-08-20 04:43:06,456:INFO:Preloading libraries
2024-08-20 04:43:06,459:INFO:Copying training dataset
2024-08-20 04:43:06,459:INFO:Plot type: residuals
2024-08-20 04:43:07,099:INFO:Fitting Model
2024-08-20 04:43:07,230:INFO:Scoring test/hold-out set
2024-08-20 04:43:08,876:INFO:Visual Rendered Successfully
2024-08-20 04:43:09,151:INFO:plot_model() successfully completed......................................
2024-08-20 04:43:09,152:INFO:Initializing plot_model()
2024-08-20 04:43:09,152:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=error, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 04:43:09,152:INFO:Checking exceptions
2024-08-20 04:43:09,168:INFO:Preloading libraries
2024-08-20 04:43:09,172:INFO:Copying training dataset
2024-08-20 04:43:09,172:INFO:Plot type: error
2024-08-20 04:43:09,759:INFO:Fitting Model
2024-08-20 04:43:09,760:INFO:Scoring test/hold-out set
2024-08-20 04:43:10,790:INFO:Visual Rendered Successfully
2024-08-20 04:43:11,036:INFO:plot_model() successfully completed......................................
2024-08-20 04:43:11,037:INFO:Initializing plot_model()
2024-08-20 04:43:11,037:INFO:plot_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 04:43:11,037:INFO:Checking exceptions
2024-08-20 04:43:11,081:INFO:Preloading libraries
2024-08-20 04:43:11,087:INFO:Copying training dataset
2024-08-20 04:43:11,088:INFO:Plot type: feature
2024-08-20 04:43:11,088:WARNING:No coef_ found. Trying feature_importances_
2024-08-20 04:43:11,572:INFO:Visual Rendered Successfully
2024-08-20 04:43:11,872:INFO:plot_model() successfully completed......................................
2024-08-20 04:43:31,510:INFO:Initializing finalize_model()
2024-08-20 04:43:31,510:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-08-20 04:43:31,510:INFO:Finalizing <catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>
2024-08-20 04:43:31,538:INFO:Initializing create_model()
2024-08-20 04:43:31,538:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=<catboost.core.CatBoostRegressor object at 0x000001F2141F4A10>, fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:43:31,538:INFO:Checking exceptions
2024-08-20 04:43:31,540:INFO:Importing libraries
2024-08-20 04:43:31,540:INFO:Copying training dataset
2024-08-20 04:43:31,544:INFO:Defining folds
2024-08-20 04:43:31,544:INFO:Declaring metric variables
2024-08-20 04:43:31,545:INFO:Importing untrained model
2024-08-20 04:43:31,545:INFO:Declaring custom model
2024-08-20 04:43:31,545:INFO:CatBoost Regressor Imported successfully
2024-08-20 04:43:31,547:INFO:Cross validation set to False
2024-08-20 04:43:31,547:INFO:Fitting Model
2024-08-20 04:43:52,997:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('ca...
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001F21EF8C450>)],
         verbose=False)
2024-08-20 04:43:52,998:INFO:create_model() successfully completed......................................
2024-08-20 04:43:53,310:INFO:_master_model_container: 20
2024-08-20 04:43:53,311:INFO:_display_container: 2
2024-08-20 04:43:53,322:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('ca...
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001F21EF8C450>)],
         verbose=False)
2024-08-20 04:43:53,322:INFO:finalize_model() successfully completed......................................
2024-08-20 04:44:04,143:INFO:Initializing predict_model()
2024-08-20 04:44:04,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F213F0D9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('ca...
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001F21EF8C450>)],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F22046ADE0>)
2024-08-20 04:44:04,143:INFO:Checking exceptions
2024-08-20 04:44:04,144:INFO:Preloading libraries
2024-08-20 04:44:04,146:INFO:Set up data.
2024-08-20 04:44:04,486:INFO:Set up index.
2024-08-20 04:44:10,620:INFO:Initializing save_model()
2024-08-20 04:44:10,621:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('ca...
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001F21EF8C450>)],
         verbose=False), model_name=final_hdb_resale_price_pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2024-08-20 04:44:10,621:INFO:Adding model into prep_pipe
2024-08-20 04:44:10,621:WARNING:Only Model saved as it was a pipeline.
2024-08-20 04:44:10,636:INFO:final_hdb_resale_price_pipeline.pkl saved in current working directory
2024-08-20 04:44:10,646:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['postal_code', 'floor_area_sqm',
                                             'lease_commence_date', 'latitude',
                                             'longitude', 'cbd_dist',
                                             'min_dist_mrt'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('ca...
                                    include=['block', 'street_name', 'town',
                                             'month'],
                                    transformer=TargetEncoder(cols=['block',
                                                                    'street_name',
                                                                    'town',
                                                                    'month'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 <catboost.core.CatBoostRegressor object at 0x000001F21EF8C450>)],
         verbose=False)
2024-08-20 04:44:10,646:INFO:save_model() successfully completed......................................
2024-08-20 04:57:26,401:INFO:Initializing plot_model()
2024-08-20 04:57:26,401:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=residuals, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 04:57:26,401:INFO:Checking exceptions
2024-08-20 04:57:52,369:INFO:Initializing finalize_model()
2024-08-20 04:57:52,369:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-08-20 04:57:52,370:INFO:Finalizing KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 04:57:52,376:INFO:Initializing create_model()
2024-08-20 04:57:52,376:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 04:57:52,376:INFO:Checking exceptions
2024-08-20 04:57:52,379:INFO:Importing libraries
2024-08-20 04:57:52,379:INFO:Copying training dataset
2024-08-20 04:57:52,380:INFO:Defining folds
2024-08-20 04:57:52,380:INFO:Declaring metric variables
2024-08-20 04:57:52,380:INFO:Importing untrained model
2024-08-20 04:57:52,380:INFO:Declaring custom model
2024-08-20 04:57:52,380:INFO:K Neighbors Classifier Imported successfully
2024-08-20 04:57:52,384:INFO:Cross validation set to False
2024-08-20 04:57:52,384:INFO:Fitting Model
2024-08-20 04:57:53,030:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 04:57:53,030:INFO:create_model() successfully completed......................................
2024-08-20 04:57:53,336:INFO:_master_model_container: 16
2024-08-20 04:57:53,336:INFO:_display_container: 3
2024-08-20 04:57:53,394:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 04:57:53,394:INFO:finalize_model() successfully completed......................................
2024-08-20 04:57:53,701:INFO:Initializing predict_model()
2024-08-20 04:57:53,701:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AAE7DB99E0>)
2024-08-20 04:57:53,701:INFO:Checking exceptions
2024-08-20 04:57:53,701:INFO:Preloading libraries
2024-08-20 04:57:53,704:INFO:Set up data.
2024-08-20 04:57:53,741:INFO:Set up index.
2024-08-20 04:59:13,495:INFO:Initializing save_model()
2024-08-20 04:59:13,495:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), model_name=final_mushroom_pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-08-20 04:59:13,495:INFO:Adding model into prep_pipe
2024-08-20 04:59:13,495:WARNING:Only Model saved as it was a pipeline.
2024-08-20 04:59:13,544:INFO:final_mushroom_pipeline.pkl saved in current working directory
2024-08-20 04:59:13,626:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 04:59:13,627:INFO:save_model() successfully completed......................................
2024-08-20 05:05:28,348:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 05:05:28,348:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 05:05:28,348:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 05:05:28,348:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 05:20:04,540:INFO:PyCaret RegressionExperiment
2024-08-20 05:20:04,540:INFO:Logging name: reg-default-name
2024-08-20 05:20:04,541:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 05:20:04,541:INFO:version 3.3.2
2024-08-20 05:20:04,541:INFO:Initializing setup()
2024-08-20 05:20:04,541:INFO:self.USI: a0c5
2024-08-20 05:20:04,541:INFO:self._variable_keys: {'X', 'y', 'target_param', 'exp_id', 'log_plots_param', 'n_jobs_param', 'data', 'memory', 'X_train', 'fold_generator', 'y_train', 'transform_target_param', 'gpu_n_jobs_param', '_ml_usecase', 'idx', 'X_test', 'y_test', 'pipeline', 'seed', 'html_param', 'fold_shuffle_param', 'exp_name_log', 'fold_groups_param', '_available_plots', 'USI', 'gpu_param', 'logging_param'}
2024-08-20 05:20:04,541:INFO:Checking environment
2024-08-20 05:20:04,541:INFO:python_version: 3.11.7
2024-08-20 05:20:04,541:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 05:20:04,541:INFO:machine: AMD64
2024-08-20 05:20:04,541:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 05:20:04,541:INFO:Memory: svmem(total=16890978304, available=5469016064, percent=67.6, used=11421962240, free=5469016064)
2024-08-20 05:20:04,541:INFO:Physical Core: 12
2024-08-20 05:20:04,541:INFO:Logical Core: 16
2024-08-20 05:20:04,541:INFO:Checking libraries
2024-08-20 05:20:04,541:INFO:System:
2024-08-20 05:20:04,541:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 05:20:04,541:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 05:20:04,541:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 05:20:04,541:INFO:PyCaret required dependencies:
2024-08-20 05:20:05,777:INFO:                 pip: 23.3.1
2024-08-20 05:20:05,777:INFO:          setuptools: 68.2.2
2024-08-20 05:20:05,777:INFO:             pycaret: 3.3.2
2024-08-20 05:20:05,777:INFO:             IPython: 8.20.0
2024-08-20 05:20:05,777:INFO:          ipywidgets: 7.6.5
2024-08-20 05:20:05,777:INFO:                tqdm: 4.65.0
2024-08-20 05:20:05,777:INFO:               numpy: 1.26.4
2024-08-20 05:20:05,777:INFO:              pandas: 2.1.4
2024-08-20 05:20:05,778:INFO:              jinja2: 3.1.3
2024-08-20 05:20:05,778:INFO:               scipy: 1.11.4
2024-08-20 05:20:05,778:INFO:              joblib: 1.2.0
2024-08-20 05:20:05,778:INFO:             sklearn: 1.2.2
2024-08-20 05:20:05,778:INFO:                pyod: 2.0.1
2024-08-20 05:20:05,778:INFO:            imblearn: 0.11.0
2024-08-20 05:20:05,778:INFO:   category_encoders: 2.6.3
2024-08-20 05:20:05,778:INFO:            lightgbm: 4.4.0
2024-08-20 05:20:05,778:INFO:               numba: 0.59.0
2024-08-20 05:20:05,778:INFO:            requests: 2.31.0
2024-08-20 05:20:05,778:INFO:          matplotlib: 3.8.0
2024-08-20 05:20:05,778:INFO:          scikitplot: 0.3.7
2024-08-20 05:20:05,778:INFO:         yellowbrick: 1.5
2024-08-20 05:20:05,778:INFO:              plotly: 5.9.0
2024-08-20 05:20:05,778:INFO:    plotly-resampler: Not installed
2024-08-20 05:20:05,778:INFO:             kaleido: 0.2.1
2024-08-20 05:20:05,778:INFO:           schemdraw: 0.15
2024-08-20 05:20:05,778:INFO:         statsmodels: 0.14.0
2024-08-20 05:20:05,778:INFO:              sktime: 0.26.0
2024-08-20 05:20:05,779:INFO:               tbats: 1.1.3
2024-08-20 05:20:05,779:INFO:            pmdarima: 2.0.4
2024-08-20 05:20:05,779:INFO:              psutil: 5.9.0
2024-08-20 05:20:05,779:INFO:          markupsafe: 2.1.3
2024-08-20 05:20:05,779:INFO:             pickle5: Not installed
2024-08-20 05:20:05,779:INFO:         cloudpickle: 2.2.1
2024-08-20 05:20:05,779:INFO:         deprecation: 2.1.0
2024-08-20 05:20:05,779:INFO:              xxhash: 3.4.1
2024-08-20 05:20:05,779:INFO:           wurlitzer: Not installed
2024-08-20 05:20:05,779:INFO:PyCaret optional dependencies:
2024-08-20 05:20:13,030:INFO:                shap: 0.44.1
2024-08-20 05:20:13,030:INFO:           interpret: 0.6.2
2024-08-20 05:20:13,030:INFO:                umap: 0.5.6
2024-08-20 05:20:13,030:INFO:     ydata_profiling: 4.8.3
2024-08-20 05:20:13,030:INFO:  explainerdashboard: 0.4.7
2024-08-20 05:20:13,030:INFO:             autoviz: Not installed
2024-08-20 05:20:13,030:INFO:           fairlearn: 0.7.0
2024-08-20 05:20:13,031:INFO:          deepchecks: Not installed
2024-08-20 05:20:13,031:INFO:             xgboost: 2.1.0
2024-08-20 05:20:13,031:INFO:            catboost: 1.2.5
2024-08-20 05:20:13,031:INFO:              kmodes: 0.12.2
2024-08-20 05:20:13,031:INFO:             mlxtend: 0.23.1
2024-08-20 05:20:13,031:INFO:       statsforecast: 1.5.0
2024-08-20 05:20:13,031:INFO:        tune_sklearn: Not installed
2024-08-20 05:20:13,031:INFO:                 ray: Not installed
2024-08-20 05:20:13,031:INFO:            hyperopt: 0.2.7
2024-08-20 05:20:13,031:INFO:              optuna: 3.6.1
2024-08-20 05:20:13,031:INFO:               skopt: 0.10.2
2024-08-20 05:20:13,031:INFO:              mlflow: 2.14.2
2024-08-20 05:20:13,031:INFO:              gradio: 4.37.2
2024-08-20 05:20:13,031:INFO:             fastapi: 0.111.0
2024-08-20 05:20:13,031:INFO:             uvicorn: 0.30.1
2024-08-20 05:20:13,033:INFO:              m2cgen: 0.10.0
2024-08-20 05:20:13,033:INFO:           evidently: 0.4.30
2024-08-20 05:20:13,033:INFO:               fugue: 0.8.7
2024-08-20 05:20:13,033:INFO:           streamlit: 1.30.0
2024-08-20 05:20:13,033:INFO:             prophet: Not installed
2024-08-20 05:20:13,033:INFO:None
2024-08-20 05:20:13,033:INFO:Set up data.
2024-08-20 05:20:13,071:INFO:Set up folding strategy.
2024-08-20 05:20:13,071:INFO:Set up train/test split.
2024-08-20 05:20:13,085:INFO:Set up index.
2024-08-20 05:20:13,085:INFO:Assigning column types.
2024-08-20 05:20:13,088:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 05:20:13,090:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,101:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,112:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,257:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,370:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,371:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:13,378:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:13,410:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,422:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,433:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,575:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,686:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,687:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:13,693:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:13,694:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 05:20:13,705:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,716:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,856:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,970:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:13,973:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:13,980:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:13,992:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,004:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,147:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,260:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,261:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:14,268:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:14,269:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 05:20:14,292:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,441:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,551:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,552:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:14,558:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:14,582:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,710:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,819:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:14,820:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:14,827:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:14,828:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 05:20:14,997:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:15,107:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:15,108:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:15,115:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:15,278:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:15,390:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:20:15,391:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:15,397:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:15,398:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 05:20:15,559:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:15,671:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:15,677:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:15,842:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:20:15,954:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:15,961:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:15,962:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 05:20:16,237:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:16,243:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:16,521:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:20:16,528:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:20:16,532:INFO:Preparing preprocessing pipeline...
2024-08-20 05:20:16,532:INFO:Set up simple imputation.
2024-08-20 05:20:16,536:INFO:Set up encoding of categorical features.
2024-08-20 05:20:16,536:INFO:Set up binning of numerical features.
2024-08-20 05:22:20,177:INFO:PyCaret RegressionExperiment
2024-08-20 05:22:20,177:INFO:Logging name: reg-default-name
2024-08-20 05:22:20,177:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 05:22:20,177:INFO:version 3.3.2
2024-08-20 05:22:20,177:INFO:Initializing setup()
2024-08-20 05:22:20,177:INFO:self.USI: 604f
2024-08-20 05:22:20,177:INFO:self._variable_keys: {'X', 'y', 'target_param', 'exp_id', 'log_plots_param', 'n_jobs_param', 'data', 'memory', 'X_train', 'fold_generator', 'y_train', 'transform_target_param', 'gpu_n_jobs_param', '_ml_usecase', 'idx', 'X_test', 'y_test', 'pipeline', 'seed', 'html_param', 'fold_shuffle_param', 'exp_name_log', 'fold_groups_param', '_available_plots', 'USI', 'gpu_param', 'logging_param'}
2024-08-20 05:22:20,177:INFO:Checking environment
2024-08-20 05:22:20,177:INFO:python_version: 3.11.7
2024-08-20 05:22:20,177:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 05:22:20,177:INFO:machine: AMD64
2024-08-20 05:22:20,177:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 05:22:20,177:INFO:Memory: svmem(total=16890978304, available=5325647872, percent=68.5, used=11565330432, free=5325647872)
2024-08-20 05:22:20,178:INFO:Physical Core: 12
2024-08-20 05:22:20,178:INFO:Logical Core: 16
2024-08-20 05:22:20,178:INFO:Checking libraries
2024-08-20 05:22:20,178:INFO:System:
2024-08-20 05:22:20,178:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 05:22:20,178:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 05:22:20,178:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 05:22:20,178:INFO:PyCaret required dependencies:
2024-08-20 05:22:20,178:INFO:                 pip: 23.3.1
2024-08-20 05:22:20,178:INFO:          setuptools: 68.2.2
2024-08-20 05:22:20,178:INFO:             pycaret: 3.3.2
2024-08-20 05:22:20,178:INFO:             IPython: 8.20.0
2024-08-20 05:22:20,178:INFO:          ipywidgets: 7.6.5
2024-08-20 05:22:20,178:INFO:                tqdm: 4.65.0
2024-08-20 05:22:20,178:INFO:               numpy: 1.26.4
2024-08-20 05:22:20,178:INFO:              pandas: 2.1.4
2024-08-20 05:22:20,178:INFO:              jinja2: 3.1.3
2024-08-20 05:22:20,178:INFO:               scipy: 1.11.4
2024-08-20 05:22:20,178:INFO:              joblib: 1.2.0
2024-08-20 05:22:20,178:INFO:             sklearn: 1.2.2
2024-08-20 05:22:20,178:INFO:                pyod: 2.0.1
2024-08-20 05:22:20,178:INFO:            imblearn: 0.11.0
2024-08-20 05:22:20,178:INFO:   category_encoders: 2.6.3
2024-08-20 05:22:20,178:INFO:            lightgbm: 4.4.0
2024-08-20 05:22:20,178:INFO:               numba: 0.59.0
2024-08-20 05:22:20,178:INFO:            requests: 2.31.0
2024-08-20 05:22:20,178:INFO:          matplotlib: 3.8.0
2024-08-20 05:22:20,178:INFO:          scikitplot: 0.3.7
2024-08-20 05:22:20,178:INFO:         yellowbrick: 1.5
2024-08-20 05:22:20,178:INFO:              plotly: 5.9.0
2024-08-20 05:22:20,178:INFO:    plotly-resampler: Not installed
2024-08-20 05:22:20,178:INFO:             kaleido: 0.2.1
2024-08-20 05:22:20,178:INFO:           schemdraw: 0.15
2024-08-20 05:22:20,178:INFO:         statsmodels: 0.14.0
2024-08-20 05:22:20,178:INFO:              sktime: 0.26.0
2024-08-20 05:22:20,178:INFO:               tbats: 1.1.3
2024-08-20 05:22:20,178:INFO:            pmdarima: 2.0.4
2024-08-20 05:22:20,178:INFO:              psutil: 5.9.0
2024-08-20 05:22:20,178:INFO:          markupsafe: 2.1.3
2024-08-20 05:22:20,178:INFO:             pickle5: Not installed
2024-08-20 05:22:20,178:INFO:         cloudpickle: 2.2.1
2024-08-20 05:22:20,178:INFO:         deprecation: 2.1.0
2024-08-20 05:22:20,178:INFO:              xxhash: 3.4.1
2024-08-20 05:22:20,179:INFO:           wurlitzer: Not installed
2024-08-20 05:22:20,179:INFO:PyCaret optional dependencies:
2024-08-20 05:22:20,179:INFO:                shap: 0.44.1
2024-08-20 05:22:20,179:INFO:           interpret: 0.6.2
2024-08-20 05:22:20,179:INFO:                umap: 0.5.6
2024-08-20 05:22:20,179:INFO:     ydata_profiling: 4.8.3
2024-08-20 05:22:20,179:INFO:  explainerdashboard: 0.4.7
2024-08-20 05:22:20,179:INFO:             autoviz: Not installed
2024-08-20 05:22:20,179:INFO:           fairlearn: 0.7.0
2024-08-20 05:22:20,179:INFO:          deepchecks: Not installed
2024-08-20 05:22:20,179:INFO:             xgboost: 2.1.0
2024-08-20 05:22:20,179:INFO:            catboost: 1.2.5
2024-08-20 05:22:20,179:INFO:              kmodes: 0.12.2
2024-08-20 05:22:20,179:INFO:             mlxtend: 0.23.1
2024-08-20 05:22:20,179:INFO:       statsforecast: 1.5.0
2024-08-20 05:22:20,179:INFO:        tune_sklearn: Not installed
2024-08-20 05:22:20,179:INFO:                 ray: Not installed
2024-08-20 05:22:20,179:INFO:            hyperopt: 0.2.7
2024-08-20 05:22:20,179:INFO:              optuna: 3.6.1
2024-08-20 05:22:20,179:INFO:               skopt: 0.10.2
2024-08-20 05:22:20,179:INFO:              mlflow: 2.14.2
2024-08-20 05:22:20,179:INFO:              gradio: 4.37.2
2024-08-20 05:22:20,179:INFO:             fastapi: 0.111.0
2024-08-20 05:22:20,179:INFO:             uvicorn: 0.30.1
2024-08-20 05:22:20,179:INFO:              m2cgen: 0.10.0
2024-08-20 05:22:20,179:INFO:           evidently: 0.4.30
2024-08-20 05:22:20,179:INFO:               fugue: 0.8.7
2024-08-20 05:22:20,179:INFO:           streamlit: 1.30.0
2024-08-20 05:22:20,179:INFO:             prophet: Not installed
2024-08-20 05:22:20,179:INFO:None
2024-08-20 05:22:20,179:INFO:Set up data.
2024-08-20 05:22:20,198:INFO:Set up folding strategy.
2024-08-20 05:22:20,198:INFO:Set up train/test split.
2024-08-20 05:22:20,205:INFO:Set up index.
2024-08-20 05:22:20,205:INFO:Assigning column types.
2024-08-20 05:22:20,207:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 05:22:20,207:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,212:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,215:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,283:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,344:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,344:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:20,348:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:20,348:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,352:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,356:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,412:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,461:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,461:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:20,465:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:20,466:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 05:22:20,470:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,474:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,530:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,571:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,572:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:20,575:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:20,579:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,583:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,637:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,678:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,678:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:20,681:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:20,681:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 05:22:20,690:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,743:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,784:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,785:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:20,788:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:20,796:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,851:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,892:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:20,892:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:20,895:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:20,895:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 05:22:20,964:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:21,005:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:21,006:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:21,009:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:21,077:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:21,117:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:22:21,118:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:21,120:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:21,121:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 05:22:21,192:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:21,233:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:21,235:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:21,298:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:22:21,340:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:21,342:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:21,343:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 05:22:21,450:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:21,453:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:21,561:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:21,564:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:21,569:INFO:Preparing preprocessing pipeline...
2024-08-20 05:22:21,569:INFO:Set up simple imputation.
2024-08-20 05:22:21,572:INFO:Set up encoding of categorical features.
2024-08-20 05:22:21,572:INFO:Set up column transformation.
2024-08-20 05:22:21,572:INFO:Set up feature normalization.
2024-08-20 05:22:22,137:INFO:Finished creating preprocessing pipeline.
2024-08-20 05:22:22,149:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC',
                                             'TRANS_DT'],
                                    transformer=SimpleImputer(strategy='most_frequent')))...
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['MERCHANT', 'CAT_DESC',
                                             'TRANS_DT'],
                                    transformer=TargetEncoder(cols=['MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT'],
                                                              handle_missing='return_nan'))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-08-20 05:22:22,150:INFO:Creating final display dataframe.
2024-08-20 05:22:22,658:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               AMT
2                   Target type        Regression
3           Original data shape        (15156, 8)
4        Transformed data shape       (15156, 32)
5   Transformed train set shape       (10609, 32)
6    Transformed test set shape        (4547, 32)
7              Numeric features                 2
8          Categorical features                 5
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Transformation              True
16        Transformation method       yeo-johnson
17                    Normalize              True
18             Normalize method            zscore
19               Fold Generator             KFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  reg-default-name
25                          USI              604f
2024-08-20 05:22:22,778:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:22,781:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:22,910:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:22:22,912:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:22:22,913:INFO:setup() successfully completed in 2.76s...............
2024-08-20 05:27:43,449:INFO:Initializing compare_models()
2024-08-20 05:27:43,449:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-08-20 05:27:43,449:INFO:Checking exceptions
2024-08-20 05:27:43,452:INFO:Preparing display monitor
2024-08-20 05:27:43,478:INFO:Initializing Linear Regression
2024-08-20 05:27:43,478:INFO:Total runtime is 0.0 minutes
2024-08-20 05:27:43,481:INFO:SubProcess create_model() called ==================================
2024-08-20 05:27:43,481:INFO:Initializing create_model()
2024-08-20 05:27:43,481:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:27:43,482:INFO:Checking exceptions
2024-08-20 05:27:43,482:INFO:Importing libraries
2024-08-20 05:27:43,482:INFO:Copying training dataset
2024-08-20 05:27:43,487:INFO:Defining folds
2024-08-20 05:27:43,487:INFO:Declaring metric variables
2024-08-20 05:27:43,491:INFO:Importing untrained model
2024-08-20 05:27:43,495:INFO:Linear Regression Imported successfully
2024-08-20 05:27:43,504:INFO:Starting cross validation
2024-08-20 05:27:43,513:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:27:54,512:INFO:Calculating mean and std
2024-08-20 05:27:54,515:INFO:Creating metrics dataframe
2024-08-20 05:27:54,519:INFO:Uploading results into container
2024-08-20 05:27:54,521:INFO:Uploading model into container now
2024-08-20 05:27:54,521:INFO:_master_model_container: 1
2024-08-20 05:27:54,522:INFO:_display_container: 2
2024-08-20 05:27:54,522:INFO:LinearRegression(n_jobs=-1)
2024-08-20 05:27:54,523:INFO:create_model() successfully completed......................................
2024-08-20 05:27:55,360:INFO:SubProcess create_model() end ==================================
2024-08-20 05:27:55,360:INFO:Creating metrics dataframe
2024-08-20 05:27:55,374:INFO:Initializing Lasso Regression
2024-08-20 05:27:55,375:INFO:Total runtime is 0.19828683535257977 minutes
2024-08-20 05:27:55,382:INFO:SubProcess create_model() called ==================================
2024-08-20 05:27:55,383:INFO:Initializing create_model()
2024-08-20 05:27:55,383:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:27:55,383:INFO:Checking exceptions
2024-08-20 05:27:55,383:INFO:Importing libraries
2024-08-20 05:27:55,384:INFO:Copying training dataset
2024-08-20 05:27:55,396:INFO:Defining folds
2024-08-20 05:27:55,396:INFO:Declaring metric variables
2024-08-20 05:27:55,403:INFO:Importing untrained model
2024-08-20 05:27:55,410:INFO:Lasso Regression Imported successfully
2024-08-20 05:27:55,423:INFO:Starting cross validation
2024-08-20 05:27:55,427:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:03,732:INFO:Calculating mean and std
2024-08-20 05:28:03,734:INFO:Creating metrics dataframe
2024-08-20 05:28:03,738:INFO:Uploading results into container
2024-08-20 05:28:03,739:INFO:Uploading model into container now
2024-08-20 05:28:03,740:INFO:_master_model_container: 2
2024-08-20 05:28:03,741:INFO:_display_container: 2
2024-08-20 05:28:03,741:INFO:Lasso(random_state=123)
2024-08-20 05:28:03,742:INFO:create_model() successfully completed......................................
2024-08-20 05:28:03,989:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:03,990:INFO:Creating metrics dataframe
2024-08-20 05:28:04,003:INFO:Initializing Ridge Regression
2024-08-20 05:28:04,003:INFO:Total runtime is 0.34209365447362267 minutes
2024-08-20 05:28:04,009:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:04,009:INFO:Initializing create_model()
2024-08-20 05:28:04,009:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:04,009:INFO:Checking exceptions
2024-08-20 05:28:04,010:INFO:Importing libraries
2024-08-20 05:28:04,010:INFO:Copying training dataset
2024-08-20 05:28:04,020:INFO:Defining folds
2024-08-20 05:28:04,021:INFO:Declaring metric variables
2024-08-20 05:28:04,027:INFO:Importing untrained model
2024-08-20 05:28:04,036:INFO:Ridge Regression Imported successfully
2024-08-20 05:28:04,053:INFO:Starting cross validation
2024-08-20 05:28:04,059:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:05,409:INFO:Calculating mean and std
2024-08-20 05:28:05,411:INFO:Creating metrics dataframe
2024-08-20 05:28:05,414:INFO:Uploading results into container
2024-08-20 05:28:05,415:INFO:Uploading model into container now
2024-08-20 05:28:05,415:INFO:_master_model_container: 3
2024-08-20 05:28:05,415:INFO:_display_container: 2
2024-08-20 05:28:05,416:INFO:Ridge(random_state=123)
2024-08-20 05:28:05,416:INFO:create_model() successfully completed......................................
2024-08-20 05:28:05,659:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:05,660:INFO:Creating metrics dataframe
2024-08-20 05:28:05,674:INFO:Initializing Elastic Net
2024-08-20 05:28:05,674:INFO:Total runtime is 0.3699387113253276 minutes
2024-08-20 05:28:05,680:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:05,681:INFO:Initializing create_model()
2024-08-20 05:28:05,681:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:05,681:INFO:Checking exceptions
2024-08-20 05:28:05,681:INFO:Importing libraries
2024-08-20 05:28:05,681:INFO:Copying training dataset
2024-08-20 05:28:05,695:INFO:Defining folds
2024-08-20 05:28:05,696:INFO:Declaring metric variables
2024-08-20 05:28:05,706:INFO:Importing untrained model
2024-08-20 05:28:05,715:INFO:Elastic Net Imported successfully
2024-08-20 05:28:05,733:INFO:Starting cross validation
2024-08-20 05:28:05,739:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:07,097:INFO:Calculating mean and std
2024-08-20 05:28:07,099:INFO:Creating metrics dataframe
2024-08-20 05:28:07,102:INFO:Uploading results into container
2024-08-20 05:28:07,102:INFO:Uploading model into container now
2024-08-20 05:28:07,103:INFO:_master_model_container: 4
2024-08-20 05:28:07,104:INFO:_display_container: 2
2024-08-20 05:28:07,104:INFO:ElasticNet(random_state=123)
2024-08-20 05:28:07,104:INFO:create_model() successfully completed......................................
2024-08-20 05:28:07,350:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:07,350:INFO:Creating metrics dataframe
2024-08-20 05:28:07,365:INFO:Initializing Least Angle Regression
2024-08-20 05:28:07,365:INFO:Total runtime is 0.3981255849202474 minutes
2024-08-20 05:28:07,373:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:07,373:INFO:Initializing create_model()
2024-08-20 05:28:07,373:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:07,373:INFO:Checking exceptions
2024-08-20 05:28:07,373:INFO:Importing libraries
2024-08-20 05:28:07,374:INFO:Copying training dataset
2024-08-20 05:28:07,385:INFO:Defining folds
2024-08-20 05:28:07,385:INFO:Declaring metric variables
2024-08-20 05:28:07,394:INFO:Importing untrained model
2024-08-20 05:28:07,403:INFO:Least Angle Regression Imported successfully
2024-08-20 05:28:07,421:INFO:Starting cross validation
2024-08-20 05:28:07,426:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:08,803:INFO:Calculating mean and std
2024-08-20 05:28:08,805:INFO:Creating metrics dataframe
2024-08-20 05:28:08,807:INFO:Uploading results into container
2024-08-20 05:28:08,808:INFO:Uploading model into container now
2024-08-20 05:28:08,808:INFO:_master_model_container: 5
2024-08-20 05:28:08,809:INFO:_display_container: 2
2024-08-20 05:28:08,809:INFO:Lars(random_state=123)
2024-08-20 05:28:08,809:INFO:create_model() successfully completed......................................
2024-08-20 05:28:09,043:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:09,043:INFO:Creating metrics dataframe
2024-08-20 05:28:09,059:INFO:Initializing Lasso Least Angle Regression
2024-08-20 05:28:09,059:INFO:Total runtime is 0.4263490994771322 minutes
2024-08-20 05:28:09,064:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:09,065:INFO:Initializing create_model()
2024-08-20 05:28:09,065:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:09,065:INFO:Checking exceptions
2024-08-20 05:28:09,065:INFO:Importing libraries
2024-08-20 05:28:09,065:INFO:Copying training dataset
2024-08-20 05:28:09,080:INFO:Defining folds
2024-08-20 05:28:09,080:INFO:Declaring metric variables
2024-08-20 05:28:09,089:INFO:Importing untrained model
2024-08-20 05:28:09,099:INFO:Lasso Least Angle Regression Imported successfully
2024-08-20 05:28:09,115:INFO:Starting cross validation
2024-08-20 05:28:09,120:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:10,494:INFO:Calculating mean and std
2024-08-20 05:28:10,496:INFO:Creating metrics dataframe
2024-08-20 05:28:10,499:INFO:Uploading results into container
2024-08-20 05:28:10,501:INFO:Uploading model into container now
2024-08-20 05:28:10,502:INFO:_master_model_container: 6
2024-08-20 05:28:10,502:INFO:_display_container: 2
2024-08-20 05:28:10,503:INFO:LassoLars(random_state=123)
2024-08-20 05:28:10,503:INFO:create_model() successfully completed......................................
2024-08-20 05:28:10,744:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:10,744:INFO:Creating metrics dataframe
2024-08-20 05:28:10,761:INFO:Initializing Orthogonal Matching Pursuit
2024-08-20 05:28:10,762:INFO:Total runtime is 0.4547341187795003 minutes
2024-08-20 05:28:10,767:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:10,768:INFO:Initializing create_model()
2024-08-20 05:28:10,768:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:10,768:INFO:Checking exceptions
2024-08-20 05:28:10,768:INFO:Importing libraries
2024-08-20 05:28:10,768:INFO:Copying training dataset
2024-08-20 05:28:10,779:INFO:Defining folds
2024-08-20 05:28:10,779:INFO:Declaring metric variables
2024-08-20 05:28:10,786:INFO:Importing untrained model
2024-08-20 05:28:10,795:INFO:Orthogonal Matching Pursuit Imported successfully
2024-08-20 05:28:10,807:INFO:Starting cross validation
2024-08-20 05:28:10,809:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:12,386:INFO:Calculating mean and std
2024-08-20 05:28:12,387:INFO:Creating metrics dataframe
2024-08-20 05:28:12,389:INFO:Uploading results into container
2024-08-20 05:28:12,389:INFO:Uploading model into container now
2024-08-20 05:28:12,391:INFO:_master_model_container: 7
2024-08-20 05:28:12,392:INFO:_display_container: 2
2024-08-20 05:28:12,392:INFO:OrthogonalMatchingPursuit()
2024-08-20 05:28:12,392:INFO:create_model() successfully completed......................................
2024-08-20 05:28:12,634:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:12,634:INFO:Creating metrics dataframe
2024-08-20 05:28:12,650:INFO:Initializing Bayesian Ridge
2024-08-20 05:28:12,650:INFO:Total runtime is 0.48619894186655677 minutes
2024-08-20 05:28:12,658:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:12,659:INFO:Initializing create_model()
2024-08-20 05:28:12,659:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:12,659:INFO:Checking exceptions
2024-08-20 05:28:12,659:INFO:Importing libraries
2024-08-20 05:28:12,659:INFO:Copying training dataset
2024-08-20 05:28:12,675:INFO:Defining folds
2024-08-20 05:28:12,675:INFO:Declaring metric variables
2024-08-20 05:28:12,683:INFO:Importing untrained model
2024-08-20 05:28:12,691:INFO:Bayesian Ridge Imported successfully
2024-08-20 05:28:12,706:INFO:Starting cross validation
2024-08-20 05:28:12,711:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:14,177:INFO:Calculating mean and std
2024-08-20 05:28:14,179:INFO:Creating metrics dataframe
2024-08-20 05:28:14,181:INFO:Uploading results into container
2024-08-20 05:28:14,182:INFO:Uploading model into container now
2024-08-20 05:28:14,182:INFO:_master_model_container: 8
2024-08-20 05:28:14,183:INFO:_display_container: 2
2024-08-20 05:28:14,183:INFO:BayesianRidge()
2024-08-20 05:28:14,183:INFO:create_model() successfully completed......................................
2024-08-20 05:28:14,423:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:14,424:INFO:Creating metrics dataframe
2024-08-20 05:28:14,440:INFO:Initializing Passive Aggressive Regressor
2024-08-20 05:28:14,441:INFO:Total runtime is 0.5160453160603841 minutes
2024-08-20 05:28:14,449:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:14,450:INFO:Initializing create_model()
2024-08-20 05:28:14,450:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:14,450:INFO:Checking exceptions
2024-08-20 05:28:14,450:INFO:Importing libraries
2024-08-20 05:28:14,450:INFO:Copying training dataset
2024-08-20 05:28:14,462:INFO:Defining folds
2024-08-20 05:28:14,463:INFO:Declaring metric variables
2024-08-20 05:28:14,470:INFO:Importing untrained model
2024-08-20 05:28:14,477:INFO:Passive Aggressive Regressor Imported successfully
2024-08-20 05:28:14,491:INFO:Starting cross validation
2024-08-20 05:28:14,496:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:15,919:INFO:Calculating mean and std
2024-08-20 05:28:15,921:INFO:Creating metrics dataframe
2024-08-20 05:28:15,924:INFO:Uploading results into container
2024-08-20 05:28:15,925:INFO:Uploading model into container now
2024-08-20 05:28:15,926:INFO:_master_model_container: 9
2024-08-20 05:28:15,926:INFO:_display_container: 2
2024-08-20 05:28:15,927:INFO:PassiveAggressiveRegressor(random_state=123)
2024-08-20 05:28:15,927:INFO:create_model() successfully completed......................................
2024-08-20 05:28:16,169:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:16,169:INFO:Creating metrics dataframe
2024-08-20 05:28:16,185:INFO:Initializing Huber Regressor
2024-08-20 05:28:16,186:INFO:Total runtime is 0.5451411684354146 minutes
2024-08-20 05:28:16,191:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:16,192:INFO:Initializing create_model()
2024-08-20 05:28:16,192:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:16,192:INFO:Checking exceptions
2024-08-20 05:28:16,192:INFO:Importing libraries
2024-08-20 05:28:16,193:INFO:Copying training dataset
2024-08-20 05:28:16,206:INFO:Defining folds
2024-08-20 05:28:16,206:INFO:Declaring metric variables
2024-08-20 05:28:16,212:INFO:Importing untrained model
2024-08-20 05:28:16,220:INFO:Huber Regressor Imported successfully
2024-08-20 05:28:16,233:INFO:Starting cross validation
2024-08-20 05:28:16,238:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:18,487:INFO:Calculating mean and std
2024-08-20 05:28:18,489:INFO:Creating metrics dataframe
2024-08-20 05:28:18,492:INFO:Uploading results into container
2024-08-20 05:28:18,493:INFO:Uploading model into container now
2024-08-20 05:28:18,495:INFO:_master_model_container: 10
2024-08-20 05:28:18,495:INFO:_display_container: 2
2024-08-20 05:28:18,495:INFO:HuberRegressor()
2024-08-20 05:28:18,496:INFO:create_model() successfully completed......................................
2024-08-20 05:28:18,726:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:18,726:INFO:Creating metrics dataframe
2024-08-20 05:28:18,744:INFO:Initializing K Neighbors Regressor
2024-08-20 05:28:18,744:INFO:Total runtime is 0.5877732435862223 minutes
2024-08-20 05:28:18,750:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:18,751:INFO:Initializing create_model()
2024-08-20 05:28:18,751:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:18,751:INFO:Checking exceptions
2024-08-20 05:28:18,751:INFO:Importing libraries
2024-08-20 05:28:18,751:INFO:Copying training dataset
2024-08-20 05:28:18,764:INFO:Defining folds
2024-08-20 05:28:18,764:INFO:Declaring metric variables
2024-08-20 05:28:18,771:INFO:Importing untrained model
2024-08-20 05:28:18,776:INFO:K Neighbors Regressor Imported successfully
2024-08-20 05:28:18,786:INFO:Starting cross validation
2024-08-20 05:28:18,788:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:20,974:INFO:Calculating mean and std
2024-08-20 05:28:20,976:INFO:Creating metrics dataframe
2024-08-20 05:28:20,979:INFO:Uploading results into container
2024-08-20 05:28:20,979:INFO:Uploading model into container now
2024-08-20 05:28:20,981:INFO:_master_model_container: 11
2024-08-20 05:28:20,981:INFO:_display_container: 2
2024-08-20 05:28:20,982:INFO:KNeighborsRegressor(n_jobs=-1)
2024-08-20 05:28:20,982:INFO:create_model() successfully completed......................................
2024-08-20 05:28:21,217:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:21,217:INFO:Creating metrics dataframe
2024-08-20 05:28:21,235:INFO:Initializing Decision Tree Regressor
2024-08-20 05:28:21,235:INFO:Total runtime is 0.6292783896128337 minutes
2024-08-20 05:28:21,240:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:21,240:INFO:Initializing create_model()
2024-08-20 05:28:21,240:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:21,241:INFO:Checking exceptions
2024-08-20 05:28:21,241:INFO:Importing libraries
2024-08-20 05:28:21,241:INFO:Copying training dataset
2024-08-20 05:28:21,254:INFO:Defining folds
2024-08-20 05:28:21,255:INFO:Declaring metric variables
2024-08-20 05:28:21,263:INFO:Importing untrained model
2024-08-20 05:28:21,269:INFO:Decision Tree Regressor Imported successfully
2024-08-20 05:28:21,283:INFO:Starting cross validation
2024-08-20 05:28:21,288:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:22,844:INFO:Calculating mean and std
2024-08-20 05:28:22,845:INFO:Creating metrics dataframe
2024-08-20 05:28:22,848:INFO:Uploading results into container
2024-08-20 05:28:22,849:INFO:Uploading model into container now
2024-08-20 05:28:22,849:INFO:_master_model_container: 12
2024-08-20 05:28:22,849:INFO:_display_container: 2
2024-08-20 05:28:22,850:INFO:DecisionTreeRegressor(random_state=123)
2024-08-20 05:28:22,850:INFO:create_model() successfully completed......................................
2024-08-20 05:28:23,083:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:23,084:INFO:Creating metrics dataframe
2024-08-20 05:28:23,099:INFO:Initializing Random Forest Regressor
2024-08-20 05:28:23,099:INFO:Total runtime is 0.660360046227773 minutes
2024-08-20 05:28:23,105:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:23,106:INFO:Initializing create_model()
2024-08-20 05:28:23,106:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:23,106:INFO:Checking exceptions
2024-08-20 05:28:23,106:INFO:Importing libraries
2024-08-20 05:28:23,106:INFO:Copying training dataset
2024-08-20 05:28:23,117:INFO:Defining folds
2024-08-20 05:28:23,117:INFO:Declaring metric variables
2024-08-20 05:28:23,123:INFO:Importing untrained model
2024-08-20 05:28:23,132:INFO:Random Forest Regressor Imported successfully
2024-08-20 05:28:23,146:INFO:Starting cross validation
2024-08-20 05:28:23,150:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:41,247:INFO:Calculating mean and std
2024-08-20 05:28:41,249:INFO:Creating metrics dataframe
2024-08-20 05:28:41,252:INFO:Uploading results into container
2024-08-20 05:28:41,253:INFO:Uploading model into container now
2024-08-20 05:28:41,254:INFO:_master_model_container: 13
2024-08-20 05:28:41,255:INFO:_display_container: 2
2024-08-20 05:28:41,256:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2024-08-20 05:28:41,256:INFO:create_model() successfully completed......................................
2024-08-20 05:28:41,566:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:41,567:INFO:Creating metrics dataframe
2024-08-20 05:28:41,583:INFO:Initializing Extra Trees Regressor
2024-08-20 05:28:41,583:INFO:Total runtime is 0.9684273401896158 minutes
2024-08-20 05:28:41,589:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:41,589:INFO:Initializing create_model()
2024-08-20 05:28:41,590:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:41,590:INFO:Checking exceptions
2024-08-20 05:28:41,590:INFO:Importing libraries
2024-08-20 05:28:41,590:INFO:Copying training dataset
2024-08-20 05:28:41,602:INFO:Defining folds
2024-08-20 05:28:41,602:INFO:Declaring metric variables
2024-08-20 05:28:41,609:INFO:Importing untrained model
2024-08-20 05:28:41,616:INFO:Extra Trees Regressor Imported successfully
2024-08-20 05:28:41,634:INFO:Starting cross validation
2024-08-20 05:28:41,640:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:55,055:INFO:Calculating mean and std
2024-08-20 05:28:55,059:INFO:Creating metrics dataframe
2024-08-20 05:28:55,065:INFO:Uploading results into container
2024-08-20 05:28:55,066:INFO:Uploading model into container now
2024-08-20 05:28:55,068:INFO:_master_model_container: 14
2024-08-20 05:28:55,068:INFO:_display_container: 2
2024-08-20 05:28:55,070:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2024-08-20 05:28:55,070:INFO:create_model() successfully completed......................................
2024-08-20 05:28:55,323:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:55,323:INFO:Creating metrics dataframe
2024-08-20 05:28:55,344:INFO:Initializing AdaBoost Regressor
2024-08-20 05:28:55,345:INFO:Total runtime is 1.1977868556976319 minutes
2024-08-20 05:28:55,352:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:55,352:INFO:Initializing create_model()
2024-08-20 05:28:55,352:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:55,352:INFO:Checking exceptions
2024-08-20 05:28:55,352:INFO:Importing libraries
2024-08-20 05:28:55,352:INFO:Copying training dataset
2024-08-20 05:28:55,364:INFO:Defining folds
2024-08-20 05:28:55,364:INFO:Declaring metric variables
2024-08-20 05:28:55,370:INFO:Importing untrained model
2024-08-20 05:28:55,377:INFO:AdaBoost Regressor Imported successfully
2024-08-20 05:28:55,393:INFO:Starting cross validation
2024-08-20 05:28:55,398:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:28:59,500:INFO:Calculating mean and std
2024-08-20 05:28:59,502:INFO:Creating metrics dataframe
2024-08-20 05:28:59,505:INFO:Uploading results into container
2024-08-20 05:28:59,506:INFO:Uploading model into container now
2024-08-20 05:28:59,507:INFO:_master_model_container: 15
2024-08-20 05:28:59,507:INFO:_display_container: 2
2024-08-20 05:28:59,508:INFO:AdaBoostRegressor(random_state=123)
2024-08-20 05:28:59,508:INFO:create_model() successfully completed......................................
2024-08-20 05:28:59,735:INFO:SubProcess create_model() end ==================================
2024-08-20 05:28:59,735:INFO:Creating metrics dataframe
2024-08-20 05:28:59,761:INFO:Initializing Gradient Boosting Regressor
2024-08-20 05:28:59,761:INFO:Total runtime is 1.2713834484418234 minutes
2024-08-20 05:28:59,768:INFO:SubProcess create_model() called ==================================
2024-08-20 05:28:59,769:INFO:Initializing create_model()
2024-08-20 05:28:59,769:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:28:59,769:INFO:Checking exceptions
2024-08-20 05:28:59,769:INFO:Importing libraries
2024-08-20 05:28:59,769:INFO:Copying training dataset
2024-08-20 05:28:59,783:INFO:Defining folds
2024-08-20 05:28:59,784:INFO:Declaring metric variables
2024-08-20 05:28:59,792:INFO:Importing untrained model
2024-08-20 05:28:59,799:INFO:Gradient Boosting Regressor Imported successfully
2024-08-20 05:28:59,813:INFO:Starting cross validation
2024-08-20 05:28:59,818:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:29:05,998:INFO:Calculating mean and std
2024-08-20 05:29:06,001:INFO:Creating metrics dataframe
2024-08-20 05:29:06,006:INFO:Uploading results into container
2024-08-20 05:29:06,008:INFO:Uploading model into container now
2024-08-20 05:29:06,009:INFO:_master_model_container: 16
2024-08-20 05:29:06,010:INFO:_display_container: 2
2024-08-20 05:29:06,011:INFO:GradientBoostingRegressor(random_state=123)
2024-08-20 05:29:06,011:INFO:create_model() successfully completed......................................
2024-08-20 05:29:06,329:INFO:SubProcess create_model() end ==================================
2024-08-20 05:29:06,329:INFO:Creating metrics dataframe
2024-08-20 05:29:06,359:INFO:Initializing Extreme Gradient Boosting
2024-08-20 05:29:06,360:INFO:Total runtime is 1.3813459753990174 minutes
2024-08-20 05:29:06,369:INFO:SubProcess create_model() called ==================================
2024-08-20 05:29:06,370:INFO:Initializing create_model()
2024-08-20 05:29:06,371:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:29:06,371:INFO:Checking exceptions
2024-08-20 05:29:06,371:INFO:Importing libraries
2024-08-20 05:29:06,371:INFO:Copying training dataset
2024-08-20 05:29:06,390:INFO:Defining folds
2024-08-20 05:29:06,391:INFO:Declaring metric variables
2024-08-20 05:29:06,401:INFO:Importing untrained model
2024-08-20 05:29:06,413:INFO:Extreme Gradient Boosting Imported successfully
2024-08-20 05:29:06,431:INFO:Starting cross validation
2024-08-20 05:29:06,437:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:29:09,398:INFO:Calculating mean and std
2024-08-20 05:29:09,400:INFO:Creating metrics dataframe
2024-08-20 05:29:09,405:INFO:Uploading results into container
2024-08-20 05:29:09,406:INFO:Uploading model into container now
2024-08-20 05:29:09,407:INFO:_master_model_container: 17
2024-08-20 05:29:09,407:INFO:_display_container: 2
2024-08-20 05:29:09,408:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, device='cpu', early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             multi_strategy=None, n_estimators=None, n_jobs=-1,
             num_parallel_tree=None, random_state=123, ...)
2024-08-20 05:29:09,409:INFO:create_model() successfully completed......................................
2024-08-20 05:29:09,630:INFO:SubProcess create_model() end ==================================
2024-08-20 05:29:09,630:INFO:Creating metrics dataframe
2024-08-20 05:29:09,651:INFO:Initializing Light Gradient Boosting Machine
2024-08-20 05:29:09,651:INFO:Total runtime is 1.4362163186073305 minutes
2024-08-20 05:29:09,658:INFO:SubProcess create_model() called ==================================
2024-08-20 05:29:09,658:INFO:Initializing create_model()
2024-08-20 05:29:09,658:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:29:09,658:INFO:Checking exceptions
2024-08-20 05:29:09,658:INFO:Importing libraries
2024-08-20 05:29:09,659:INFO:Copying training dataset
2024-08-20 05:29:09,671:INFO:Defining folds
2024-08-20 05:29:09,671:INFO:Declaring metric variables
2024-08-20 05:29:09,679:INFO:Importing untrained model
2024-08-20 05:29:09,688:INFO:Light Gradient Boosting Machine Imported successfully
2024-08-20 05:29:09,699:INFO:Starting cross validation
2024-08-20 05:29:09,703:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:29:18,017:INFO:Calculating mean and std
2024-08-20 05:29:18,019:INFO:Creating metrics dataframe
2024-08-20 05:29:18,024:INFO:Uploading results into container
2024-08-20 05:29:18,026:INFO:Uploading model into container now
2024-08-20 05:29:18,028:INFO:_master_model_container: 18
2024-08-20 05:29:18,028:INFO:_display_container: 2
2024-08-20 05:29:18,029:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2024-08-20 05:29:18,030:INFO:create_model() successfully completed......................................
2024-08-20 05:29:18,287:INFO:SubProcess create_model() end ==================================
2024-08-20 05:29:18,288:INFO:Creating metrics dataframe
2024-08-20 05:29:18,307:INFO:Initializing CatBoost Regressor
2024-08-20 05:29:18,307:INFO:Total runtime is 1.5804810961087545 minutes
2024-08-20 05:29:18,313:INFO:SubProcess create_model() called ==================================
2024-08-20 05:29:18,313:INFO:Initializing create_model()
2024-08-20 05:29:18,313:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=catboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:29:18,313:INFO:Checking exceptions
2024-08-20 05:29:18,314:INFO:Importing libraries
2024-08-20 05:29:18,314:INFO:Copying training dataset
2024-08-20 05:29:18,323:INFO:Defining folds
2024-08-20 05:29:18,324:INFO:Declaring metric variables
2024-08-20 05:29:18,329:INFO:Importing untrained model
2024-08-20 05:29:18,336:INFO:CatBoost Regressor Imported successfully
2024-08-20 05:29:18,350:INFO:Starting cross validation
2024-08-20 05:29:18,354:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:29:35,213:INFO:Calculating mean and std
2024-08-20 05:29:35,216:INFO:Creating metrics dataframe
2024-08-20 05:29:35,221:INFO:Uploading results into container
2024-08-20 05:29:35,223:INFO:Uploading model into container now
2024-08-20 05:29:35,224:INFO:_master_model_container: 19
2024-08-20 05:29:35,224:INFO:_display_container: 2
2024-08-20 05:29:35,224:INFO:<catboost.core.CatBoostRegressor object at 0x0000022175339C10>
2024-08-20 05:29:35,224:INFO:create_model() successfully completed......................................
2024-08-20 05:29:35,525:INFO:SubProcess create_model() end ==================================
2024-08-20 05:29:35,525:INFO:Creating metrics dataframe
2024-08-20 05:29:35,550:INFO:Initializing Dummy Regressor
2024-08-20 05:29:35,550:INFO:Total runtime is 1.867867918809255 minutes
2024-08-20 05:29:35,559:INFO:SubProcess create_model() called ==================================
2024-08-20 05:29:35,560:INFO:Initializing create_model()
2024-08-20 05:29:35,560:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022176E09F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:29:35,560:INFO:Checking exceptions
2024-08-20 05:29:35,561:INFO:Importing libraries
2024-08-20 05:29:35,561:INFO:Copying training dataset
2024-08-20 05:29:35,574:INFO:Defining folds
2024-08-20 05:29:35,575:INFO:Declaring metric variables
2024-08-20 05:29:35,583:INFO:Importing untrained model
2024-08-20 05:29:35,590:INFO:Dummy Regressor Imported successfully
2024-08-20 05:29:35,606:INFO:Starting cross validation
2024-08-20 05:29:35,612:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 05:29:37,431:INFO:Calculating mean and std
2024-08-20 05:29:37,433:INFO:Creating metrics dataframe
2024-08-20 05:29:37,436:INFO:Uploading results into container
2024-08-20 05:29:37,437:INFO:Uploading model into container now
2024-08-20 05:29:37,438:INFO:_master_model_container: 20
2024-08-20 05:29:37,438:INFO:_display_container: 2
2024-08-20 05:29:37,439:INFO:DummyRegressor()
2024-08-20 05:29:37,439:INFO:create_model() successfully completed......................................
2024-08-20 05:29:37,677:INFO:SubProcess create_model() end ==================================
2024-08-20 05:29:37,677:INFO:Creating metrics dataframe
2024-08-20 05:29:37,714:INFO:Initializing create_model()
2024-08-20 05:29:37,714:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002217546A610>, estimator=AdaBoostRegressor(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 05:29:37,714:INFO:Checking exceptions
2024-08-20 05:29:37,718:INFO:Importing libraries
2024-08-20 05:29:37,719:INFO:Copying training dataset
2024-08-20 05:29:37,730:INFO:Defining folds
2024-08-20 05:29:37,730:INFO:Declaring metric variables
2024-08-20 05:29:37,730:INFO:Importing untrained model
2024-08-20 05:29:37,731:INFO:Declaring custom model
2024-08-20 05:29:37,732:INFO:AdaBoost Regressor Imported successfully
2024-08-20 05:29:37,735:INFO:Cross validation set to False
2024-08-20 05:29:37,736:INFO:Fitting Model
2024-08-20 05:29:39,164:INFO:AdaBoostRegressor(random_state=123)
2024-08-20 05:29:39,164:INFO:create_model() successfully completed......................................
2024-08-20 05:29:39,452:INFO:_master_model_container: 20
2024-08-20 05:29:39,452:INFO:_display_container: 2
2024-08-20 05:29:39,453:INFO:AdaBoostRegressor(random_state=123)
2024-08-20 05:29:39,453:INFO:compare_models() successfully completed......................................
2024-08-20 05:31:43,627:INFO:PyCaret AnomalyExperiment
2024-08-20 05:31:43,627:INFO:Logging name: anomaly-default-name
2024-08-20 05:31:43,627:INFO:ML Usecase: MLUsecase.ANOMALY
2024-08-20 05:31:43,627:INFO:version 3.3.2
2024-08-20 05:31:43,627:INFO:Initializing setup()
2024-08-20 05:31:43,627:INFO:self.USI: 3a93
2024-08-20 05:31:43,627:INFO:self._variable_keys: {'X', 'exp_id', 'log_plots_param', 'n_jobs_param', 'data', 'memory', 'gpu_n_jobs_param', '_ml_usecase', 'idx', 'pipeline', 'seed', 'html_param', 'exp_name_log', '_available_plots', 'USI', 'gpu_param', 'logging_param'}
2024-08-20 05:31:43,627:INFO:Checking environment
2024-08-20 05:31:43,627:INFO:python_version: 3.11.7
2024-08-20 05:31:43,627:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 05:31:43,627:INFO:machine: AMD64
2024-08-20 05:31:43,627:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 05:31:43,627:INFO:Memory: svmem(total=16890978304, available=3385270272, percent=80.0, used=13505708032, free=3385270272)
2024-08-20 05:31:43,627:INFO:Physical Core: 12
2024-08-20 05:31:43,627:INFO:Logical Core: 16
2024-08-20 05:31:43,627:INFO:Checking libraries
2024-08-20 05:31:43,627:INFO:System:
2024-08-20 05:31:43,627:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 05:31:43,627:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 05:31:43,628:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 05:31:43,628:INFO:PyCaret required dependencies:
2024-08-20 05:31:43,628:INFO:                 pip: 23.3.1
2024-08-20 05:31:43,628:INFO:          setuptools: 68.2.2
2024-08-20 05:31:43,628:INFO:             pycaret: 3.3.2
2024-08-20 05:31:43,628:INFO:             IPython: 8.20.0
2024-08-20 05:31:43,628:INFO:          ipywidgets: 7.6.5
2024-08-20 05:31:43,628:INFO:                tqdm: 4.65.0
2024-08-20 05:31:43,628:INFO:               numpy: 1.26.4
2024-08-20 05:31:43,628:INFO:              pandas: 2.1.4
2024-08-20 05:31:43,628:INFO:              jinja2: 3.1.3
2024-08-20 05:31:43,628:INFO:               scipy: 1.11.4
2024-08-20 05:31:43,628:INFO:              joblib: 1.2.0
2024-08-20 05:31:43,628:INFO:             sklearn: 1.2.2
2024-08-20 05:31:43,628:INFO:                pyod: 2.0.1
2024-08-20 05:31:43,628:INFO:            imblearn: 0.11.0
2024-08-20 05:31:43,628:INFO:   category_encoders: 2.6.3
2024-08-20 05:31:43,628:INFO:            lightgbm: 4.4.0
2024-08-20 05:31:43,628:INFO:               numba: 0.59.0
2024-08-20 05:31:43,628:INFO:            requests: 2.31.0
2024-08-20 05:31:43,628:INFO:          matplotlib: 3.8.0
2024-08-20 05:31:43,628:INFO:          scikitplot: 0.3.7
2024-08-20 05:31:43,628:INFO:         yellowbrick: 1.5
2024-08-20 05:31:43,628:INFO:              plotly: 5.9.0
2024-08-20 05:31:43,628:INFO:    plotly-resampler: Not installed
2024-08-20 05:31:43,628:INFO:             kaleido: 0.2.1
2024-08-20 05:31:43,628:INFO:           schemdraw: 0.15
2024-08-20 05:31:43,628:INFO:         statsmodels: 0.14.0
2024-08-20 05:31:43,628:INFO:              sktime: 0.26.0
2024-08-20 05:31:43,628:INFO:               tbats: 1.1.3
2024-08-20 05:31:43,628:INFO:            pmdarima: 2.0.4
2024-08-20 05:31:43,628:INFO:              psutil: 5.9.0
2024-08-20 05:31:43,628:INFO:          markupsafe: 2.1.3
2024-08-20 05:31:43,628:INFO:             pickle5: Not installed
2024-08-20 05:31:43,628:INFO:         cloudpickle: 2.2.1
2024-08-20 05:31:43,628:INFO:         deprecation: 2.1.0
2024-08-20 05:31:43,628:INFO:              xxhash: 3.4.1
2024-08-20 05:31:43,628:INFO:           wurlitzer: Not installed
2024-08-20 05:31:43,628:INFO:PyCaret optional dependencies:
2024-08-20 05:31:43,628:INFO:                shap: 0.44.1
2024-08-20 05:31:43,628:INFO:           interpret: 0.6.2
2024-08-20 05:31:43,628:INFO:                umap: 0.5.6
2024-08-20 05:31:43,628:INFO:     ydata_profiling: 4.8.3
2024-08-20 05:31:43,628:INFO:  explainerdashboard: 0.4.7
2024-08-20 05:31:43,628:INFO:             autoviz: Not installed
2024-08-20 05:31:43,628:INFO:           fairlearn: 0.7.0
2024-08-20 05:31:43,628:INFO:          deepchecks: Not installed
2024-08-20 05:31:43,628:INFO:             xgboost: 2.1.0
2024-08-20 05:31:43,628:INFO:            catboost: 1.2.5
2024-08-20 05:31:43,628:INFO:              kmodes: 0.12.2
2024-08-20 05:31:43,628:INFO:             mlxtend: 0.23.1
2024-08-20 05:31:43,628:INFO:       statsforecast: 1.5.0
2024-08-20 05:31:43,628:INFO:        tune_sklearn: Not installed
2024-08-20 05:31:43,628:INFO:                 ray: Not installed
2024-08-20 05:31:43,628:INFO:            hyperopt: 0.2.7
2024-08-20 05:31:43,628:INFO:              optuna: 3.6.1
2024-08-20 05:31:43,628:INFO:               skopt: 0.10.2
2024-08-20 05:31:43,628:INFO:              mlflow: 2.14.2
2024-08-20 05:31:43,628:INFO:              gradio: 4.37.2
2024-08-20 05:31:43,628:INFO:             fastapi: 0.111.0
2024-08-20 05:31:43,628:INFO:             uvicorn: 0.30.1
2024-08-20 05:31:43,628:INFO:              m2cgen: 0.10.0
2024-08-20 05:31:43,628:INFO:           evidently: 0.4.30
2024-08-20 05:31:43,628:INFO:               fugue: 0.8.7
2024-08-20 05:31:43,628:INFO:           streamlit: 1.30.0
2024-08-20 05:31:43,628:INFO:             prophet: Not installed
2024-08-20 05:31:43,628:INFO:None
2024-08-20 05:31:43,628:INFO:Set up data.
2024-08-20 05:31:43,644:INFO:Set up index.
2024-08-20 05:31:43,645:INFO:Assigning column types.
2024-08-20 05:31:43,647:INFO:Engine successfully changes for model 'kmeans' to 'sklearn'.
2024-08-20 05:31:44,850:INFO:Engine successfully changes for model 'dbscan' to 'sklearn'.
2024-08-20 05:31:44,851:INFO:Preparing preprocessing pipeline...
2024-08-20 05:31:44,851:INFO:Set up simple imputation.
2024-08-20 05:31:44,854:INFO:Set up encoding of categorical features.
2024-08-20 05:31:44,854:INFO:Set up binning of numerical features.
2024-08-20 05:31:45,519:INFO:Finished creating preprocessing pipeline.
2024-08-20 05:31:45,529:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['CAT_DESC'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['CAT_DESC'],
                                    transformer=OneHotEncoder(cols=['CAT_DESC'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('bin_numeric_features',
                 TransformerWrapper(include=['AMT'],
                                    transformer=KBinsDiscretizer(encode='ordinal',
                                                                 strategy='kmeans')))])
2024-08-20 05:31:45,529:INFO:Creating final display dataframe.
2024-08-20 05:31:45,776:INFO:Setup _display_container:                  Description                 Value
0                 Session id                   123
1        Original data shape            (15156, 8)
2     Transformed data shape          (15156, 209)
3            Ignore features                     7
4           Numeric features                     1
5       Categorical features                     1
6                 Preprocess                  True
7            Imputation type                simple
8         Numeric imputation                  mean
9     Categorical imputation                  mode
10  Maximum one-hot encoding                    -1
11           Encoding method                  None
12                  CPU Jobs                    -1
13                   Use GPU                 False
14            Log Experiment                 False
15           Experiment Name  anomaly-default-name
16                       USI                  3a93
2024-08-20 05:31:45,787:INFO:setup() successfully completed in 2.19s...............
2024-08-20 05:31:58,962:INFO:Initializing create_model()
2024-08-20 05:31:58,963:INFO:create_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002217657BC90>, estimator=iforest, num_clusters=4, fraction=0.05, ground_truth=None, round=4, fit_kwargs=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, raise_num_clusters=False, display=None, kwargs={})
2024-08-20 05:31:58,963:INFO:Checking exceptions
2024-08-20 05:31:59,035:INFO:Importing untrained model
2024-08-20 05:31:59,038:INFO:Isolation Forest Imported successfully
2024-08-20 05:31:59,044:INFO:Fitting Model
2024-08-20 05:31:59,902:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-20 05:31:59,902:INFO:create_models() successfully completed......................................
2024-08-20 05:31:59,908:INFO:Uploading results into container
2024-08-20 05:31:59,908:INFO:Uploading model into container now
2024-08-20 05:31:59,910:INFO:_master_model_container: 1
2024-08-20 05:31:59,910:INFO:_display_container: 1
2024-08-20 05:31:59,911:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-20 05:31:59,911:INFO:create_model() successfully completed......................................
2024-08-20 05:32:12,232:INFO:Initializing create_model()
2024-08-20 05:32:12,232:INFO:create_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002217657BC90>, estimator=iforest, num_clusters=4, fraction=0.05, ground_truth=None, round=4, fit_kwargs=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, raise_num_clusters=False, display=None, kwargs={})
2024-08-20 05:32:12,232:INFO:Checking exceptions
2024-08-20 05:32:12,300:INFO:Importing untrained model
2024-08-20 05:32:12,304:INFO:Isolation Forest Imported successfully
2024-08-20 05:32:12,310:INFO:Fitting Model
2024-08-20 05:32:13,028:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-20 05:32:13,028:INFO:create_models() successfully completed......................................
2024-08-20 05:32:13,034:INFO:Uploading results into container
2024-08-20 05:32:13,034:INFO:Uploading model into container now
2024-08-20 05:32:13,037:INFO:_master_model_container: 2
2024-08-20 05:32:13,037:INFO:_display_container: 1
2024-08-20 05:32:13,037:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-20 05:32:13,037:INFO:create_model() successfully completed......................................
2024-08-20 05:32:13,259:INFO:Initializing evaluate_model()
2024-08-20 05:32:13,259:INFO:evaluate_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002217657BC90>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 05:32:13,283:INFO:Initializing plot_model()
2024-08-20 05:32:13,283:INFO:plot_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002217657BC90>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), plot=pipeline, scale=1, save=False, fold=None, fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 05:32:13,283:INFO:Checking exceptions
2024-08-20 05:32:13,400:INFO:Preloading libraries
2024-08-20 05:32:13,407:INFO:Copying training dataset
2024-08-20 05:32:13,407:INFO:Plot type: pipeline
2024-08-20 05:32:13,572:INFO:Visual Rendered Successfully
2024-08-20 05:32:13,795:INFO:plot_model() successfully completed......................................
2024-08-20 05:32:13,800:INFO:Initializing plot_model()
2024-08-20 05:32:13,800:INFO:plot_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002217657BC90>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), plot=tsne, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 05:32:13,800:INFO:Checking exceptions
2024-08-20 05:32:13,921:INFO:Preloading libraries
2024-08-20 05:32:13,928:INFO:Copying training dataset
2024-08-20 05:32:13,928:INFO:Plot type: tsne
2024-08-20 05:32:13,928:INFO:SubProcess assign_model() called ==================================
2024-08-20 05:32:13,928:INFO:Initializing assign_model()
2024-08-20 05:32:13,928:INFO:assign_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002217657BC90>, model=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), transformation=True, score=False, verbose=False)
2024-08-20 05:32:13,928:INFO:Checking exceptions
2024-08-20 05:32:13,929:INFO:Determining Trained Model
2024-08-20 05:32:13,929:INFO:Trained Model : Isolation Forest
2024-08-20 05:32:13,929:INFO:Copying data
2024-08-20 05:32:14,002:INFO:Transformation parameter set to True. Assigned clusters are attached on transformed dataset.
2024-08-20 05:32:14,003:INFO:(15156, 210)
2024-08-20 05:32:14,003:INFO:assign_model() successfully completed......................................
2024-08-20 05:32:14,012:INFO:SubProcess assign_model() end ==================================
2024-08-20 05:32:14,040:INFO:Getting dummies to cast categorical variables
2024-08-20 05:32:14,040:INFO:Fitting TSNE()
2024-08-20 05:33:56,958:INFO:Rendering Visual
2024-08-20 05:34:00,064:INFO:Visual Rendered Successfully
2024-08-20 05:34:00,314:INFO:plot_model() successfully completed......................................
2024-08-20 05:36:57,125:INFO:PyCaret RegressionExperiment
2024-08-20 05:36:57,125:INFO:Logging name: reg-default-name
2024-08-20 05:36:57,125:INFO:ML Usecase: MLUsecase.REGRESSION
2024-08-20 05:36:57,125:INFO:version 3.3.2
2024-08-20 05:36:57,125:INFO:Initializing setup()
2024-08-20 05:36:57,125:INFO:self.USI: 8ac6
2024-08-20 05:36:57,125:INFO:self._variable_keys: {'X', 'y', 'target_param', 'exp_id', 'log_plots_param', 'n_jobs_param', 'data', 'memory', 'X_train', 'fold_generator', 'y_train', 'transform_target_param', 'gpu_n_jobs_param', '_ml_usecase', 'idx', 'X_test', 'y_test', 'pipeline', 'seed', 'html_param', 'fold_shuffle_param', 'exp_name_log', 'fold_groups_param', '_available_plots', 'USI', 'gpu_param', 'logging_param'}
2024-08-20 05:36:57,126:INFO:Checking environment
2024-08-20 05:36:57,126:INFO:python_version: 3.11.7
2024-08-20 05:36:57,126:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 05:36:57,126:INFO:machine: AMD64
2024-08-20 05:36:57,126:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 05:36:57,126:INFO:Memory: svmem(total=16890978304, available=3006431232, percent=82.2, used=13884547072, free=3006431232)
2024-08-20 05:36:57,126:INFO:Physical Core: 12
2024-08-20 05:36:57,126:INFO:Logical Core: 16
2024-08-20 05:36:57,126:INFO:Checking libraries
2024-08-20 05:36:57,126:INFO:System:
2024-08-20 05:36:57,126:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 05:36:57,126:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 05:36:57,126:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 05:36:57,126:INFO:PyCaret required dependencies:
2024-08-20 05:36:57,126:INFO:                 pip: 23.3.1
2024-08-20 05:36:57,126:INFO:          setuptools: 68.2.2
2024-08-20 05:36:57,126:INFO:             pycaret: 3.3.2
2024-08-20 05:36:57,126:INFO:             IPython: 8.20.0
2024-08-20 05:36:57,126:INFO:          ipywidgets: 7.6.5
2024-08-20 05:36:57,126:INFO:                tqdm: 4.65.0
2024-08-20 05:36:57,126:INFO:               numpy: 1.26.4
2024-08-20 05:36:57,127:INFO:              pandas: 2.1.4
2024-08-20 05:36:57,127:INFO:              jinja2: 3.1.3
2024-08-20 05:36:57,127:INFO:               scipy: 1.11.4
2024-08-20 05:36:57,127:INFO:              joblib: 1.2.0
2024-08-20 05:36:57,127:INFO:             sklearn: 1.2.2
2024-08-20 05:36:57,127:INFO:                pyod: 2.0.1
2024-08-20 05:36:57,127:INFO:            imblearn: 0.11.0
2024-08-20 05:36:57,127:INFO:   category_encoders: 2.6.3
2024-08-20 05:36:57,127:INFO:            lightgbm: 4.4.0
2024-08-20 05:36:57,127:INFO:               numba: 0.59.0
2024-08-20 05:36:57,127:INFO:            requests: 2.31.0
2024-08-20 05:36:57,127:INFO:          matplotlib: 3.8.0
2024-08-20 05:36:57,127:INFO:          scikitplot: 0.3.7
2024-08-20 05:36:57,127:INFO:         yellowbrick: 1.5
2024-08-20 05:36:57,127:INFO:              plotly: 5.9.0
2024-08-20 05:36:57,127:INFO:    plotly-resampler: Not installed
2024-08-20 05:36:57,127:INFO:             kaleido: 0.2.1
2024-08-20 05:36:57,127:INFO:           schemdraw: 0.15
2024-08-20 05:36:57,127:INFO:         statsmodels: 0.14.0
2024-08-20 05:36:57,127:INFO:              sktime: 0.26.0
2024-08-20 05:36:57,127:INFO:               tbats: 1.1.3
2024-08-20 05:36:57,127:INFO:            pmdarima: 2.0.4
2024-08-20 05:36:57,127:INFO:              psutil: 5.9.0
2024-08-20 05:36:57,127:INFO:          markupsafe: 2.1.3
2024-08-20 05:36:57,127:INFO:             pickle5: Not installed
2024-08-20 05:36:57,127:INFO:         cloudpickle: 2.2.1
2024-08-20 05:36:57,127:INFO:         deprecation: 2.1.0
2024-08-20 05:36:57,127:INFO:              xxhash: 3.4.1
2024-08-20 05:36:57,127:INFO:           wurlitzer: Not installed
2024-08-20 05:36:57,128:INFO:PyCaret optional dependencies:
2024-08-20 05:36:57,128:INFO:                shap: 0.44.1
2024-08-20 05:36:57,128:INFO:           interpret: 0.6.2
2024-08-20 05:36:57,128:INFO:                umap: 0.5.6
2024-08-20 05:36:57,128:INFO:     ydata_profiling: 4.8.3
2024-08-20 05:36:57,128:INFO:  explainerdashboard: 0.4.7
2024-08-20 05:36:57,128:INFO:             autoviz: Not installed
2024-08-20 05:36:57,128:INFO:           fairlearn: 0.7.0
2024-08-20 05:36:57,128:INFO:          deepchecks: Not installed
2024-08-20 05:36:57,128:INFO:             xgboost: 2.1.0
2024-08-20 05:36:57,128:INFO:            catboost: 1.2.5
2024-08-20 05:36:57,128:INFO:              kmodes: 0.12.2
2024-08-20 05:36:57,128:INFO:             mlxtend: 0.23.1
2024-08-20 05:36:57,128:INFO:       statsforecast: 1.5.0
2024-08-20 05:36:57,128:INFO:        tune_sklearn: Not installed
2024-08-20 05:36:57,128:INFO:                 ray: Not installed
2024-08-20 05:36:57,128:INFO:            hyperopt: 0.2.7
2024-08-20 05:36:57,128:INFO:              optuna: 3.6.1
2024-08-20 05:36:57,128:INFO:               skopt: 0.10.2
2024-08-20 05:36:57,128:INFO:              mlflow: 2.14.2
2024-08-20 05:36:57,128:INFO:              gradio: 4.37.2
2024-08-20 05:36:57,128:INFO:             fastapi: 0.111.0
2024-08-20 05:36:57,128:INFO:             uvicorn: 0.30.1
2024-08-20 05:36:57,128:INFO:              m2cgen: 0.10.0
2024-08-20 05:36:57,128:INFO:           evidently: 0.4.30
2024-08-20 05:36:57,128:INFO:               fugue: 0.8.7
2024-08-20 05:36:57,128:INFO:           streamlit: 1.30.0
2024-08-20 05:36:57,128:INFO:             prophet: Not installed
2024-08-20 05:36:57,128:INFO:None
2024-08-20 05:36:57,128:INFO:Set up data.
2024-08-20 05:36:57,151:INFO:Set up folding strategy.
2024-08-20 05:36:57,151:INFO:Set up train/test split.
2024-08-20 05:36:57,160:INFO:Set up index.
2024-08-20 05:36:57,161:INFO:Assigning column types.
2024-08-20 05:36:57,164:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 05:36:57,164:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,172:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,178:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,268:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,325:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,325:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:57,328:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:57,328:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,333:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,336:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,394:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,436:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,436:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:57,439:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:57,439:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-08-20 05:36:57,443:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,447:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,511:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,557:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,558:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:57,561:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:57,567:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,571:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,629:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,676:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,676:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:57,679:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:57,679:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-08-20 05:36:57,688:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,746:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,784:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,785:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:57,786:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:57,794:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,849:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,899:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:57,902:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:57,905:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:57,905:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-08-20 05:36:57,963:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:58,005:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:58,006:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:58,008:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:58,081:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:58,118:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 05:36:58,119:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:58,121:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:58,122:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 05:36:58,196:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:58,237:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:58,240:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:58,305:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-08-20 05:36:58,352:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:58,354:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:58,354:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-08-20 05:36:58,458:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:58,460:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:58,575:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:58,577:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:58,578:INFO:Preparing preprocessing pipeline...
2024-08-20 05:36:58,578:INFO:Set up simple imputation.
2024-08-20 05:36:58,582:INFO:Set up encoding of categorical features.
2024-08-20 05:36:58,582:INFO:Set up column transformation.
2024-08-20 05:36:58,582:INFO:Set up feature normalization.
2024-08-20 05:36:58,881:INFO:Finished creating preprocessing pipeline.
2024-08-20 05:36:58,895:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC',
                                             'TRANS_DT'],
                                    transformer=SimpleImputer(strategy='most_frequent')))...
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['MERCHANT', 'CAT_DESC',
                                             'TRANS_DT'],
                                    transformer=TargetEncoder(cols=['MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT'],
                                                              handle_missing='return_nan'))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-08-20 05:36:58,895:INFO:Creating final display dataframe.
2024-08-20 05:36:59,219:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               AMT
2                   Target type        Regression
3           Original data shape        (15156, 8)
4        Transformed data shape       (15156, 32)
5   Transformed train set shape       (10609, 32)
6    Transformed test set shape        (4547, 32)
7              Numeric features                 2
8          Categorical features                 5
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Transformation              True
16        Transformation method       yeo-johnson
17                    Normalize              True
18             Normalize method            zscore
19               Fold Generator             KFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  reg-default-name
25                          USI              8ac6
2024-08-20 05:36:59,354:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:59,358:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:59,466:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 05:36:59,469:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 05:36:59,470:INFO:setup() successfully completed in 2.37s...............
2024-08-20 05:37:41,958:INFO:PyCaret AnomalyExperiment
2024-08-20 05:37:41,959:INFO:Logging name: anomaly-default-name
2024-08-20 05:37:41,959:INFO:ML Usecase: MLUsecase.ANOMALY
2024-08-20 05:37:41,959:INFO:version 3.3.2
2024-08-20 05:37:41,959:INFO:Initializing setup()
2024-08-20 05:37:41,959:INFO:self.USI: 5b8c
2024-08-20 05:37:41,959:INFO:self._variable_keys: {'X', 'exp_id', 'log_plots_param', 'n_jobs_param', 'data', 'memory', 'gpu_n_jobs_param', '_ml_usecase', 'idx', 'pipeline', 'seed', 'html_param', 'exp_name_log', '_available_plots', 'USI', 'gpu_param', 'logging_param'}
2024-08-20 05:37:41,959:INFO:Checking environment
2024-08-20 05:37:41,959:INFO:python_version: 3.11.7
2024-08-20 05:37:41,959:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 05:37:41,959:INFO:machine: AMD64
2024-08-20 05:37:41,959:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 05:37:41,959:INFO:Memory: svmem(total=16890978304, available=6183038976, percent=63.4, used=10707939328, free=6183038976)
2024-08-20 05:37:41,959:INFO:Physical Core: 12
2024-08-20 05:37:41,959:INFO:Logical Core: 16
2024-08-20 05:37:41,959:INFO:Checking libraries
2024-08-20 05:37:41,959:INFO:System:
2024-08-20 05:37:41,959:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 05:37:41,960:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 05:37:41,960:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 05:37:41,960:INFO:PyCaret required dependencies:
2024-08-20 05:37:41,960:INFO:                 pip: 23.3.1
2024-08-20 05:37:41,960:INFO:          setuptools: 68.2.2
2024-08-20 05:37:41,960:INFO:             pycaret: 3.3.2
2024-08-20 05:37:41,960:INFO:             IPython: 8.20.0
2024-08-20 05:37:41,960:INFO:          ipywidgets: 7.6.5
2024-08-20 05:37:41,960:INFO:                tqdm: 4.65.0
2024-08-20 05:37:41,960:INFO:               numpy: 1.26.4
2024-08-20 05:37:41,960:INFO:              pandas: 2.1.4
2024-08-20 05:37:41,960:INFO:              jinja2: 3.1.3
2024-08-20 05:37:41,960:INFO:               scipy: 1.11.4
2024-08-20 05:37:41,960:INFO:              joblib: 1.2.0
2024-08-20 05:37:41,960:INFO:             sklearn: 1.2.2
2024-08-20 05:37:41,960:INFO:                pyod: 2.0.1
2024-08-20 05:37:41,960:INFO:            imblearn: 0.11.0
2024-08-20 05:37:41,960:INFO:   category_encoders: 2.6.3
2024-08-20 05:37:41,960:INFO:            lightgbm: 4.4.0
2024-08-20 05:37:41,960:INFO:               numba: 0.59.0
2024-08-20 05:37:41,960:INFO:            requests: 2.31.0
2024-08-20 05:37:41,960:INFO:          matplotlib: 3.8.0
2024-08-20 05:37:41,960:INFO:          scikitplot: 0.3.7
2024-08-20 05:37:41,960:INFO:         yellowbrick: 1.5
2024-08-20 05:37:41,960:INFO:              plotly: 5.9.0
2024-08-20 05:37:41,960:INFO:    plotly-resampler: Not installed
2024-08-20 05:37:41,960:INFO:             kaleido: 0.2.1
2024-08-20 05:37:41,960:INFO:           schemdraw: 0.15
2024-08-20 05:37:41,961:INFO:         statsmodels: 0.14.0
2024-08-20 05:37:41,961:INFO:              sktime: 0.26.0
2024-08-20 05:37:41,961:INFO:               tbats: 1.1.3
2024-08-20 05:37:41,961:INFO:            pmdarima: 2.0.4
2024-08-20 05:37:41,961:INFO:              psutil: 5.9.0
2024-08-20 05:37:41,961:INFO:          markupsafe: 2.1.3
2024-08-20 05:37:41,961:INFO:             pickle5: Not installed
2024-08-20 05:37:41,961:INFO:         cloudpickle: 2.2.1
2024-08-20 05:37:41,961:INFO:         deprecation: 2.1.0
2024-08-20 05:37:41,961:INFO:              xxhash: 3.4.1
2024-08-20 05:37:41,961:INFO:           wurlitzer: Not installed
2024-08-20 05:37:41,961:INFO:PyCaret optional dependencies:
2024-08-20 05:37:41,961:INFO:                shap: 0.44.1
2024-08-20 05:37:41,961:INFO:           interpret: 0.6.2
2024-08-20 05:37:41,961:INFO:                umap: 0.5.6
2024-08-20 05:37:41,961:INFO:     ydata_profiling: 4.8.3
2024-08-20 05:37:41,961:INFO:  explainerdashboard: 0.4.7
2024-08-20 05:37:41,961:INFO:             autoviz: Not installed
2024-08-20 05:37:41,961:INFO:           fairlearn: 0.7.0
2024-08-20 05:37:41,962:INFO:          deepchecks: Not installed
2024-08-20 05:37:41,962:INFO:             xgboost: 2.1.0
2024-08-20 05:37:41,962:INFO:            catboost: 1.2.5
2024-08-20 05:37:41,962:INFO:              kmodes: 0.12.2
2024-08-20 05:37:41,962:INFO:             mlxtend: 0.23.1
2024-08-20 05:37:41,962:INFO:       statsforecast: 1.5.0
2024-08-20 05:37:41,962:INFO:        tune_sklearn: Not installed
2024-08-20 05:37:41,962:INFO:                 ray: Not installed
2024-08-20 05:37:41,962:INFO:            hyperopt: 0.2.7
2024-08-20 05:37:41,962:INFO:              optuna: 3.6.1
2024-08-20 05:37:41,962:INFO:               skopt: 0.10.2
2024-08-20 05:37:41,962:INFO:              mlflow: 2.14.2
2024-08-20 05:37:41,962:INFO:              gradio: 4.37.2
2024-08-20 05:37:41,962:INFO:             fastapi: 0.111.0
2024-08-20 05:37:41,962:INFO:             uvicorn: 0.30.1
2024-08-20 05:37:41,962:INFO:              m2cgen: 0.10.0
2024-08-20 05:37:41,962:INFO:           evidently: 0.4.30
2024-08-20 05:37:41,962:INFO:               fugue: 0.8.7
2024-08-20 05:37:41,962:INFO:           streamlit: 1.30.0
2024-08-20 05:37:41,962:INFO:             prophet: Not installed
2024-08-20 05:37:41,962:INFO:None
2024-08-20 05:37:41,962:INFO:Set up data.
2024-08-20 05:37:41,979:INFO:Set up index.
2024-08-20 05:37:41,979:INFO:Assigning column types.
2024-08-20 05:37:41,982:INFO:Engine successfully changes for model 'kmeans' to 'sklearn'.
2024-08-20 05:37:41,983:INFO:Engine successfully changes for model 'dbscan' to 'sklearn'.
2024-08-20 05:37:41,985:INFO:Preparing preprocessing pipeline...
2024-08-20 05:37:41,985:INFO:Set up simple imputation.
2024-08-20 05:37:41,986:INFO:Set up encoding of categorical features.
2024-08-20 05:37:41,987:INFO:Set up binning of numerical features.
2024-08-20 05:37:42,312:INFO:Finished creating preprocessing pipeline.
2024-08-20 05:37:42,320:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['CAT_DESC'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['CAT_DESC'],
                                    transformer=OneHotEncoder(cols=['CAT_DESC'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('bin_numeric_features',
                 TransformerWrapper(include=['AMT'],
                                    transformer=KBinsDiscretizer(encode='ordinal',
                                                                 strategy='kmeans')))])
2024-08-20 05:37:42,320:INFO:Creating final display dataframe.
2024-08-20 05:37:42,583:INFO:Setup _display_container:                  Description                 Value
0                 Session id                   123
1        Original data shape            (15156, 8)
2     Transformed data shape          (15156, 209)
3            Ignore features                     7
4           Numeric features                     1
5       Categorical features                     1
6                 Preprocess                  True
7            Imputation type                simple
8         Numeric imputation                  mean
9     Categorical imputation                  mode
10  Maximum one-hot encoding                    -1
11           Encoding method                  None
12                  CPU Jobs                    -1
13                   Use GPU                 False
14            Log Experiment                 False
15           Experiment Name  anomaly-default-name
16                       USI                  5b8c
2024-08-20 05:37:42,589:INFO:setup() successfully completed in 0.66s...............
2024-08-20 05:37:54,805:INFO:Initializing create_model()
2024-08-20 05:37:54,805:INFO:create_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002216AA4CFD0>, estimator=iforest, num_clusters=4, fraction=0.05, ground_truth=None, round=4, fit_kwargs=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, raise_num_clusters=False, display=None, kwargs={})
2024-08-20 05:37:54,806:INFO:Checking exceptions
2024-08-20 05:37:54,884:INFO:Importing untrained model
2024-08-20 05:37:54,888:INFO:Isolation Forest Imported successfully
2024-08-20 05:37:54,896:INFO:Fitting Model
2024-08-20 05:37:55,611:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-20 05:37:55,611:INFO:create_models() successfully completed......................................
2024-08-20 05:37:55,616:INFO:Uploading results into container
2024-08-20 05:37:55,616:INFO:Uploading model into container now
2024-08-20 05:37:55,617:INFO:_master_model_container: 1
2024-08-20 05:37:55,619:INFO:_display_container: 1
2024-08-20 05:37:55,619:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-20 05:37:55,619:INFO:create_model() successfully completed......................................
2024-08-20 05:37:55,889:INFO:Initializing evaluate_model()
2024-08-20 05:37:55,889:INFO:evaluate_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002216AA4CFD0>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 05:37:55,897:INFO:Initializing plot_model()
2024-08-20 05:37:55,897:INFO:plot_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002216AA4CFD0>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), plot=pipeline, scale=1, save=False, fold=None, fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 05:37:55,897:INFO:Checking exceptions
2024-08-20 05:37:59,885:INFO:Preloading libraries
2024-08-20 05:37:59,903:INFO:Copying training dataset
2024-08-20 05:37:59,903:INFO:Plot type: pipeline
2024-08-20 05:38:00,156:INFO:Visual Rendered Successfully
2024-08-20 05:38:00,416:INFO:plot_model() successfully completed......................................
2024-08-20 05:38:00,424:INFO:Initializing plot_model()
2024-08-20 05:38:00,424:INFO:plot_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002216AA4CFD0>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), plot=tsne, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 05:38:00,424:INFO:Checking exceptions
2024-08-20 05:38:00,581:INFO:Preloading libraries
2024-08-20 05:38:00,596:INFO:Copying training dataset
2024-08-20 05:38:00,596:INFO:Plot type: tsne
2024-08-20 05:38:00,597:INFO:SubProcess assign_model() called ==================================
2024-08-20 05:38:00,597:INFO:Initializing assign_model()
2024-08-20 05:38:00,597:INFO:assign_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000002216AA4CFD0>, model=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), transformation=True, score=False, verbose=False)
2024-08-20 05:38:00,597:INFO:Checking exceptions
2024-08-20 05:38:00,597:INFO:Determining Trained Model
2024-08-20 05:38:00,598:INFO:Trained Model : Isolation Forest
2024-08-20 05:38:00,598:INFO:Copying data
2024-08-20 05:38:00,679:INFO:Transformation parameter set to True. Assigned clusters are attached on transformed dataset.
2024-08-20 05:38:00,680:INFO:(15156, 210)
2024-08-20 05:38:00,680:INFO:assign_model() successfully completed......................................
2024-08-20 05:38:00,690:INFO:SubProcess assign_model() end ==================================
2024-08-20 05:38:00,719:INFO:Getting dummies to cast categorical variables
2024-08-20 05:38:00,719:INFO:Fitting TSNE()
2024-08-20 05:39:42,194:INFO:Rendering Visual
2024-08-20 05:39:42,398:INFO:Visual Rendered Successfully
2024-08-20 05:39:42,694:INFO:plot_model() successfully completed......................................
2024-08-20 05:43:35,500:INFO:Initializing load_model()
2024-08-20 05:43:35,502:INFO:load_model(model_name=final_hdb_resale_price_pipeline, platform=None, authentication=None, verbose=True)
2024-08-20 21:09:40,193:INFO:Initializing plot_model()
2024-08-20 21:09:40,198:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 21:09:40,198:INFO:Checking exceptions
2024-08-20 21:09:40,404:INFO:Preloading libraries
2024-08-20 21:09:40,423:INFO:Copying training dataset
2024-08-20 21:09:40,424:INFO:Plot type: auc
2024-08-20 21:09:41,046:INFO:Fitting Model
2024-08-20 21:09:41,080:INFO:Scoring test/hold-out set
2024-08-20 21:09:42,345:INFO:Visual Rendered Successfully
2024-08-20 21:09:44,070:INFO:plot_model() successfully completed......................................
2024-08-20 21:09:44,073:INFO:Initializing evaluate_model()
2024-08-20 21:09:44,073:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 21:09:44,099:INFO:Initializing plot_model()
2024-08-20 21:09:44,099:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:09:44,099:INFO:Checking exceptions
2024-08-20 21:09:44,105:INFO:Preloading libraries
2024-08-20 21:09:44,111:INFO:Copying training dataset
2024-08-20 21:09:44,111:INFO:Plot type: pipeline
2024-08-20 21:09:44,472:INFO:Visual Rendered Successfully
2024-08-20 21:09:44,790:INFO:plot_model() successfully completed......................................
2024-08-20 21:09:49,296:INFO:Initializing plot_model()
2024-08-20 21:09:49,296:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:09:49,296:INFO:Checking exceptions
2024-08-20 21:09:49,299:INFO:Preloading libraries
2024-08-20 21:09:49,301:INFO:Copying training dataset
2024-08-20 21:09:49,301:INFO:Plot type: parameter
2024-08-20 21:09:49,314:INFO:Visual Rendered Successfully
2024-08-20 21:09:49,608:INFO:plot_model() successfully completed......................................
2024-08-20 21:09:50,577:INFO:Initializing plot_model()
2024-08-20 21:09:50,577:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=auc, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:09:50,578:INFO:Checking exceptions
2024-08-20 21:09:50,580:INFO:Preloading libraries
2024-08-20 21:09:50,582:INFO:Copying training dataset
2024-08-20 21:09:50,582:INFO:Plot type: auc
2024-08-20 21:09:50,937:INFO:Fitting Model
2024-08-20 21:09:50,938:INFO:Scoring test/hold-out set
2024-08-20 21:09:51,822:INFO:Visual Rendered Successfully
2024-08-20 21:09:52,168:INFO:plot_model() successfully completed......................................
2024-08-20 21:09:53,937:INFO:Initializing plot_model()
2024-08-20 21:09:53,937:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=confusion_matrix, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:09:53,938:INFO:Checking exceptions
2024-08-20 21:09:53,940:INFO:Preloading libraries
2024-08-20 21:09:53,942:INFO:Copying training dataset
2024-08-20 21:09:53,942:INFO:Plot type: confusion_matrix
2024-08-20 21:09:54,273:INFO:Fitting Model
2024-08-20 21:09:54,273:INFO:Scoring test/hold-out set
2024-08-20 21:09:55,117:INFO:Visual Rendered Successfully
2024-08-20 21:09:55,458:INFO:plot_model() successfully completed......................................
2024-08-20 21:09:56,223:INFO:Initializing plot_model()
2024-08-20 21:09:56,223:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=threshold, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:09:56,224:INFO:Checking exceptions
2024-08-20 21:09:56,226:INFO:Preloading libraries
2024-08-20 21:09:56,228:INFO:Copying training dataset
2024-08-20 21:09:56,228:INFO:Plot type: threshold
2024-08-20 21:09:56,547:INFO:Fitting Model
2024-08-20 21:10:03,074:INFO:Scoring test/hold-out set
2024-08-20 21:10:04,041:INFO:Visual Rendered Successfully
2024-08-20 21:10:04,353:INFO:plot_model() successfully completed......................................
2024-08-20 21:10:07,070:INFO:Initializing plot_model()
2024-08-20 21:10:07,070:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=feature, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:10:07,070:INFO:Checking exceptions
2024-08-20 21:10:08,623:INFO:Initializing plot_model()
2024-08-20 21:10:08,624:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=feature_all, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:10:08,624:INFO:Checking exceptions
2024-08-20 21:10:19,588:INFO:Initializing plot_model()
2024-08-20 21:10:19,588:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:10:19,588:INFO:Checking exceptions
2024-08-20 21:10:19,591:INFO:Preloading libraries
2024-08-20 21:10:19,593:INFO:Copying training dataset
2024-08-20 21:10:19,593:INFO:Plot type: pipeline
2024-08-20 21:10:19,783:INFO:Visual Rendered Successfully
2024-08-20 21:10:20,060:INFO:plot_model() successfully completed......................................
2024-08-20 21:10:22,270:INFO:Initializing predict_model()
2024-08-20 21:10:22,270:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AAF5B3B100>)
2024-08-20 21:10:22,270:INFO:Checking exceptions
2024-08-20 21:10:22,270:INFO:Preloading libraries
2024-08-20 21:10:22,274:INFO:Set up data.
2024-08-20 21:10:22,302:INFO:Set up index.
2024-08-20 21:10:27,379:INFO:Initializing finalize_model()
2024-08-20 21:10:27,379:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-08-20 21:10:27,379:INFO:Finalizing KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 21:10:27,383:INFO:Initializing create_model()
2024-08-20 21:10:27,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:10:27,383:INFO:Checking exceptions
2024-08-20 21:10:27,384:INFO:Importing libraries
2024-08-20 21:10:27,384:INFO:Copying training dataset
2024-08-20 21:10:27,384:INFO:Defining folds
2024-08-20 21:10:27,384:INFO:Declaring metric variables
2024-08-20 21:10:27,384:INFO:Importing untrained model
2024-08-20 21:10:27,384:INFO:Declaring custom model
2024-08-20 21:10:27,385:INFO:K Neighbors Classifier Imported successfully
2024-08-20 21:10:27,390:INFO:Cross validation set to False
2024-08-20 21:10:27,390:INFO:Fitting Model
2024-08-20 21:10:28,049:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:10:28,050:INFO:create_model() successfully completed......................................
2024-08-20 21:10:28,290:INFO:_master_model_container: 16
2024-08-20 21:10:28,291:INFO:_display_container: 5
2024-08-20 21:10:28,356:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:10:28,356:INFO:finalize_model() successfully completed......................................
2024-08-20 21:10:28,685:INFO:Initializing predict_model()
2024-08-20 21:10:28,685:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AAF438CBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AAF5B3B560>)
2024-08-20 21:10:28,685:INFO:Checking exceptions
2024-08-20 21:10:28,685:INFO:Preloading libraries
2024-08-20 21:10:28,688:INFO:Set up data.
2024-08-20 21:10:28,717:INFO:Set up index.
2024-08-20 21:11:03,626:INFO:Initializing save_model()
2024-08-20 21:11:03,626:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), model_name=final_mushroom_pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-08-20 21:11:03,627:INFO:Adding model into prep_pipe
2024-08-20 21:11:03,627:WARNING:Only Model saved as it was a pipeline.
2024-08-20 21:11:03,695:INFO:final_mushroom_pipeline.pkl saved in current working directory
2024-08-20 21:11:03,797:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:11:03,797:INFO:save_model() successfully completed......................................
2024-08-20 21:11:05,743:INFO:Initializing load_model()
2024-08-20 21:11:05,744:INFO:load_model(model_name=final_mushroom_pipeline, platform=None, authentication=None, verbose=True)
2024-08-20 21:21:30,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 21:21:30,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 21:21:30,305:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 21:21:30,305:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 21:21:45,694:INFO:PyCaret ClassificationExperiment
2024-08-20 21:21:45,694:INFO:Logging name: clf-default-name
2024-08-20 21:21:45,694:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-08-20 21:21:45,694:INFO:version 3.3.2
2024-08-20 21:21:45,694:INFO:Initializing setup()
2024-08-20 21:21:45,694:INFO:self.USI: 774b
2024-08-20 21:21:45,695:INFO:self._variable_keys: {'html_param', 'X_test', 'n_jobs_param', 'exp_id', 'logging_param', 'data', 'fold_generator', 'fold_shuffle_param', 'is_multiclass', 'fix_imbalance', 'target_param', 'y_train', 'gpu_param', 'y', 'pipeline', 'log_plots_param', 'fold_groups_param', '_available_plots', 'idx', 'y_test', 'memory', 'exp_name_log', 'gpu_n_jobs_param', 'X_train', 'seed', 'X', '_ml_usecase', 'USI'}
2024-08-20 21:21:45,695:INFO:Checking environment
2024-08-20 21:21:45,695:INFO:python_version: 3.11.7
2024-08-20 21:21:45,695:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-20 21:21:45,695:INFO:machine: AMD64
2024-08-20 21:21:45,695:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-20 21:21:45,695:INFO:Memory: svmem(total=16890978304, available=2237509632, percent=86.8, used=14653468672, free=2237509632)
2024-08-20 21:21:45,695:INFO:Physical Core: 12
2024-08-20 21:21:45,695:INFO:Logical Core: 16
2024-08-20 21:21:45,695:INFO:Checking libraries
2024-08-20 21:21:45,695:INFO:System:
2024-08-20 21:21:45,696:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-20 21:21:45,696:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-20 21:21:45,696:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-20 21:21:45,696:INFO:PyCaret required dependencies:
2024-08-20 21:21:49,320:INFO:                 pip: 23.3.1
2024-08-20 21:21:49,320:INFO:          setuptools: 68.2.2
2024-08-20 21:21:49,320:INFO:             pycaret: 3.3.2
2024-08-20 21:21:49,321:INFO:             IPython: 8.20.0
2024-08-20 21:21:49,321:INFO:          ipywidgets: 7.6.5
2024-08-20 21:21:49,321:INFO:                tqdm: 4.65.0
2024-08-20 21:21:49,321:INFO:               numpy: 1.26.4
2024-08-20 21:21:49,321:INFO:              pandas: 2.1.4
2024-08-20 21:21:49,321:INFO:              jinja2: 3.1.3
2024-08-20 21:21:49,321:INFO:               scipy: 1.11.4
2024-08-20 21:21:49,322:INFO:              joblib: 1.2.0
2024-08-20 21:21:49,322:INFO:             sklearn: 1.2.2
2024-08-20 21:21:49,322:INFO:                pyod: 2.0.1
2024-08-20 21:21:49,322:INFO:            imblearn: 0.11.0
2024-08-20 21:21:49,322:INFO:   category_encoders: 2.6.3
2024-08-20 21:21:49,322:INFO:            lightgbm: 4.4.0
2024-08-20 21:21:49,322:INFO:               numba: 0.59.0
2024-08-20 21:21:49,322:INFO:            requests: 2.31.0
2024-08-20 21:21:49,323:INFO:          matplotlib: 3.8.0
2024-08-20 21:21:49,323:INFO:          scikitplot: 0.3.7
2024-08-20 21:21:49,323:INFO:         yellowbrick: 1.5
2024-08-20 21:21:49,323:INFO:              plotly: 5.9.0
2024-08-20 21:21:49,323:INFO:    plotly-resampler: Not installed
2024-08-20 21:21:49,323:INFO:             kaleido: 0.2.1
2024-08-20 21:21:49,323:INFO:           schemdraw: 0.15
2024-08-20 21:21:49,324:INFO:         statsmodels: 0.14.0
2024-08-20 21:21:49,324:INFO:              sktime: 0.26.0
2024-08-20 21:21:49,324:INFO:               tbats: 1.1.3
2024-08-20 21:21:49,324:INFO:            pmdarima: 2.0.4
2024-08-20 21:21:49,324:INFO:              psutil: 5.9.0
2024-08-20 21:21:49,324:INFO:          markupsafe: 2.1.3
2024-08-20 21:21:49,324:INFO:             pickle5: Not installed
2024-08-20 21:21:49,324:INFO:         cloudpickle: 2.2.1
2024-08-20 21:21:49,325:INFO:         deprecation: 2.1.0
2024-08-20 21:21:49,325:INFO:              xxhash: 3.4.1
2024-08-20 21:21:49,325:INFO:           wurlitzer: Not installed
2024-08-20 21:21:49,325:INFO:PyCaret optional dependencies:
2024-08-20 21:22:01,435:INFO:                shap: 0.44.1
2024-08-20 21:22:01,435:INFO:           interpret: 0.6.2
2024-08-20 21:22:01,435:INFO:                umap: 0.5.6
2024-08-20 21:22:01,437:INFO:     ydata_profiling: 4.8.3
2024-08-20 21:22:01,437:INFO:  explainerdashboard: 0.4.7
2024-08-20 21:22:01,437:INFO:             autoviz: Not installed
2024-08-20 21:22:01,437:INFO:           fairlearn: 0.7.0
2024-08-20 21:22:01,437:INFO:          deepchecks: Not installed
2024-08-20 21:22:01,437:INFO:             xgboost: 2.1.0
2024-08-20 21:22:01,437:INFO:            catboost: 1.2.5
2024-08-20 21:22:01,438:INFO:              kmodes: 0.12.2
2024-08-20 21:22:01,438:INFO:             mlxtend: 0.23.1
2024-08-20 21:22:01,438:INFO:       statsforecast: 1.5.0
2024-08-20 21:22:01,438:INFO:        tune_sklearn: Not installed
2024-08-20 21:22:01,438:INFO:                 ray: Not installed
2024-08-20 21:22:01,438:INFO:            hyperopt: 0.2.7
2024-08-20 21:22:01,438:INFO:              optuna: 3.6.1
2024-08-20 21:22:01,438:INFO:               skopt: 0.10.2
2024-08-20 21:22:01,439:INFO:              mlflow: 2.14.2
2024-08-20 21:22:01,439:INFO:              gradio: 4.37.2
2024-08-20 21:22:01,439:INFO:             fastapi: 0.111.0
2024-08-20 21:22:01,439:INFO:             uvicorn: 0.30.1
2024-08-20 21:22:01,439:INFO:              m2cgen: 0.10.0
2024-08-20 21:22:01,439:INFO:           evidently: 0.4.30
2024-08-20 21:22:01,439:INFO:               fugue: 0.8.7
2024-08-20 21:22:01,439:INFO:           streamlit: 1.30.0
2024-08-20 21:22:01,440:INFO:             prophet: Not installed
2024-08-20 21:22:01,440:INFO:None
2024-08-20 21:22:01,440:INFO:Set up data.
2024-08-20 21:22:01,513:INFO:Set up folding strategy.
2024-08-20 21:22:01,513:INFO:Set up train/test split.
2024-08-20 21:22:01,560:INFO:Set up index.
2024-08-20 21:22:01,561:INFO:Assigning column types.
2024-08-20 21:22:01,571:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-08-20 21:22:01,781:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 21:22:01,793:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 21:22:01,951:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:01,963:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:03,498:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-08-20 21:22:03,500:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 21:22:03,613:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:03,624:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:03,626:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-08-20 21:22:03,760:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 21:22:03,853:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:03,863:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:03,996:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-08-20 21:22:04,065:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:04,072:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:04,073:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-08-20 21:22:04,272:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:04,278:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:04,504:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:04,510:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:04,546:INFO:Preparing preprocessing pipeline...
2024-08-20 21:22:04,548:INFO:Set up label encoding.
2024-08-20 21:22:04,548:INFO:Set up simple imputation.
2024-08-20 21:22:04,566:INFO:Set up encoding of ordinal features.
2024-08-20 21:22:04,581:INFO:Set up encoding of categorical features.
2024-08-20 21:22:04,582:INFO:Set up column name cleaning.
2024-08-20 21:22:05,164:INFO:Finished creating preprocessing pipeline.
2024-08-20 21:22:05,360:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-08-20 21:22:05,360:INFO:Creating final display dataframe.
2024-08-20 21:22:05,813:INFO:Setup _display_container:                     Description                    Value
0                    Session id                      123
1                        Target                    class
2                   Target type                   Binary
3                Target mapping  edible: 0, poisonous: 1
4           Original data shape               (8124, 23)
5        Transformed data shape              (8124, 111)
6   Transformed train set shape              (5686, 111)
7    Transformed test set shape              (2438, 111)
8          Categorical features                       22
9      Rows with missing values                     2.4%
10                   Preprocess                     True
11              Imputation type                   simple
12           Numeric imputation                     mean
13       Categorical imputation                     mode
14     Maximum one-hot encoding                       25
15              Encoding method                     None
16               Fold Generator          StratifiedKFold
17                  Fold Number                       10
18                     CPU Jobs                       -1
19                      Use GPU                    False
20               Log Experiment                    False
21              Experiment Name         clf-default-name
22                          USI                     774b
2024-08-20 21:22:06,042:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:06,048:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:06,254:INFO:Soft dependency imported: xgboost: 2.1.0
2024-08-20 21:22:06,261:INFO:Soft dependency imported: catboost: 1.2.5
2024-08-20 21:22:06,263:INFO:setup() successfully completed in 20.82s...............
2024-08-20 21:22:06,264:INFO:Initializing compare_models()
2024-08-20 21:22:06,264:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-08-20 21:22:06,264:INFO:Checking exceptions
2024-08-20 21:22:06,270:INFO:Preparing display monitor
2024-08-20 21:22:06,310:INFO:Initializing Logistic Regression
2024-08-20 21:22:06,310:INFO:Total runtime is 0.0 minutes
2024-08-20 21:22:06,316:INFO:SubProcess create_model() called ==================================
2024-08-20 21:22:06,317:INFO:Initializing create_model()
2024-08-20 21:22:06,317:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:22:06,318:INFO:Checking exceptions
2024-08-20 21:22:06,318:INFO:Importing libraries
2024-08-20 21:22:06,318:INFO:Copying training dataset
2024-08-20 21:22:06,332:INFO:Defining folds
2024-08-20 21:22:06,332:INFO:Declaring metric variables
2024-08-20 21:22:06,340:INFO:Importing untrained model
2024-08-20 21:22:06,349:INFO:Logistic Regression Imported successfully
2024-08-20 21:22:06,364:INFO:Starting cross validation
2024-08-20 21:22:06,374:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:22:31,343:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,347:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,350:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,362:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,365:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,378:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,381:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,396:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,398:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,402:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,404:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,423:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,707:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,721:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,739:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,946:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,966:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:31,984:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,033:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,053:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,073:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,571:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,591:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,609:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,954:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,974:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:32,992:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:33,176:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:33,193:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:33,210:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:33,238:INFO:Calculating mean and std
2024-08-20 21:22:33,241:INFO:Creating metrics dataframe
2024-08-20 21:22:33,248:INFO:Uploading results into container
2024-08-20 21:22:33,249:INFO:Uploading model into container now
2024-08-20 21:22:33,252:INFO:_master_model_container: 1
2024-08-20 21:22:33,252:INFO:_display_container: 2
2024-08-20 21:22:33,253:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-08-20 21:22:33,254:INFO:create_model() successfully completed......................................
2024-08-20 21:22:33,537:INFO:SubProcess create_model() end ==================================
2024-08-20 21:22:33,538:INFO:Creating metrics dataframe
2024-08-20 21:22:33,559:INFO:Initializing K Neighbors Classifier
2024-08-20 21:22:33,559:INFO:Total runtime is 0.4541508118311564 minutes
2024-08-20 21:22:33,570:INFO:SubProcess create_model() called ==================================
2024-08-20 21:22:33,571:INFO:Initializing create_model()
2024-08-20 21:22:33,572:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:22:33,572:INFO:Checking exceptions
2024-08-20 21:22:33,572:INFO:Importing libraries
2024-08-20 21:22:33,573:INFO:Copying training dataset
2024-08-20 21:22:33,593:INFO:Defining folds
2024-08-20 21:22:33,595:INFO:Declaring metric variables
2024-08-20 21:22:33,607:INFO:Importing untrained model
2024-08-20 21:22:33,618:INFO:K Neighbors Classifier Imported successfully
2024-08-20 21:22:33,641:INFO:Starting cross validation
2024-08-20 21:22:33,660:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:22:37,355:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,380:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,381:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,407:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,408:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,416:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,437:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,440:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,461:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,474:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,496:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:37,515:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,520:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,549:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,574:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,582:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,607:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,627:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,715:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,737:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:56,757:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,151:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,170:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,188:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,278:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,297:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,315:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,630:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,649:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,666:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:22:57,694:INFO:Calculating mean and std
2024-08-20 21:22:57,698:INFO:Creating metrics dataframe
2024-08-20 21:22:57,704:INFO:Uploading results into container
2024-08-20 21:22:57,706:INFO:Uploading model into container now
2024-08-20 21:22:57,706:INFO:_master_model_container: 2
2024-08-20 21:22:57,708:INFO:_display_container: 2
2024-08-20 21:22:57,709:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 21:22:57,709:INFO:create_model() successfully completed......................................
2024-08-20 21:22:57,986:INFO:SubProcess create_model() end ==================================
2024-08-20 21:22:57,987:INFO:Creating metrics dataframe
2024-08-20 21:22:58,012:INFO:Initializing Naive Bayes
2024-08-20 21:22:58,013:INFO:Total runtime is 0.8617171804110209 minutes
2024-08-20 21:22:58,024:INFO:SubProcess create_model() called ==================================
2024-08-20 21:22:58,025:INFO:Initializing create_model()
2024-08-20 21:22:58,025:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:22:58,025:INFO:Checking exceptions
2024-08-20 21:22:58,025:INFO:Importing libraries
2024-08-20 21:22:58,026:INFO:Copying training dataset
2024-08-20 21:22:58,052:INFO:Defining folds
2024-08-20 21:22:58,052:INFO:Declaring metric variables
2024-08-20 21:22:58,063:INFO:Importing untrained model
2024-08-20 21:22:58,079:INFO:Naive Bayes Imported successfully
2024-08-20 21:22:58,100:INFO:Starting cross validation
2024-08-20 21:22:58,117:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:01,114:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,139:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,141:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,145:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,159:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,162:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,165:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,169:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,170:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,179:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,181:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,186:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,188:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,190:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,197:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,202:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,206:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,213:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,213:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,215:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,219:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,225:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,232:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,232:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,237:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,244:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,250:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,254:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,262:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,271:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:01,302:INFO:Calculating mean and std
2024-08-20 21:23:01,306:INFO:Creating metrics dataframe
2024-08-20 21:23:01,312:INFO:Uploading results into container
2024-08-20 21:23:01,314:INFO:Uploading model into container now
2024-08-20 21:23:01,315:INFO:_master_model_container: 3
2024-08-20 21:23:01,315:INFO:_display_container: 2
2024-08-20 21:23:01,317:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-08-20 21:23:01,317:INFO:create_model() successfully completed......................................
2024-08-20 21:23:01,602:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:01,603:INFO:Creating metrics dataframe
2024-08-20 21:23:01,624:INFO:Initializing Decision Tree Classifier
2024-08-20 21:23:01,625:INFO:Total runtime is 0.9219171921412149 minutes
2024-08-20 21:23:01,635:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:01,636:INFO:Initializing create_model()
2024-08-20 21:23:01,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:01,637:INFO:Checking exceptions
2024-08-20 21:23:01,637:INFO:Importing libraries
2024-08-20 21:23:01,639:INFO:Copying training dataset
2024-08-20 21:23:01,660:INFO:Defining folds
2024-08-20 21:23:01,660:INFO:Declaring metric variables
2024-08-20 21:23:01,671:INFO:Importing untrained model
2024-08-20 21:23:01,683:INFO:Decision Tree Classifier Imported successfully
2024-08-20 21:23:01,706:INFO:Starting cross validation
2024-08-20 21:23:01,722:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:04,104:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,107:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,131:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,141:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,142:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,146:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,154:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,160:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,167:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,170:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,173:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,178:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,179:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,184:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,191:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,191:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,196:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,206:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,210:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,213:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,224:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,233:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,234:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,251:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,252:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,262:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,264:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,278:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:04,302:INFO:Calculating mean and std
2024-08-20 21:23:04,304:INFO:Creating metrics dataframe
2024-08-20 21:23:04,308:INFO:Uploading results into container
2024-08-20 21:23:04,310:INFO:Uploading model into container now
2024-08-20 21:23:04,311:INFO:_master_model_container: 4
2024-08-20 21:23:04,311:INFO:_display_container: 2
2024-08-20 21:23:04,312:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-08-20 21:23:04,312:INFO:create_model() successfully completed......................................
2024-08-20 21:23:04,520:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:04,520:INFO:Creating metrics dataframe
2024-08-20 21:23:04,539:INFO:Initializing SVM - Linear Kernel
2024-08-20 21:23:04,540:INFO:Total runtime is 0.9704946398735046 minutes
2024-08-20 21:23:04,549:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:04,549:INFO:Initializing create_model()
2024-08-20 21:23:04,550:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:04,550:INFO:Checking exceptions
2024-08-20 21:23:04,550:INFO:Importing libraries
2024-08-20 21:23:04,550:INFO:Copying training dataset
2024-08-20 21:23:04,570:INFO:Defining folds
2024-08-20 21:23:04,570:INFO:Declaring metric variables
2024-08-20 21:23:04,580:INFO:Importing untrained model
2024-08-20 21:23:04,590:INFO:SVM - Linear Kernel Imported successfully
2024-08-20 21:23:04,606:INFO:Starting cross validation
2024-08-20 21:23:04,619:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:06,968:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,971:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,983:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,984:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,986:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,988:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,997:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,997:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:06,998:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,000:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,001:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,012:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,014:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,017:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,020:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,031:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,032:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,033:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,038:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,038:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,046:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,053:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,071:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,072:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,073:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,089:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,090:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,092:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,107:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:07,134:INFO:Calculating mean and std
2024-08-20 21:23:07,139:INFO:Creating metrics dataframe
2024-08-20 21:23:07,143:INFO:Uploading results into container
2024-08-20 21:23:07,144:INFO:Uploading model into container now
2024-08-20 21:23:07,146:INFO:_master_model_container: 5
2024-08-20 21:23:07,146:INFO:_display_container: 2
2024-08-20 21:23:07,149:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-08-20 21:23:07,149:INFO:create_model() successfully completed......................................
2024-08-20 21:23:07,358:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:07,358:INFO:Creating metrics dataframe
2024-08-20 21:23:07,379:INFO:Initializing Ridge Classifier
2024-08-20 21:23:07,379:INFO:Total runtime is 1.017811095714569 minutes
2024-08-20 21:23:07,388:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:07,388:INFO:Initializing create_model()
2024-08-20 21:23:07,389:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:07,389:INFO:Checking exceptions
2024-08-20 21:23:07,389:INFO:Importing libraries
2024-08-20 21:23:07,389:INFO:Copying training dataset
2024-08-20 21:23:07,408:INFO:Defining folds
2024-08-20 21:23:07,408:INFO:Declaring metric variables
2024-08-20 21:23:07,418:INFO:Importing untrained model
2024-08-20 21:23:07,426:INFO:Ridge Classifier Imported successfully
2024-08-20 21:23:07,442:INFO:Starting cross validation
2024-08-20 21:23:07,454:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:09,662:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,685:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,688:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,691:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,696:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,702:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,704:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,709:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,721:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,722:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,734:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,736:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,741:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,742:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,746:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,750:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,751:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,757:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,762:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,767:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,773:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,774:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,780:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,783:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,790:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,797:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,807:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,813:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,826:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:09,846:INFO:Calculating mean and std
2024-08-20 21:23:09,848:INFO:Creating metrics dataframe
2024-08-20 21:23:09,852:INFO:Uploading results into container
2024-08-20 21:23:09,852:INFO:Uploading model into container now
2024-08-20 21:23:09,853:INFO:_master_model_container: 6
2024-08-20 21:23:09,853:INFO:_display_container: 2
2024-08-20 21:23:09,855:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-08-20 21:23:09,855:INFO:create_model() successfully completed......................................
2024-08-20 21:23:10,057:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:10,057:INFO:Creating metrics dataframe
2024-08-20 21:23:10,073:INFO:Initializing Random Forest Classifier
2024-08-20 21:23:10,074:INFO:Total runtime is 1.0627250393231709 minutes
2024-08-20 21:23:10,081:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:10,081:INFO:Initializing create_model()
2024-08-20 21:23:10,081:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:10,081:INFO:Checking exceptions
2024-08-20 21:23:10,082:INFO:Importing libraries
2024-08-20 21:23:10,082:INFO:Copying training dataset
2024-08-20 21:23:10,098:INFO:Defining folds
2024-08-20 21:23:10,098:INFO:Declaring metric variables
2024-08-20 21:23:10,106:INFO:Importing untrained model
2024-08-20 21:23:10,114:INFO:Random Forest Classifier Imported successfully
2024-08-20 21:23:10,132:INFO:Starting cross validation
2024-08-20 21:23:10,144:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:13,636:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,637:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,663:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,663:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,666:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,682:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,682:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,686:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,796:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,796:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,816:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,817:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,837:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,839:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,903:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,905:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,921:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,921:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,940:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,973:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,990:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:13,999:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,079:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,085:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,093:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,096:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,104:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,105:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:14,121:INFO:Calculating mean and std
2024-08-20 21:23:14,124:INFO:Creating metrics dataframe
2024-08-20 21:23:14,126:INFO:Uploading results into container
2024-08-20 21:23:14,127:INFO:Uploading model into container now
2024-08-20 21:23:14,129:INFO:_master_model_container: 7
2024-08-20 21:23:14,129:INFO:_display_container: 2
2024-08-20 21:23:14,130:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-08-20 21:23:14,130:INFO:create_model() successfully completed......................................
2024-08-20 21:23:14,309:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:14,309:INFO:Creating metrics dataframe
2024-08-20 21:23:14,326:INFO:Initializing Quadratic Discriminant Analysis
2024-08-20 21:23:14,326:INFO:Total runtime is 1.1335904717445373 minutes
2024-08-20 21:23:14,331:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:14,332:INFO:Initializing create_model()
2024-08-20 21:23:14,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:14,332:INFO:Checking exceptions
2024-08-20 21:23:14,332:INFO:Importing libraries
2024-08-20 21:23:14,332:INFO:Copying training dataset
2024-08-20 21:23:14,349:INFO:Defining folds
2024-08-20 21:23:14,350:INFO:Declaring metric variables
2024-08-20 21:23:14,357:INFO:Importing untrained model
2024-08-20 21:23:14,364:INFO:Quadratic Discriminant Analysis Imported successfully
2024-08-20 21:23:14,379:INFO:Starting cross validation
2024-08-20 21:23:14,390:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:16,238:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,239:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,245:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,245:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,250:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,299:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,340:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,343:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,372:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-08-20 21:23:16,691:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,710:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,718:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,722:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,727:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,732:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,734:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,750:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,751:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,756:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,767:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,770:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,770:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,771:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,773:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,788:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,800:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,811:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,818:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,818:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,820:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,830:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,833:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,838:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,848:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,850:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,858:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,866:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,874:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:16,889:INFO:Calculating mean and std
2024-08-20 21:23:16,891:INFO:Creating metrics dataframe
2024-08-20 21:23:16,893:INFO:Uploading results into container
2024-08-20 21:23:16,894:INFO:Uploading model into container now
2024-08-20 21:23:16,895:INFO:_master_model_container: 8
2024-08-20 21:23:16,895:INFO:_display_container: 2
2024-08-20 21:23:16,895:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-08-20 21:23:16,895:INFO:create_model() successfully completed......................................
2024-08-20 21:23:17,097:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:17,098:INFO:Creating metrics dataframe
2024-08-20 21:23:17,114:INFO:Initializing Ada Boost Classifier
2024-08-20 21:23:17,115:INFO:Total runtime is 1.1800720969835916 minutes
2024-08-20 21:23:17,120:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:17,121:INFO:Initializing create_model()
2024-08-20 21:23:17,121:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:17,121:INFO:Checking exceptions
2024-08-20 21:23:17,121:INFO:Importing libraries
2024-08-20 21:23:17,121:INFO:Copying training dataset
2024-08-20 21:23:17,136:INFO:Defining folds
2024-08-20 21:23:17,136:INFO:Declaring metric variables
2024-08-20 21:23:17,144:INFO:Importing untrained model
2024-08-20 21:23:17,150:INFO:Ada Boost Classifier Imported successfully
2024-08-20 21:23:17,162:INFO:Starting cross validation
2024-08-20 21:23:17,170:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:18,985:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:18,985:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:18,986:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:18,987:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:19,002:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:19,002:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:19,003:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:19,040:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:19,044:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:19,060:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-08-20 21:23:20,974:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:20,983:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,005:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,017:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,018:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,022:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,032:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,034:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,039:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,055:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,065:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,067:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,068:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,075:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,077:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,081:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,082:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,083:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,084:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,089:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,093:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,094:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,099:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,100:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,101:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,105:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,109:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,112:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,114:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,120:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:21,145:INFO:Calculating mean and std
2024-08-20 21:23:21,148:INFO:Creating metrics dataframe
2024-08-20 21:23:21,151:INFO:Uploading results into container
2024-08-20 21:23:21,152:INFO:Uploading model into container now
2024-08-20 21:23:21,153:INFO:_master_model_container: 9
2024-08-20 21:23:21,153:INFO:_display_container: 2
2024-08-20 21:23:21,153:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-08-20 21:23:21,153:INFO:create_model() successfully completed......................................
2024-08-20 21:23:21,341:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:21,341:INFO:Creating metrics dataframe
2024-08-20 21:23:21,358:INFO:Initializing Gradient Boosting Classifier
2024-08-20 21:23:21,358:INFO:Total runtime is 1.2507871905962624 minutes
2024-08-20 21:23:21,364:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:21,365:INFO:Initializing create_model()
2024-08-20 21:23:21,365:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:21,365:INFO:Checking exceptions
2024-08-20 21:23:21,365:INFO:Importing libraries
2024-08-20 21:23:21,365:INFO:Copying training dataset
2024-08-20 21:23:21,384:INFO:Defining folds
2024-08-20 21:23:21,384:INFO:Declaring metric variables
2024-08-20 21:23:21,391:INFO:Importing untrained model
2024-08-20 21:23:21,398:INFO:Gradient Boosting Classifier Imported successfully
2024-08-20 21:23:21,411:INFO:Starting cross validation
2024-08-20 21:23:21,421:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:27,382:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,414:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,416:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,435:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,444:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,448:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,466:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,466:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,468:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,469:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,470:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,496:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,497:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,498:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,507:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,508:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,514:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,516:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,534:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,550:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,552:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,558:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,559:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,566:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,574:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,574:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,583:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,590:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,591:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:27,613:INFO:Calculating mean and std
2024-08-20 21:23:27,616:INFO:Creating metrics dataframe
2024-08-20 21:23:27,619:INFO:Uploading results into container
2024-08-20 21:23:27,620:INFO:Uploading model into container now
2024-08-20 21:23:27,621:INFO:_master_model_container: 10
2024-08-20 21:23:27,622:INFO:_display_container: 2
2024-08-20 21:23:27,623:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-08-20 21:23:27,623:INFO:create_model() successfully completed......................................
2024-08-20 21:23:27,834:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:27,835:INFO:Creating metrics dataframe
2024-08-20 21:23:27,860:INFO:Initializing Linear Discriminant Analysis
2024-08-20 21:23:27,860:INFO:Total runtime is 1.359156509240468 minutes
2024-08-20 21:23:27,868:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:27,868:INFO:Initializing create_model()
2024-08-20 21:23:27,869:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:27,869:INFO:Checking exceptions
2024-08-20 21:23:27,869:INFO:Importing libraries
2024-08-20 21:23:27,869:INFO:Copying training dataset
2024-08-20 21:23:27,888:INFO:Defining folds
2024-08-20 21:23:27,888:INFO:Declaring metric variables
2024-08-20 21:23:27,896:INFO:Importing untrained model
2024-08-20 21:23:27,904:INFO:Linear Discriminant Analysis Imported successfully
2024-08-20 21:23:27,921:INFO:Starting cross validation
2024-08-20 21:23:27,934:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:30,309:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,309:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,327:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,337:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,354:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,357:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,366:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,370:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,373:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,383:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,391:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,394:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,394:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,396:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,402:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,404:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,409:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,411:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,411:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,412:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,414:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,422:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,427:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,430:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,432:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,438:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,449:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,459:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,471:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,482:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:30,494:INFO:Calculating mean and std
2024-08-20 21:23:30,497:INFO:Creating metrics dataframe
2024-08-20 21:23:30,500:INFO:Uploading results into container
2024-08-20 21:23:30,501:INFO:Uploading model into container now
2024-08-20 21:23:30,502:INFO:_master_model_container: 11
2024-08-20 21:23:30,502:INFO:_display_container: 2
2024-08-20 21:23:30,502:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-08-20 21:23:30,502:INFO:create_model() successfully completed......................................
2024-08-20 21:23:30,693:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:30,693:INFO:Creating metrics dataframe
2024-08-20 21:23:30,718:INFO:Initializing Extra Trees Classifier
2024-08-20 21:23:30,718:INFO:Total runtime is 1.4067949175834653 minutes
2024-08-20 21:23:30,728:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:30,729:INFO:Initializing create_model()
2024-08-20 21:23:30,729:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:30,729:INFO:Checking exceptions
2024-08-20 21:23:30,729:INFO:Importing libraries
2024-08-20 21:23:30,729:INFO:Copying training dataset
2024-08-20 21:23:30,746:INFO:Defining folds
2024-08-20 21:23:30,747:INFO:Declaring metric variables
2024-08-20 21:23:30,758:INFO:Importing untrained model
2024-08-20 21:23:30,766:INFO:Extra Trees Classifier Imported successfully
2024-08-20 21:23:30,782:INFO:Starting cross validation
2024-08-20 21:23:30,794:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:34,289:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,296:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,309:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,316:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,331:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,333:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,334:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,349:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,356:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,369:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,379:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,397:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,444:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,448:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,450:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,456:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,463:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,464:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,467:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,474:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,480:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,486:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,488:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,493:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,573:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,581:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,590:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,608:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,621:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,630:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:34,645:INFO:Calculating mean and std
2024-08-20 21:23:34,646:INFO:Creating metrics dataframe
2024-08-20 21:23:34,650:INFO:Uploading results into container
2024-08-20 21:23:34,652:INFO:Uploading model into container now
2024-08-20 21:23:34,652:INFO:_master_model_container: 12
2024-08-20 21:23:34,652:INFO:_display_container: 2
2024-08-20 21:23:34,653:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-08-20 21:23:34,653:INFO:create_model() successfully completed......................................
2024-08-20 21:23:34,850:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:34,850:INFO:Creating metrics dataframe
2024-08-20 21:23:34,871:INFO:Initializing Extreme Gradient Boosting
2024-08-20 21:23:34,871:INFO:Total runtime is 1.476013906796773 minutes
2024-08-20 21:23:34,877:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:34,877:INFO:Initializing create_model()
2024-08-20 21:23:34,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:34,877:INFO:Checking exceptions
2024-08-20 21:23:34,878:INFO:Importing libraries
2024-08-20 21:23:34,878:INFO:Copying training dataset
2024-08-20 21:23:34,891:INFO:Defining folds
2024-08-20 21:23:34,893:INFO:Declaring metric variables
2024-08-20 21:23:34,900:INFO:Importing untrained model
2024-08-20 21:23:34,908:INFO:Extreme Gradient Boosting Imported successfully
2024-08-20 21:23:34,922:INFO:Starting cross validation
2024-08-20 21:23:34,932:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:38,056:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,057:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,073:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,085:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,088:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,091:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,100:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,100:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,105:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,109:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,111:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,117:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,122:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,137:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,140:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,144:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,149:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,160:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,166:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,170:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,187:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,189:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,196:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,205:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,207:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,214:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,223:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,404:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,415:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,425:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:38,440:INFO:Calculating mean and std
2024-08-20 21:23:38,443:INFO:Creating metrics dataframe
2024-08-20 21:23:38,447:INFO:Uploading results into container
2024-08-20 21:23:38,448:INFO:Uploading model into container now
2024-08-20 21:23:38,449:INFO:_master_model_container: 13
2024-08-20 21:23:38,449:INFO:_display_container: 2
2024-08-20 21:23:38,451:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-08-20 21:23:38,452:INFO:create_model() successfully completed......................................
2024-08-20 21:23:38,644:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:38,644:INFO:Creating metrics dataframe
2024-08-20 21:23:38,666:INFO:Initializing Light Gradient Boosting Machine
2024-08-20 21:23:38,667:INFO:Total runtime is 1.5392838199933367 minutes
2024-08-20 21:23:38,676:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:38,677:INFO:Initializing create_model()
2024-08-20 21:23:38,678:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:38,678:INFO:Checking exceptions
2024-08-20 21:23:38,678:INFO:Importing libraries
2024-08-20 21:23:38,678:INFO:Copying training dataset
2024-08-20 21:23:38,696:INFO:Defining folds
2024-08-20 21:23:38,696:INFO:Declaring metric variables
2024-08-20 21:23:38,705:INFO:Importing untrained model
2024-08-20 21:23:38,712:INFO:Light Gradient Boosting Machine Imported successfully
2024-08-20 21:23:38,726:INFO:Starting cross validation
2024-08-20 21:23:38,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:23:46,246:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:46,263:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:46,281:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,025:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,041:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,060:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,112:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,131:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,151:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,157:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,176:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,181:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,196:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,201:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,204:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,217:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,223:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,233:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,240:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,248:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,263:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,312:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,328:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,344:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,380:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,394:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,410:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,440:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,455:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,470:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:23:47,497:INFO:Calculating mean and std
2024-08-20 21:23:47,500:INFO:Creating metrics dataframe
2024-08-20 21:23:47,506:INFO:Uploading results into container
2024-08-20 21:23:47,507:INFO:Uploading model into container now
2024-08-20 21:23:47,508:INFO:_master_model_container: 14
2024-08-20 21:23:47,509:INFO:_display_container: 2
2024-08-20 21:23:47,510:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-08-20 21:23:47,511:INFO:create_model() successfully completed......................................
2024-08-20 21:23:47,703:INFO:SubProcess create_model() end ==================================
2024-08-20 21:23:47,704:INFO:Creating metrics dataframe
2024-08-20 21:23:47,726:INFO:Initializing CatBoost Classifier
2024-08-20 21:23:47,726:INFO:Total runtime is 1.6902678092320758 minutes
2024-08-20 21:23:47,733:INFO:SubProcess create_model() called ==================================
2024-08-20 21:23:47,734:INFO:Initializing create_model()
2024-08-20 21:23:47,734:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:23:47,734:INFO:Checking exceptions
2024-08-20 21:23:47,734:INFO:Importing libraries
2024-08-20 21:23:47,734:INFO:Copying training dataset
2024-08-20 21:23:47,749:INFO:Defining folds
2024-08-20 21:23:47,749:INFO:Declaring metric variables
2024-08-20 21:23:47,755:INFO:Importing untrained model
2024-08-20 21:23:47,763:INFO:CatBoost Classifier Imported successfully
2024-08-20 21:23:47,779:INFO:Starting cross validation
2024-08-20 21:23:47,791:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:24:05,254:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,255:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,274:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,288:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,294:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,304:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,305:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,308:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,316:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,322:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,331:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,351:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,388:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,402:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,405:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,413:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,421:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,421:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,429:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,437:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,447:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,577:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,589:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,603:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,704:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,718:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,731:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,740:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,750:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,759:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:05,774:INFO:Calculating mean and std
2024-08-20 21:24:05,776:INFO:Creating metrics dataframe
2024-08-20 21:24:05,780:INFO:Uploading results into container
2024-08-20 21:24:05,781:INFO:Uploading model into container now
2024-08-20 21:24:05,782:INFO:_master_model_container: 15
2024-08-20 21:24:05,782:INFO:_display_container: 2
2024-08-20 21:24:05,782:INFO:<catboost.core.CatBoostClassifier object at 0x000002C4782958D0>
2024-08-20 21:24:05,782:INFO:create_model() successfully completed......................................
2024-08-20 21:24:05,979:INFO:SubProcess create_model() end ==================================
2024-08-20 21:24:05,979:INFO:Creating metrics dataframe
2024-08-20 21:24:06,002:INFO:Initializing Dummy Classifier
2024-08-20 21:24:06,003:INFO:Total runtime is 1.9948798100153602 minutes
2024-08-20 21:24:06,011:INFO:SubProcess create_model() called ==================================
2024-08-20 21:24:06,012:INFO:Initializing create_model()
2024-08-20 21:24:06,012:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C478A50E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:24:06,012:INFO:Checking exceptions
2024-08-20 21:24:06,012:INFO:Importing libraries
2024-08-20 21:24:06,012:INFO:Copying training dataset
2024-08-20 21:24:06,030:INFO:Defining folds
2024-08-20 21:24:06,030:INFO:Declaring metric variables
2024-08-20 21:24:06,038:INFO:Importing untrained model
2024-08-20 21:24:06,046:INFO:Dummy Classifier Imported successfully
2024-08-20 21:24:06,062:INFO:Starting cross validation
2024-08-20 21:24:06,076:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-08-20 21:24:08,152:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,180:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,182:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,191:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,199:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,200:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,208:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,214:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,217:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,224:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,226:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,230:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,236:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,240:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,240:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,246:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,249:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,253:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,261:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,263:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,265:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,271:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,275:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,278:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,282:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,287:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,293:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,295:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,303:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,303:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,310:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,312:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,313:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,318:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,320:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,328:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,349:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,361:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,367:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-08-20 21:24:08,372:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'poisonous') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-08-20 21:24:08,396:INFO:Calculating mean and std
2024-08-20 21:24:08,398:INFO:Creating metrics dataframe
2024-08-20 21:24:08,402:INFO:Uploading results into container
2024-08-20 21:24:08,403:INFO:Uploading model into container now
2024-08-20 21:24:08,404:INFO:_master_model_container: 16
2024-08-20 21:24:08,404:INFO:_display_container: 2
2024-08-20 21:24:08,404:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-08-20 21:24:08,404:INFO:create_model() successfully completed......................................
2024-08-20 21:24:08,618:INFO:SubProcess create_model() end ==================================
2024-08-20 21:24:08,618:INFO:Creating metrics dataframe
2024-08-20 21:24:08,667:INFO:Initializing create_model()
2024-08-20 21:24:08,667:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:24:08,668:INFO:Checking exceptions
2024-08-20 21:24:08,671:INFO:Importing libraries
2024-08-20 21:24:08,671:INFO:Copying training dataset
2024-08-20 21:24:08,687:INFO:Defining folds
2024-08-20 21:24:08,687:INFO:Declaring metric variables
2024-08-20 21:24:08,688:INFO:Importing untrained model
2024-08-20 21:24:08,688:INFO:Declaring custom model
2024-08-20 21:24:08,689:INFO:K Neighbors Classifier Imported successfully
2024-08-20 21:24:08,697:INFO:Cross validation set to False
2024-08-20 21:24:08,698:INFO:Fitting Model
2024-08-20 21:24:09,472:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 21:24:09,473:INFO:create_model() successfully completed......................................
2024-08-20 21:24:09,728:INFO:_master_model_container: 16
2024-08-20 21:24:09,728:INFO:_display_container: 2
2024-08-20 21:24:09,729:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 21:24:09,729:INFO:compare_models() successfully completed......................................
2024-08-20 21:24:09,744:INFO:Initializing plot_model()
2024-08-20 21:24:09,744:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-08-20 21:24:09,744:INFO:Checking exceptions
2024-08-20 21:24:09,755:INFO:Preloading libraries
2024-08-20 21:24:09,756:INFO:Copying training dataset
2024-08-20 21:24:09,756:INFO:Plot type: auc
2024-08-20 21:24:10,187:INFO:Fitting Model
2024-08-20 21:24:10,189:INFO:Scoring test/hold-out set
2024-08-20 21:24:11,458:INFO:Visual Rendered Successfully
2024-08-20 21:24:11,660:INFO:plot_model() successfully completed......................................
2024-08-20 21:24:11,662:INFO:Initializing evaluate_model()
2024-08-20 21:24:11,663:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-08-20 21:24:11,689:INFO:Initializing plot_model()
2024-08-20 21:24:11,689:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-08-20 21:24:11,689:INFO:Checking exceptions
2024-08-20 21:24:11,694:INFO:Preloading libraries
2024-08-20 21:24:11,697:INFO:Copying training dataset
2024-08-20 21:24:11,697:INFO:Plot type: pipeline
2024-08-20 21:24:12,129:INFO:Visual Rendered Successfully
2024-08-20 21:24:12,334:INFO:plot_model() successfully completed......................................
2024-08-20 21:24:12,352:INFO:Initializing finalize_model()
2024-08-20 21:24:12,352:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-08-20 21:24:12,353:INFO:Finalizing KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-08-20 21:24:12,362:INFO:Initializing create_model()
2024-08-20 21:24:12,362:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-08-20 21:24:12,362:INFO:Checking exceptions
2024-08-20 21:24:12,365:INFO:Importing libraries
2024-08-20 21:24:12,365:INFO:Copying training dataset
2024-08-20 21:24:12,366:INFO:Defining folds
2024-08-20 21:24:12,366:INFO:Declaring metric variables
2024-08-20 21:24:12,366:INFO:Importing untrained model
2024-08-20 21:24:12,366:INFO:Declaring custom model
2024-08-20 21:24:12,367:INFO:K Neighbors Classifier Imported successfully
2024-08-20 21:24:12,374:INFO:Cross validation set to False
2024-08-20 21:24:12,376:INFO:Fitting Model
2024-08-20 21:24:13,478:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:24:13,479:INFO:create_model() successfully completed......................................
2024-08-20 21:24:13,678:INFO:_master_model_container: 16
2024-08-20 21:24:13,678:INFO:_display_container: 2
2024-08-20 21:24:13,839:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:24:13,839:INFO:finalize_model() successfully completed......................................
2024-08-20 21:24:14,201:INFO:Initializing predict_model()
2024-08-20 21:24:14,201:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C472EDB390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C47849BC40>)
2024-08-20 21:24:14,201:INFO:Checking exceptions
2024-08-20 21:24:14,201:INFO:Preloading libraries
2024-08-20 21:24:14,207:INFO:Set up data.
2024-08-20 21:24:14,260:INFO:Set up index.
2024-08-20 21:24:17,587:INFO:Initializing save_model()
2024-08-20 21:24:17,587:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), model_name=final_mushroom_pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-08-20 21:24:17,587:INFO:Adding model into prep_pipe
2024-08-20 21:24:17,587:WARNING:Only Model saved as it was a pipeline.
2024-08-20 21:24:17,652:INFO:final_mushroom_pipeline.pkl saved in current working directory
2024-08-20 21:24:17,795:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:24:17,796:INFO:save_model() successfully completed......................................
2024-08-20 21:24:18,185:INFO:Initializing load_model()
2024-08-20 21:24:18,185:INFO:load_model(model_name=final_mushroom_pipeline, platform=None, authentication=None, verbose=True)
2024-08-20 21:35:47,942:INFO:Initializing save_model()
2024-08-20 21:35:47,942:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False), model_name=mushroom_classification_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-08-20 21:35:47,943:INFO:Adding model into prep_pipe
2024-08-20 21:35:47,943:WARNING:Only Model saved as it was a pipeline.
2024-08-20 21:35:47,999:INFO:mushroom_classification_model.pkl saved in current working directory
2024-08-20 21:35:48,091:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=5, p=2,
                                      weights='uniform'))],
         verbose=False)
2024-08-20 21:35:48,091:INFO:save_model() successfully completed......................................
2024-08-20 21:36:33,390:INFO:Initializing load_model()
2024-08-20 21:36:33,390:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 21:36:39,208:INFO:Initializing load_model()
2024-08-20 21:36:39,208:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 21:42:02,517:INFO:Initializing load_model()
2024-08-20 21:42:02,517:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 22:10:16,505:INFO:Initializing load_model()
2024-08-20 22:10:16,506:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 22:22:36,596:INFO:Initializing load_model()
2024-08-20 22:22:36,597:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 22:23:56,423:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:23:56,423:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:23:56,423:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:23:56,425:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:01,032:INFO:Initializing load_model()
2024-08-20 22:24:01,032:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 22:24:06,933:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:06,933:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:06,933:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:06,933:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:12,343:INFO:Initializing load_model()
2024-08-20 22:24:12,344:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 22:24:20,380:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:20,380:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:20,380:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:20,380:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 22:24:27,238:INFO:Initializing load_model()
2024-08-20 22:24:27,239:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:01:55,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:01:55,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:01:55,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:01:55,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:01:59,581:INFO:Initializing load_model()
2024-08-20 23:01:59,581:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:02:09,241:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:02:09,242:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:02:09,242:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:02:09,242:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:02:17,377:INFO:Initializing load_model()
2024-08-20 23:02:17,377:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:03:29,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:03:29,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:03:29,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:03:29,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:03:33,296:INFO:Initializing load_model()
2024-08-20 23:03:33,296:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:11:53,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:11:53,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:11:53,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:11:53,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:11:58,465:INFO:Initializing load_model()
2024-08-20 23:11:58,465:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:12:03,729:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:12:03,729:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:12:03,729:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:12:03,729:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:12:07,936:INFO:Initializing load_model()
2024-08-20 23:12:07,936:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:13:14,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:14,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:14,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:14,300:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:18,669:INFO:Initializing load_model()
2024-08-20 23:13:18,670:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:13:25,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:25,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:25,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:25,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:13:30,587:INFO:Initializing load_model()
2024-08-20 23:13:30,587:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:17:08,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:08,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:08,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:08,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:14,676:INFO:Initializing load_model()
2024-08-20 23:17:14,677:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:17:23,822:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:23,822:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:23,823:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:23,823:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:34,170:INFO:Initializing load_model()
2024-08-20 23:17:34,171:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:17:47,703:INFO:Initializing predict_model()
2024-08-20 23:17:47,703:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028BBF7BB7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000028BC12F9EE0>)
2024-08-20 23:17:47,704:INFO:Checking exceptions
2024-08-20 23:17:47,704:INFO:Preloading libraries
2024-08-20 23:17:47,704:INFO:Set up data.
2024-08-20 23:17:47,726:INFO:Set up index.
2024-08-20 23:17:48,118:INFO:Initializing predict_model()
2024-08-20 23:17:48,118:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028BC132A690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000028BC12F9F80>)
2024-08-20 23:17:48,118:INFO:Checking exceptions
2024-08-20 23:17:48,118:INFO:Preloading libraries
2024-08-20 23:17:48,119:INFO:Set up data.
2024-08-20 23:17:48,133:INFO:Set up index.
2024-08-20 23:17:48,341:INFO:Initializing predict_model()
2024-08-20 23:17:48,360:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028BC140E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000028BC12FA5C0>)
2024-08-20 23:17:48,366:INFO:Checking exceptions
2024-08-20 23:17:48,373:INFO:Preloading libraries
2024-08-20 23:17:48,388:INFO:Set up data.
2024-08-20 23:17:48,447:INFO:Set up index.
2024-08-20 23:17:48,568:INFO:Initializing predict_model()
2024-08-20 23:17:48,569:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028BC143C110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000028BC142D4E0>)
2024-08-20 23:17:48,569:INFO:Checking exceptions
2024-08-20 23:17:48,569:INFO:Preloading libraries
2024-08-20 23:17:48,570:INFO:Set up data.
2024-08-20 23:17:48,589:INFO:Set up index.
2024-08-20 23:17:56,879:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:56,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:56,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:17:56,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:18:04,190:INFO:Initializing load_model()
2024-08-20 23:18:04,191:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:18:08,058:INFO:Initializing predict_model()
2024-08-20 23:18:08,358:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000240791430D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002407917DBC0>)
2024-08-20 23:18:08,456:INFO:Checking exceptions
2024-08-20 23:18:08,485:INFO:Preloading libraries
2024-08-20 23:18:08,517:INFO:Set up data.
2024-08-20 23:18:08,550:INFO:Initializing predict_model()
2024-08-20 23:18:08,585:INFO:Initializing predict_model()
2024-08-20 23:18:08,601:INFO:Set up index.
2024-08-20 23:18:08,602:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000240791409D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002407917E5C0>)
2024-08-20 23:18:08,616:INFO:Initializing predict_model()
2024-08-20 23:18:08,616:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024079140DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002407917ECA0>)
2024-08-20 23:18:08,618:INFO:Checking exceptions
2024-08-20 23:18:08,621:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024079142350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002407917F2E0>)
2024-08-20 23:18:08,660:INFO:Checking exceptions
2024-08-20 23:18:08,703:INFO:Preloading libraries
2024-08-20 23:18:08,704:INFO:Checking exceptions
2024-08-20 23:18:08,727:INFO:Preloading libraries
2024-08-20 23:18:08,736:INFO:Set up data.
2024-08-20 23:18:08,736:INFO:Preloading libraries
2024-08-20 23:18:08,741:INFO:Set up data.
2024-08-20 23:18:08,764:INFO:Set up index.
2024-08-20 23:18:08,776:INFO:Set up data.
2024-08-20 23:18:08,800:INFO:Set up index.
2024-08-20 23:18:08,820:INFO:Set up index.
2024-08-20 23:20:08,734:INFO:Initializing predict_model()
2024-08-20 23:20:08,734:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002407A2C2590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000240791B3E20>)
2024-08-20 23:20:08,734:INFO:Checking exceptions
2024-08-20 23:20:08,734:INFO:Preloading libraries
2024-08-20 23:20:08,735:INFO:Set up data.
2024-08-20 23:20:08,746:INFO:Set up index.
2024-08-20 23:21:30,205:INFO:Initializing load_model()
2024-08-20 23:21:30,206:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:21:46,657:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:21:46,657:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:21:46,657:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:21:46,657:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:21:55,683:INFO:Initializing load_model()
2024-08-20 23:21:55,684:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:22:05,231:INFO:Initializing predict_model()
2024-08-20 23:22:05,231:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001CCEACE31D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CCEAD2D120>)
2024-08-20 23:22:05,231:INFO:Checking exceptions
2024-08-20 23:22:05,232:INFO:Preloading libraries
2024-08-20 23:22:05,233:INFO:Set up data.
2024-08-20 23:22:05,248:INFO:Set up index.
2024-08-20 23:22:19,001:INFO:Initializing predict_model()
2024-08-20 23:22:19,003:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001CCEB7C0E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CCEAE651C0>)
2024-08-20 23:22:19,003:INFO:Checking exceptions
2024-08-20 23:22:19,003:INFO:Preloading libraries
2024-08-20 23:22:19,003:INFO:Set up data.
2024-08-20 23:22:19,017:INFO:Set up index.
2024-08-20 23:23:13,884:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:23:13,884:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:23:13,884:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:23:13,884:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:23:17,474:INFO:Initializing load_model()
2024-08-20 23:23:17,475:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:23:40,773:INFO:Initializing load_model()
2024-08-20 23:23:40,773:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:23:48,188:INFO:Initializing load_model()
2024-08-20 23:23:48,189:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:24:02,197:INFO:Initializing predict_model()
2024-08-20 23:24:02,197:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EC37981550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EC394DF100>)
2024-08-20 23:24:02,197:INFO:Checking exceptions
2024-08-20 23:24:02,197:INFO:Preloading libraries
2024-08-20 23:24:02,197:INFO:Set up data.
2024-08-20 23:24:02,214:INFO:Set up index.
2024-08-20 23:24:56,254:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:24:56,254:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:24:56,254:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:24:56,254:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:24:59,716:INFO:Initializing load_model()
2024-08-20 23:24:59,716:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:25:35,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:35,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:35,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:35,288:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:39,476:INFO:Initializing load_model()
2024-08-20 23:25:39,476:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:25:45,041:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:45,041:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:45,042:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:45,042:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:25:50,930:INFO:Initializing load_model()
2024-08-20 23:25:50,930:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:25:59,451:INFO:Initializing predict_model()
2024-08-20 23:25:59,451:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A6DD5C990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022A6F89E340>)
2024-08-20 23:25:59,451:INFO:Checking exceptions
2024-08-20 23:25:59,451:INFO:Preloading libraries
2024-08-20 23:25:59,451:INFO:Set up data.
2024-08-20 23:25:59,463:INFO:Set up index.
2024-08-20 23:26:05,628:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:26:05,628:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:26:05,628:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:26:05,629:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:26:09,476:INFO:Initializing load_model()
2024-08-20 23:26:09,476:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:29:39,274:INFO:Initializing load_model()
2024-08-20 23:29:39,275:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:32:27,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:27,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:27,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:27,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:33,056:INFO:Initializing load_model()
2024-08-20 23:32:33,057:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:32:43,186:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:43,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:43,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:43,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:32:49,039:INFO:Initializing load_model()
2024-08-20 23:32:49,040:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:32:54,283:INFO:Initializing predict_model()
2024-08-20 23:32:54,283:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F594A3690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024F5AFEE520>)
2024-08-20 23:32:54,283:INFO:Checking exceptions
2024-08-20 23:32:54,283:INFO:Preloading libraries
2024-08-20 23:32:54,284:INFO:Set up data.
2024-08-20 23:32:54,298:INFO:Set up index.
2024-08-20 23:33:29,345:INFO:Initializing predict_model()
2024-08-20 23:33:29,345:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024F5AF0F250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024F5B1189A0>)
2024-08-20 23:33:29,345:INFO:Checking exceptions
2024-08-20 23:33:29,345:INFO:Preloading libraries
2024-08-20 23:33:29,346:INFO:Set up data.
2024-08-20 23:33:29,356:INFO:Set up index.
2024-08-20 23:44:02,004:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:02,004:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:02,004:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:02,004:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:05,385:INFO:Initializing load_model()
2024-08-20 23:44:05,385:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:44:10,542:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:10,542:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:10,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:10,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:44:15,021:INFO:Initializing load_model()
2024-08-20 23:44:15,022:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:47:36,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:36,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:36,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:36,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:39,740:INFO:Initializing load_model()
2024-08-20 23:47:39,740:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-20 23:47:45,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:45,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:45,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:45,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-20 23:47:50,289:INFO:Initializing load_model()
2024-08-20 23:47:50,289:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:29:20,058:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:20,058:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:20,058:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:20,058:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:24,095:INFO:Initializing load_model()
2024-08-21 00:29:24,096:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:29:29,465:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:29,466:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:29,466:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:29,466:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:29:32,885:INFO:Initializing load_model()
2024-08-21 00:29:32,885:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:32:43,739:INFO:Initializing load_model()
2024-08-21 00:32:43,739:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:32:54,223:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:32:54,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:32:54,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:32:54,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:33:01,437:INFO:Initializing load_model()
2024-08-21 00:33:01,438:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:34:03,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:03,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:03,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:03,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:06,616:INFO:Initializing load_model()
2024-08-21 00:34:06,617:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:34:11,642:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:11,642:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:11,642:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:11,642:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:34:16,423:INFO:Initializing load_model()
2024-08-21 00:34:16,424:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:38:42,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:42,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:42,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:42,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:45,048:INFO:Initializing load_model()
2024-08-21 00:38:45,049:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:38:52,471:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:52,472:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:52,473:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:52,473:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 00:38:59,251:INFO:Initializing load_model()
2024-08-21 00:38:59,251:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 00:41:40,896:INFO:Initializing predict_model()
2024-08-21 00:41:40,896:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD517E6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6C24220>)
2024-08-21 00:41:40,897:INFO:Checking exceptions
2024-08-21 00:41:40,897:INFO:Preloading libraries
2024-08-21 00:41:40,897:INFO:Set up data.
2024-08-21 00:41:40,905:INFO:Set up index.
2024-08-21 00:41:44,009:INFO:Initializing predict_model()
2024-08-21 00:41:44,011:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD6ADF1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD68496C0>)
2024-08-21 00:41:44,011:INFO:Checking exceptions
2024-08-21 00:41:44,011:INFO:Preloading libraries
2024-08-21 00:41:44,011:INFO:Set up data.
2024-08-21 00:41:44,018:INFO:Set up index.
2024-08-21 00:45:22,130:INFO:Initializing predict_model()
2024-08-21 00:45:22,131:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD505D810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D15440>)
2024-08-21 00:45:22,131:INFO:Checking exceptions
2024-08-21 00:45:22,131:INFO:Preloading libraries
2024-08-21 00:45:22,131:INFO:Set up data.
2024-08-21 00:45:22,138:INFO:Set up index.
2024-08-21 00:45:29,334:INFO:Initializing predict_model()
2024-08-21 00:45:29,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD608B890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D17420>)
2024-08-21 00:45:29,334:INFO:Checking exceptions
2024-08-21 00:45:29,334:INFO:Preloading libraries
2024-08-21 00:45:29,334:INFO:Set up data.
2024-08-21 00:45:29,341:INFO:Set up index.
2024-08-21 00:45:30,349:INFO:Initializing predict_model()
2024-08-21 00:45:30,349:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD382F5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D171A0>)
2024-08-21 00:45:30,349:INFO:Checking exceptions
2024-08-21 00:45:30,349:INFO:Preloading libraries
2024-08-21 00:45:30,349:INFO:Set up data.
2024-08-21 00:45:30,357:INFO:Set up index.
2024-08-21 00:45:31,001:INFO:Initializing predict_model()
2024-08-21 00:45:31,001:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD6081110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D14720>)
2024-08-21 00:45:31,001:INFO:Checking exceptions
2024-08-21 00:45:31,001:INFO:Preloading libraries
2024-08-21 00:45:31,001:INFO:Set up data.
2024-08-21 00:45:31,007:INFO:Set up index.
2024-08-21 00:45:35,556:INFO:Initializing predict_model()
2024-08-21 00:45:35,556:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD517E0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D15BC0>)
2024-08-21 00:45:35,556:INFO:Checking exceptions
2024-08-21 00:45:35,556:INFO:Preloading libraries
2024-08-21 00:45:35,557:INFO:Set up data.
2024-08-21 00:45:35,567:INFO:Set up index.
2024-08-21 00:46:21,808:INFO:Initializing predict_model()
2024-08-21 00:46:21,808:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD6BA1090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D15760>)
2024-08-21 00:46:21,808:INFO:Checking exceptions
2024-08-21 00:46:21,808:INFO:Preloading libraries
2024-08-21 00:46:21,809:INFO:Set up data.
2024-08-21 00:46:21,817:INFO:Set up index.
2024-08-21 00:48:13,197:INFO:Initializing predict_model()
2024-08-21 00:48:13,197:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD6AEC090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D17420>)
2024-08-21 00:48:13,197:INFO:Checking exceptions
2024-08-21 00:48:13,197:INFO:Preloading libraries
2024-08-21 00:48:13,197:INFO:Set up data.
2024-08-21 00:48:13,204:INFO:Set up index.
2024-08-21 00:48:16,589:INFO:Initializing predict_model()
2024-08-21 00:48:16,589:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DBD6ADF290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DBD6D17420>)
2024-08-21 00:48:16,589:INFO:Checking exceptions
2024-08-21 00:48:16,589:INFO:Preloading libraries
2024-08-21 00:48:16,589:INFO:Set up data.
2024-08-21 00:48:16,598:INFO:Set up index.
2024-08-21 01:02:26,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:26,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:26,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:26,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:29,564:INFO:Initializing load_model()
2024-08-21 01:02:29,566:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:02:34,294:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:34,295:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:34,295:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:34,295:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:02:37,587:INFO:Initializing load_model()
2024-08-21 01:02:37,587:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:06:30,520:INFO:Initializing predict_model()
2024-08-21 01:06:30,520:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002229094B8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022291631260>)
2024-08-21 01:06:30,520:INFO:Checking exceptions
2024-08-21 01:06:30,521:INFO:Preloading libraries
2024-08-21 01:06:30,521:INFO:Set up data.
2024-08-21 01:06:30,532:INFO:Set up index.
2024-08-21 01:07:14,034:INFO:Initializing predict_model()
2024-08-21 01:07:14,034:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000222914FFA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000222917387C0>)
2024-08-21 01:07:14,034:INFO:Checking exceptions
2024-08-21 01:07:14,035:INFO:Preloading libraries
2024-08-21 01:07:14,035:INFO:Set up data.
2024-08-21 01:07:14,043:INFO:Set up index.
2024-08-21 01:08:29,652:INFO:Initializing load_model()
2024-08-21 01:08:29,652:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:13:05,067:INFO:Initializing load_model()
2024-08-21 01:13:05,067:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:13:48,034:INFO:Initializing load_model()
2024-08-21 01:13:48,034:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:17:50,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:17:50,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:17:50,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:17:50,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:17:55,323:INFO:Initializing load_model()
2024-08-21 01:17:55,324:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:19:04,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:04,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:04,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:04,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:08,182:INFO:Initializing load_model()
2024-08-21 01:19:08,182:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:19:12,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:12,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:12,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:12,782:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:19:20,406:INFO:Initializing load_model()
2024-08-21 01:19:20,406:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:20:33,231:INFO:Initializing predict_model()
2024-08-21 01:20:33,231:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B593EE17D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B595A6CE00>)
2024-08-21 01:20:33,232:INFO:Checking exceptions
2024-08-21 01:20:33,232:INFO:Preloading libraries
2024-08-21 01:20:33,233:INFO:Set up data.
2024-08-21 01:20:33,255:INFO:Set up index.
2024-08-21 01:21:05,357:INFO:Initializing predict_model()
2024-08-21 01:21:05,357:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B59594BC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B595B685E0>)
2024-08-21 01:21:05,358:INFO:Checking exceptions
2024-08-21 01:21:05,358:INFO:Preloading libraries
2024-08-21 01:21:05,358:INFO:Set up data.
2024-08-21 01:21:05,392:INFO:Set up index.
2024-08-21 01:24:36,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:36,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:36,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:36,412:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:39,802:INFO:Initializing load_model()
2024-08-21 01:24:39,802:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:24:44,510:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:44,510:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:44,510:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:44,510:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:24:47,903:INFO:Initializing load_model()
2024-08-21 01:24:47,903:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:26:40,788:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:40,788:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:40,788:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:40,788:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:43,987:INFO:Initializing load_model()
2024-08-21 01:26:43,987:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:26:48,480:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:48,481:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:48,481:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:48,481:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:26:52,355:INFO:Initializing load_model()
2024-08-21 01:26:52,356:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:27:39,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:39,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:39,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:39,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:43,472:INFO:Initializing load_model()
2024-08-21 01:27:43,472:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 01:27:49,668:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:49,668:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:49,668:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:49,668:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 01:27:54,332:INFO:Initializing load_model()
2024-08-21 01:27:54,333:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 21:21:49,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:21:49,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:21:49,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:21:49,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:21:58,370:INFO:Initializing load_model()
2024-08-21 21:21:58,371:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 21:22:04,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:22:04,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:22:04,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:22:04,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:22:09,441:INFO:Initializing load_model()
2024-08-21 21:22:09,443:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 21:22:15,283:INFO:Initializing predict_model()
2024-08-21 21:22:15,283:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024487D8ED90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002448995D8A0>)
2024-08-21 21:22:15,283:INFO:Checking exceptions
2024-08-21 21:22:15,283:INFO:Preloading libraries
2024-08-21 21:22:15,284:INFO:Set up data.
2024-08-21 21:22:15,297:INFO:Set up index.
2024-08-21 21:22:46,022:INFO:Initializing predict_model()
2024-08-21 21:22:46,022:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002448987C150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024489A89080>)
2024-08-21 21:22:46,022:INFO:Checking exceptions
2024-08-21 21:22:46,023:INFO:Preloading libraries
2024-08-21 21:22:46,023:INFO:Set up data.
2024-08-21 21:22:46,034:INFO:Set up index.
2024-08-21 21:27:45,966:INFO:Initializing predict_model()
2024-08-21 21:27:45,966:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024487D71090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024489A89620>)
2024-08-21 21:27:45,966:INFO:Checking exceptions
2024-08-21 21:27:45,966:INFO:Preloading libraries
2024-08-21 21:27:45,966:INFO:Set up data.
2024-08-21 21:27:45,975:INFO:Set up index.
2024-08-21 21:37:44,589:INFO:Initializing predict_model()
2024-08-21 21:37:44,589:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002448984B6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002448995DF80>)
2024-08-21 21:37:44,589:INFO:Checking exceptions
2024-08-21 21:37:44,589:INFO:Preloading libraries
2024-08-21 21:37:44,591:INFO:Set up data.
2024-08-21 21:37:44,606:INFO:Set up index.
2024-08-21 21:39:05,519:INFO:Initializing predict_model()
2024-08-21 21:39:05,519:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244898F5810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024485CE47C0>)
2024-08-21 21:39:05,519:INFO:Checking exceptions
2024-08-21 21:39:05,520:INFO:Preloading libraries
2024-08-21 21:39:05,522:INFO:Set up data.
2024-08-21 21:39:05,547:INFO:Set up index.
2024-08-21 21:39:10,536:INFO:Initializing predict_model()
2024-08-21 21:39:10,536:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024489913550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024489530F40>)
2024-08-21 21:39:10,536:INFO:Checking exceptions
2024-08-21 21:39:10,536:INFO:Preloading libraries
2024-08-21 21:39:10,537:INFO:Set up data.
2024-08-21 21:39:10,547:INFO:Set up index.
2024-08-21 21:41:52,306:INFO:Initializing load_model()
2024-08-21 21:41:52,309:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 21:42:05,417:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:42:05,417:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:42:05,417:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:42:05,417:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:42:17,200:INFO:Initializing load_model()
2024-08-21 21:42:17,201:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-21 21:42:23,258:INFO:Initializing predict_model()
2024-08-21 21:42:23,259:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000182E8F77410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000182E9ADD440>)
2024-08-21 21:42:23,259:INFO:Checking exceptions
2024-08-21 21:42:23,259:INFO:Preloading libraries
2024-08-21 21:42:23,260:INFO:Set up data.
2024-08-21 21:42:23,292:INFO:Set up index.
2024-08-21 21:44:17,487:INFO:Initializing predict_model()
2024-08-21 21:44:17,487:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000182E9A632D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000182E2DA6AC0>)
2024-08-21 21:44:17,487:INFO:Checking exceptions
2024-08-21 21:44:17,488:INFO:Preloading libraries
2024-08-21 21:44:17,488:INFO:Set up data.
2024-08-21 21:44:17,523:INFO:Set up index.
2024-08-21 21:47:54,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:47:54,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:47:54,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:47:54,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-21 21:48:02,100:INFO:PyCaret AnomalyExperiment
2024-08-21 21:48:02,101:INFO:Logging name: anomaly_detection_experiment
2024-08-21 21:48:02,101:INFO:ML Usecase: MLUsecase.ANOMALY
2024-08-21 21:48:02,101:INFO:version 3.3.2
2024-08-21 21:48:02,101:INFO:Initializing setup()
2024-08-21 21:48:02,101:INFO:self.USI: ef27
2024-08-21 21:48:02,101:INFO:self._variable_keys: {'n_jobs_param', 'gpu_n_jobs_param', 'log_plots_param', '_available_plots', 'exp_id', 'seed', 'pipeline', 'idx', 'html_param', 'X', 'logging_param', 'USI', 'exp_name_log', 'gpu_param', 'data', '_ml_usecase', 'memory'}
2024-08-21 21:48:02,101:INFO:Checking environment
2024-08-21 21:48:02,101:INFO:python_version: 3.11.7
2024-08-21 21:48:02,102:INFO:python_build: ('main', 'Dec 15 2023 18:05:47')
2024-08-21 21:48:02,102:INFO:machine: AMD64
2024-08-21 21:48:02,102:INFO:platform: Windows-10-10.0.22631-SP0
2024-08-21 21:48:02,102:INFO:Memory: svmem(total=16890978304, available=2392432640, percent=85.8, used=14498545664, free=2392432640)
2024-08-21 21:48:02,102:INFO:Physical Core: 12
2024-08-21 21:48:02,102:INFO:Logical Core: 16
2024-08-21 21:48:02,102:INFO:Checking libraries
2024-08-21 21:48:02,102:INFO:System:
2024-08-21 21:48:02,103:INFO:    python: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]
2024-08-21 21:48:02,103:INFO:executable: C:\ProgramData\anaconda3\python.exe
2024-08-21 21:48:02,103:INFO:   machine: Windows-10-10.0.22631-SP0
2024-08-21 21:48:02,103:INFO:PyCaret required dependencies:
2024-08-21 21:48:04,555:INFO:                 pip: 23.3.1
2024-08-21 21:48:04,555:INFO:          setuptools: 68.2.2
2024-08-21 21:48:04,556:INFO:             pycaret: 3.3.2
2024-08-21 21:48:04,556:INFO:             IPython: 8.20.0
2024-08-21 21:48:04,556:INFO:          ipywidgets: 7.6.5
2024-08-21 21:48:04,557:INFO:                tqdm: 4.65.0
2024-08-21 21:48:04,557:INFO:               numpy: 1.26.4
2024-08-21 21:48:04,557:INFO:              pandas: 2.1.4
2024-08-21 21:48:04,557:INFO:              jinja2: 3.1.3
2024-08-21 21:48:04,557:INFO:               scipy: 1.11.4
2024-08-21 21:48:04,558:INFO:              joblib: 1.2.0
2024-08-21 21:48:04,558:INFO:             sklearn: 1.2.2
2024-08-21 21:48:04,558:INFO:                pyod: 2.0.1
2024-08-21 21:48:04,558:INFO:            imblearn: 0.11.0
2024-08-21 21:48:04,558:INFO:   category_encoders: 2.6.3
2024-08-21 21:48:04,558:INFO:            lightgbm: 4.4.0
2024-08-21 21:48:04,558:INFO:               numba: 0.59.0
2024-08-21 21:48:04,559:INFO:            requests: 2.31.0
2024-08-21 21:48:04,559:INFO:          matplotlib: 3.8.0
2024-08-21 21:48:04,559:INFO:          scikitplot: 0.3.7
2024-08-21 21:48:04,559:INFO:         yellowbrick: 1.5
2024-08-21 21:48:04,559:INFO:              plotly: 5.9.0
2024-08-21 21:48:04,559:INFO:    plotly-resampler: Not installed
2024-08-21 21:48:04,559:INFO:             kaleido: 0.2.1
2024-08-21 21:48:04,559:INFO:           schemdraw: 0.15
2024-08-21 21:48:04,560:INFO:         statsmodels: 0.14.0
2024-08-21 21:48:04,560:INFO:              sktime: 0.26.0
2024-08-21 21:48:04,560:INFO:               tbats: 1.1.3
2024-08-21 21:48:04,560:INFO:            pmdarima: 2.0.4
2024-08-21 21:48:04,560:INFO:              psutil: 5.9.0
2024-08-21 21:48:04,560:INFO:          markupsafe: 2.1.3
2024-08-21 21:48:04,560:INFO:             pickle5: Not installed
2024-08-21 21:48:04,561:INFO:         cloudpickle: 2.2.1
2024-08-21 21:48:04,561:INFO:         deprecation: 2.1.0
2024-08-21 21:48:04,561:INFO:              xxhash: 3.4.1
2024-08-21 21:48:04,561:INFO:           wurlitzer: Not installed
2024-08-21 21:48:04,561:INFO:PyCaret optional dependencies:
2024-08-21 21:48:18,934:INFO:                shap: 0.44.1
2024-08-21 21:48:18,934:INFO:           interpret: 0.6.2
2024-08-21 21:48:18,934:INFO:                umap: 0.5.6
2024-08-21 21:48:18,935:INFO:     ydata_profiling: 4.8.3
2024-08-21 21:48:18,935:INFO:  explainerdashboard: 0.4.7
2024-08-21 21:48:18,935:INFO:             autoviz: Not installed
2024-08-21 21:48:18,935:INFO:           fairlearn: 0.7.0
2024-08-21 21:48:18,935:INFO:          deepchecks: Not installed
2024-08-21 21:48:18,935:INFO:             xgboost: 2.1.0
2024-08-21 21:48:18,935:INFO:            catboost: 1.2.5
2024-08-21 21:48:18,935:INFO:              kmodes: 0.12.2
2024-08-21 21:48:18,935:INFO:             mlxtend: 0.23.1
2024-08-21 21:48:18,935:INFO:       statsforecast: 1.5.0
2024-08-21 21:48:18,935:INFO:        tune_sklearn: Not installed
2024-08-21 21:48:18,935:INFO:                 ray: Not installed
2024-08-21 21:48:18,936:INFO:            hyperopt: 0.2.7
2024-08-21 21:48:18,936:INFO:              optuna: 3.6.1
2024-08-21 21:48:18,936:INFO:               skopt: 0.10.2
2024-08-21 21:48:18,936:INFO:              mlflow: 2.14.2
2024-08-21 21:48:18,936:INFO:              gradio: 4.37.2
2024-08-21 21:48:18,936:INFO:             fastapi: 0.111.0
2024-08-21 21:48:18,936:INFO:             uvicorn: 0.30.1
2024-08-21 21:48:18,936:INFO:              m2cgen: 0.10.0
2024-08-21 21:48:18,936:INFO:           evidently: 0.4.30
2024-08-21 21:48:18,937:INFO:               fugue: 0.8.7
2024-08-21 21:48:18,937:INFO:           streamlit: 1.30.0
2024-08-21 21:48:18,937:INFO:             prophet: Not installed
2024-08-21 21:48:18,937:INFO:None
2024-08-21 21:48:18,937:INFO:Set up data.
2024-08-21 21:48:18,986:INFO:Set up index.
2024-08-21 21:48:18,986:INFO:Assigning column types.
2024-08-21 21:48:18,997:INFO:Engine successfully changes for model 'kmeans' to 'sklearn'.
2024-08-21 21:48:21,126:INFO:Engine successfully changes for model 'dbscan' to 'sklearn'.
2024-08-21 21:48:21,152:INFO:Preparing preprocessing pipeline...
2024-08-21 21:48:21,153:INFO:Set up simple imputation.
2024-08-21 21:48:21,164:INFO:Set up encoding of categorical features.
2024-08-21 21:48:21,164:INFO:Set up column transformation.
2024-08-21 21:48:21,164:INFO:Set up feature normalization.
2024-08-21 21:49:13,517:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 2.91s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_transformer = self._memory_fit(

2024-08-21 21:49:43,630:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 2.66s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_transform(

2024-08-21 21:56:59,191:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 0.72s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_transform(

2024-08-21 21:57:02,949:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:278: UserWarning: Persisting input arguments took 0.59s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2024-08-21 21:57:03,147:INFO:Finished creating preprocessing pipeline.
2024-08-21 21:57:03,196:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH', 'AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=SimpleImputer(strategy...
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=OneHotEncoder(cols=['DEPT_NAME',
                                                                    'DIV_NAME',
                                                                    'MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT',
                                                                    'YEAR_MONTH'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-08-21 21:57:03,198:INFO:Creating final display dataframe.
2024-08-21 21:57:23,137:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.09s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = pipeline._memory_transform(transformer, X, y)

2024-08-21 21:57:31,257:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 6.05s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-08-21 21:57:31,416:INFO:Setup _display_container:                  Description                         Value
0                 Session id                           123
1        Original data shape                    (15156, 9)
2     Transformed data shape                 (15156, 7956)
3           Numeric features                             3
4       Categorical features                             6
5                 Preprocess                          True
6            Imputation type                        simple
7         Numeric imputation                          mean
8     Categorical imputation                          mode
9   Maximum one-hot encoding                            -1
10           Encoding method                          None
11            Transformation                          True
12     Transformation method                   yeo-johnson
13                 Normalize                          True
14          Normalize method                        zscore
15                  CPU Jobs                            -1
16                   Use GPU                         False
17            Log Experiment                  MlflowLogger
18           Experiment Name  anomaly_detection_experiment
19                       USI                          ef27
2024-08-21 21:57:31,473:INFO:Logging experiment in loggers
2024-08-21 21:57:32,330:INFO:SubProcess save_model() called ==================================
2024-08-21 21:57:32,380:INFO:Initializing save_model()
2024-08-21 21:57:32,380:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH', 'AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=SimpleImputer(strategy...
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=OneHotEncoder(cols=['DEPT_NAME',
                                                                    'DIV_NAME',
                                                                    'MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT',
                                                                    'YEAR_MONTH'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), model_name=C:\Users\USER\AppData\Local\Temp\tmpvr__2ut9\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH', 'AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=SimpleImputer(strategy...
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=OneHotEncoder(cols=['DEPT_NAME',
                                                                    'DIV_NAME',
                                                                    'MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT',
                                                                    'YEAR_MONTH'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=False, use_case=MLUsecase.ANOMALY, kwargs={})
2024-08-21 21:57:32,380:INFO:Adding model into prep_pipe
2024-08-21 21:57:32,380:WARNING:Only Model saved as it was a pipeline.
2024-08-21 21:57:36,407:INFO:C:\Users\USER\AppData\Local\Temp\tmpvr__2ut9\Transformation Pipeline.pkl saved in current working directory
2024-08-21 21:57:36,426:INFO:Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH', 'AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=SimpleImputer(strategy...
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=OneHotEncoder(cols=['DEPT_NAME',
                                                                    'DIV_NAME',
                                                                    'MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT',
                                                                    'YEAR_MONTH'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2024-08-21 21:57:36,426:INFO:save_model() successfully completed......................................
2024-08-21 21:57:36,684:INFO:SubProcess save_model() end ==================================
2024-08-21 21:57:37,233:INFO:setup() successfully completed in 569.62s...............
2024-08-21 21:57:37,294:INFO:Initializing create_model()
2024-08-21 21:57:37,294:INFO:create_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000001847D654850>, estimator=iforest, num_clusters=4, fraction=0.05, ground_truth=None, round=4, fit_kwargs=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, raise_num_clusters=False, display=None, kwargs={})
2024-08-21 21:57:37,295:INFO:Checking exceptions
2024-08-21 21:57:40,901:INFO:Importing untrained model
2024-08-21 21:57:40,909:INFO:Isolation Forest Imported successfully
2024-08-21 21:57:41,949:INFO:Fitting Model
2024-08-21 22:05:39,069:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-21 22:05:39,073:INFO:create_models() successfully completed......................................
2024-08-21 22:05:39,078:INFO:Creating Dashboard logs
2024-08-21 22:05:39,142:INFO:Model: Isolation Forest
2024-08-21 22:05:39,355:INFO:Logged params: {'behaviour': 'new', 'bootstrap': False, 'contamination': 0.05, 'max_features': 1.0, 'max_samples': 'auto', 'n_estimators': 100, 'n_jobs': -1, 'random_state': 123, 'verbose': 0}
2024-08-21 22:05:39,608:WARNING:C:\ProgramData\anaconda3\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2024-08-21 22:05:57,229:INFO:Uploading results into container
2024-08-21 22:05:57,229:INFO:Uploading model into container now
2024-08-21 22:05:57,236:INFO:_master_model_container: 1
2024-08-21 22:05:57,237:INFO:_display_container: 1
2024-08-21 22:05:57,238:INFO:IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0)
2024-08-21 22:05:57,238:INFO:create_model() successfully completed......................................
2024-08-21 22:05:57,990:INFO:gpu_param set to False
2024-08-21 22:05:58,014:INFO:Initializing assign_model()
2024-08-21 22:05:58,015:INFO:assign_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000001847D654850>, model=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), transformation=False, score=True, verbose=True)
2024-08-21 22:05:58,015:INFO:Checking exceptions
2024-08-21 22:05:58,015:INFO:Determining Trained Model
2024-08-21 22:05:58,016:INFO:Trained Model : Isolation Forest
2024-08-21 22:05:58,016:INFO:Copying data
2024-08-21 22:05:58,027:INFO:(15156, 11)
2024-08-21 22:05:58,027:INFO:assign_model() successfully completed......................................
2024-08-21 22:05:58,073:INFO:Initializing predict_model()
2024-08-21 22:05:58,073:INFO:predict_model(self=<pycaret.anomaly.oop.AnomalyExperiment object at 0x000001847D654850>, estimator=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), ml_usecase=None)
2024-08-21 22:06:16,543:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.84s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = pipeline._memory_transform(transformer, X, y)

2024-08-21 22:06:35,719:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 2.16s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-08-21 22:06:36,047:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\base.py:486: UserWarning: X has feature names, but IsolationForest was fitted without feature names
  warnings.warn(

2024-08-21 22:06:36,710:WARNING:C:\Users\USER\AppData\Roaming\Python\Python311\site-packages\sklearn\base.py:486: UserWarning: X has feature names, but IsolationForest was fitted without feature names
  warnings.warn(

2024-08-21 22:06:37,544:INFO:Initializing save_model()
2024-08-21 22:06:37,544:INFO:save_model(model=IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0), model_name=anomaly_detection_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\USER\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH', 'AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=SimpleImputer(strategy...
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=OneHotEncoder(cols=['DEPT_NAME',
                                                                    'DIV_NAME',
                                                                    'MERCHANT',
                                                                    'CAT_DESC',
                                                                    'TRANS_DT',
                                                                    'YEAR_MONTH'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.ANOMALY, kwargs={})
2024-08-21 22:06:37,544:INFO:Adding model into prep_pipe
2024-08-21 22:06:38,991:INFO:anomaly_detection_model.pkl saved in current working directory
2024-08-21 22:06:39,013:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['FISCAL_YR', 'FISCAL_MTH', 'AMT'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['DEPT_NAME', 'DIV_NAME',
                                             'MERCHANT', 'CAT_DESC', 'TRANS_DT',
                                             'YEAR_MONTH'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',...
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('transformation',
                 TransformerWrapper(transformer=PowerTransformer(standardize=False))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 IForest(behaviour='new', bootstrap=False, contamination=0.05,
    max_features=1.0, max_samples='auto', n_estimators=100, n_jobs=-1,
    random_state=123, verbose=0))])
2024-08-21 22:06:39,013:INFO:save_model() successfully completed......................................
2024-08-21 23:26:15,335:INFO:Initializing load_model()
2024-08-21 23:26:15,336:INFO:load_model(model_name=anomaly_detection_model, platform=None, authentication=None, verbose=True)
2024-08-21 23:26:21,095:INFO:Initializing load_model()
2024-08-21 23:26:21,097:INFO:load_model(model_name=anomaly_detection_model, platform=None, authentication=None, verbose=True)
2024-08-21 23:26:22,865:WARNING:C:\ProgramData\anaconda3\Lib\site-packages\IPython\core\interactiveshell.py:3561: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.
  warn("To exit: use 'exit', 'quit', or Ctrl-D.", stacklevel=1)

2024-08-22 00:56:02,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:02,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:02,618:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:02,618:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:11,267:INFO:Initializing load_model()
2024-08-22 00:56:11,268:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-22 00:56:20,696:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:20,696:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:20,697:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:20,697:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-08-22 00:56:30,449:INFO:Initializing load_model()
2024-08-22 00:56:30,450:INFO:load_model(model_name=mushroom_classification_model, platform=None, authentication=None, verbose=True)
2024-08-22 00:57:42,562:INFO:Initializing predict_model()
2024-08-22 00:57:42,562:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016CE2C23290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['cap-shape', 'cap-surface',
                                             'cap-color', 'bruises', 'odor',
                                             'gill-attachment', 'gill-spacing',
                                             'gill-si...
                                                                    'stalk-surface-below-ring',
                                                                    'stalk-color-above-ring',
                                                                    'stalk-color-below-ring',
                                                                    'veil-type',
                                                                    'veil-color',
                                                                    'ring-number',
                                                                    'ring-type',
                                                                    'spore-print-color',
                                                                    'population',
                                                                    'habitat'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator', KNeighborsClassifier(n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016CE47AC180>)
2024-08-22 00:57:42,562:INFO:Checking exceptions
2024-08-22 00:57:42,562:INFO:Preloading libraries
2024-08-22 00:57:42,563:INFO:Set up data.
2024-08-22 00:57:42,579:INFO:Set up index.
